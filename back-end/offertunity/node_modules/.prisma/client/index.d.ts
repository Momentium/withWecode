
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model answers
 */

export type answers = {
  id: number
  content: string
  created_at: Date
  updated_at: Date
  question_id: number
}

/**
 * Model applicants
 */

export type applicants = {
  id: number
  company_id: number
  project_id: number
  created_at: Date
}

/**
 * Model business_types
 */

export type business_types = {
  id: number
  name: string
}

/**
 * Model companies
 */

export type companies = {
  id: number
  type_id: number | null
  name: string | null
  logo_img: string | null
  established_date: Date | null
  hompage: string | null
  description: string | null
  team_intro: string | null
  member_count: number | null
}

/**
 * Model company_documents
 */

export type company_documents = {
  id: number
  company_id: number
  doc_url: string
  type_id: number
}

/**
 * Model company_members
 */

export type company_members = {
  id: number
  company_id: number | null
  name: string | null
  img: string | null
  position: string | null
}

/**
 * Model company_news
 */

export type company_news = {
  id: number
  company_id: number
  URL: string
}

/**
 * Model company_types
 */

export type company_types = {
  id: number
  name: string
}

/**
 * Model demodays
 */

export type demodays = {
  id: number
  name: string | null
  company_id: number | null
  streaming_url: string | null
}

/**
 * Model document_types
 */

export type document_types = {
  id: number
  name: string
}

/**
 * Model email_auth
 */

export type email_auth = {
  id: number
  email: string
  auth_number: string
}

/**
 * Model invested_from
 */

export type invested_from = {
  id: number
  startup_id: number
  date: Date
  invested_institution: string
  invested_fund: number
  corporate_value: number
  series_id: number
}

/**
 * Model invested_to
 */

export type invested_to = {
  id: number
  partner_id: number
  date: Date
  startup_name: string
  invested_fund: number
  corporate_value: number
  series_id: number
}

/**
 * Model investment_funds
 */

export type investment_funds = {
  id: number
  range: string
}

/**
 * Model investment_portfolio
 */

export type investment_portfolio = {
  id: number
  partner_id: number
  img_url: string
}

/**
 * Model investment_series
 */

export type investment_series = {
  id: number
  name: string
}

/**
 * Model IR_requests
 */

export type IR_requests = {
  id: number
  startup_id: number
  partner_id: number
  document_id: number | null
  is_checked: number
  from_partner: number
  created_at: Date
  updated_at: Date
}

/**
 * Model participants
 */

export type participants = {
  id: number
  demoday_id: number
  order: number
  company_id: number
}

/**
 * Model partner_infos
 */

export type partner_infos = {
  id: number
  company_id: number
  interst_technology_id: number | null
  invested_total_id: number | null
  invested_counts: number | null
}

/**
 * Model partner_likes
 */

export type partner_likes = {
  id: number
  company_likes_id: number
  company_liked_id: number
  is_liked: number
  created_at: Date
  updated_at: Date
}

/**
 * Model phone_auth
 */

export type phone_auth = {
  id: number
  phone_number: string
  auth_number: string
}

/**
 * Model project_images
 */

export type project_images = {
  id: number
  project_id: number
  img_url: string
}

/**
 * Model project_likes
 */

export type project_likes = {
  id: number
  comapny_id: number
  project_id: number
  is_liked: number
  created_at: Date
  updated_at: Date
}

/**
 * Model projects
 */

export type projects = {
  id: number
  name: string | null
  introduction: string | null
  host: number | null
  due_date: Date | null
  sector_id: number | null
  eligibility: string | null
  outline: string | null
  detail: string | null
  application_method: string | null
  caution: string | null
  contact: string | null
  is_opened: number
  hit: number
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model questions
 */

export type questions = {
  id: number
  content: string
  company_id: number
  user_id: number
  created_at: Date
  updated_at: Date
  demoday_id: number
}

/**
 * Model recent_views_project
 */

export type recent_views_project = {
  id: number
  project_id: number
  company_id: number
  created_at: Date
  updated_at: Date
}

/**
 * Model required_documents
 */

export type required_documents = {
  id: number
  project_id: number
  document_id: number
}

/**
 * Model sectors
 */

export type sectors = {
  id: number
  name: string
}

/**
 * Model service_types
 */

export type service_types = {
  id: number
  name: string
}

/**
 * Model signup_methods
 */

export type signup_methods = {
  id: number
  name: string
}

/**
 * Model startup_images
 */

export type startup_images = {
  id: number
  company_id: number
  img_url: string
}

/**
 * Model startup_infos
 */

export type startup_infos = {
  id: number
  company_id: number
  rep: string | null
  sector_id: number | null
  core_technology_id: number | null
  item_description: string | null
  contact: string | null
  address_road: string | null
  address_detail: string | null
  service_type_id: number | null
  business_type_id: number | null
  business_license_number: string | null
  email: string | null
  instagram_url: string | null
  facebook_url: string | null
  thumbnail: string | null
}

/**
 * Model startup_likes
 */

export type startup_likes = {
  id: number
  user_id: number
  company_id: number
  is_liked: number
  created_at: Date
  updated_at: Date
}

/**
 * Model technologies
 */

export type technologies = {
  id: number
  name: string
}

/**
 * Model terms
 */

export type terms = {
  id: number
  name: string
  content: string
}

/**
 * Model user_agreements
 */

export type user_agreements = {
  id: number
  user_id: number
  term_id: number
}

/**
 * Model user_types
 */

export type user_types = {
  id: number
  name: string
}

/**
 * Model users
 */

export type users = {
  id: number
  sns_id: string | null
  name: string
  type_id: number | null
  profile_picture: string | null
  email: string
  password: string | null
  signup_method_id: number
  company_id: number | null
  phone_number: string | null
  is_verified: boolean
  created_at: Date
  updated_at: Date
}

/**
 * Model votes
 */

export type votes = {
  id: number
  user_id: number
  participants_id: number
  created_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Answers
 * const answers = await prisma.answers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Answers
   * const answers = await prisma.answers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.answers`: Exposes CRUD operations for the **answers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answers.findMany()
    * ```
    */
  get answers(): Prisma.answersDelegate;

  /**
   * `prisma.applicants`: Exposes CRUD operations for the **applicants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applicants
    * const applicants = await prisma.applicants.findMany()
    * ```
    */
  get applicants(): Prisma.applicantsDelegate;

  /**
   * `prisma.business_types`: Exposes CRUD operations for the **business_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Business_types
    * const business_types = await prisma.business_types.findMany()
    * ```
    */
  get business_types(): Prisma.business_typesDelegate;

  /**
   * `prisma.companies`: Exposes CRUD operations for the **companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.companiesDelegate;

  /**
   * `prisma.company_documents`: Exposes CRUD operations for the **company_documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_documents
    * const company_documents = await prisma.company_documents.findMany()
    * ```
    */
  get company_documents(): Prisma.company_documentsDelegate;

  /**
   * `prisma.company_members`: Exposes CRUD operations for the **company_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_members
    * const company_members = await prisma.company_members.findMany()
    * ```
    */
  get company_members(): Prisma.company_membersDelegate;

  /**
   * `prisma.company_news`: Exposes CRUD operations for the **company_news** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_news
    * const company_news = await prisma.company_news.findMany()
    * ```
    */
  get company_news(): Prisma.company_newsDelegate;

  /**
   * `prisma.company_types`: Exposes CRUD operations for the **company_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_types
    * const company_types = await prisma.company_types.findMany()
    * ```
    */
  get company_types(): Prisma.company_typesDelegate;

  /**
   * `prisma.demodays`: Exposes CRUD operations for the **demodays** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Demodays
    * const demodays = await prisma.demodays.findMany()
    * ```
    */
  get demodays(): Prisma.demodaysDelegate;

  /**
   * `prisma.document_types`: Exposes CRUD operations for the **document_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Document_types
    * const document_types = await prisma.document_types.findMany()
    * ```
    */
  get document_types(): Prisma.document_typesDelegate;

  /**
   * `prisma.email_auth`: Exposes CRUD operations for the **email_auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Email_auths
    * const email_auths = await prisma.email_auth.findMany()
    * ```
    */
  get email_auth(): Prisma.email_authDelegate;

  /**
   * `prisma.invested_from`: Exposes CRUD operations for the **invested_from** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invested_froms
    * const invested_froms = await prisma.invested_from.findMany()
    * ```
    */
  get invested_from(): Prisma.invested_fromDelegate;

  /**
   * `prisma.invested_to`: Exposes CRUD operations for the **invested_to** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invested_tos
    * const invested_tos = await prisma.invested_to.findMany()
    * ```
    */
  get invested_to(): Prisma.invested_toDelegate;

  /**
   * `prisma.investment_funds`: Exposes CRUD operations for the **investment_funds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investment_funds
    * const investment_funds = await prisma.investment_funds.findMany()
    * ```
    */
  get investment_funds(): Prisma.investment_fundsDelegate;

  /**
   * `prisma.investment_portfolio`: Exposes CRUD operations for the **investment_portfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investment_portfolios
    * const investment_portfolios = await prisma.investment_portfolio.findMany()
    * ```
    */
  get investment_portfolio(): Prisma.investment_portfolioDelegate;

  /**
   * `prisma.investment_series`: Exposes CRUD operations for the **investment_series** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investment_series
    * const investment_series = await prisma.investment_series.findMany()
    * ```
    */
  get investment_series(): Prisma.investment_seriesDelegate;

  /**
   * `prisma.iR_requests`: Exposes CRUD operations for the **IR_requests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IR_requests
    * const iR_requests = await prisma.iR_requests.findMany()
    * ```
    */
  get iR_requests(): Prisma.IR_requestsDelegate;

  /**
   * `prisma.participants`: Exposes CRUD operations for the **participants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participants
    * const participants = await prisma.participants.findMany()
    * ```
    */
  get participants(): Prisma.participantsDelegate;

  /**
   * `prisma.partner_infos`: Exposes CRUD operations for the **partner_infos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partner_infos
    * const partner_infos = await prisma.partner_infos.findMany()
    * ```
    */
  get partner_infos(): Prisma.partner_infosDelegate;

  /**
   * `prisma.partner_likes`: Exposes CRUD operations for the **partner_likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partner_likes
    * const partner_likes = await prisma.partner_likes.findMany()
    * ```
    */
  get partner_likes(): Prisma.partner_likesDelegate;

  /**
   * `prisma.phone_auth`: Exposes CRUD operations for the **phone_auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Phone_auths
    * const phone_auths = await prisma.phone_auth.findMany()
    * ```
    */
  get phone_auth(): Prisma.phone_authDelegate;

  /**
   * `prisma.project_images`: Exposes CRUD operations for the **project_images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Project_images
    * const project_images = await prisma.project_images.findMany()
    * ```
    */
  get project_images(): Prisma.project_imagesDelegate;

  /**
   * `prisma.project_likes`: Exposes CRUD operations for the **project_likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Project_likes
    * const project_likes = await prisma.project_likes.findMany()
    * ```
    */
  get project_likes(): Prisma.project_likesDelegate;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.projectsDelegate;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate;

  /**
   * `prisma.recent_views_project`: Exposes CRUD operations for the **recent_views_project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recent_views_projects
    * const recent_views_projects = await prisma.recent_views_project.findMany()
    * ```
    */
  get recent_views_project(): Prisma.recent_views_projectDelegate;

  /**
   * `prisma.required_documents`: Exposes CRUD operations for the **required_documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Required_documents
    * const required_documents = await prisma.required_documents.findMany()
    * ```
    */
  get required_documents(): Prisma.required_documentsDelegate;

  /**
   * `prisma.sectors`: Exposes CRUD operations for the **sectors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sectors
    * const sectors = await prisma.sectors.findMany()
    * ```
    */
  get sectors(): Prisma.sectorsDelegate;

  /**
   * `prisma.service_types`: Exposes CRUD operations for the **service_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Service_types
    * const service_types = await prisma.service_types.findMany()
    * ```
    */
  get service_types(): Prisma.service_typesDelegate;

  /**
   * `prisma.signup_methods`: Exposes CRUD operations for the **signup_methods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Signup_methods
    * const signup_methods = await prisma.signup_methods.findMany()
    * ```
    */
  get signup_methods(): Prisma.signup_methodsDelegate;

  /**
   * `prisma.startup_images`: Exposes CRUD operations for the **startup_images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Startup_images
    * const startup_images = await prisma.startup_images.findMany()
    * ```
    */
  get startup_images(): Prisma.startup_imagesDelegate;

  /**
   * `prisma.startup_infos`: Exposes CRUD operations for the **startup_infos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Startup_infos
    * const startup_infos = await prisma.startup_infos.findMany()
    * ```
    */
  get startup_infos(): Prisma.startup_infosDelegate;

  /**
   * `prisma.startup_likes`: Exposes CRUD operations for the **startup_likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Startup_likes
    * const startup_likes = await prisma.startup_likes.findMany()
    * ```
    */
  get startup_likes(): Prisma.startup_likesDelegate;

  /**
   * `prisma.technologies`: Exposes CRUD operations for the **technologies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Technologies
    * const technologies = await prisma.technologies.findMany()
    * ```
    */
  get technologies(): Prisma.technologiesDelegate;

  /**
   * `prisma.terms`: Exposes CRUD operations for the **terms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.terms.findMany()
    * ```
    */
  get terms(): Prisma.termsDelegate;

  /**
   * `prisma.user_agreements`: Exposes CRUD operations for the **user_agreements** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_agreements
    * const user_agreements = await prisma.user_agreements.findMany()
    * ```
    */
  get user_agreements(): Prisma.user_agreementsDelegate;

  /**
   * `prisma.user_types`: Exposes CRUD operations for the **user_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_types
    * const user_types = await prisma.user_types.findMany()
    * ```
    */
  get user_types(): Prisma.user_typesDelegate;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate;

  /**
   * `prisma.votes`: Exposes CRUD operations for the **votes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.votes.findMany()
    * ```
    */
  get votes(): Prisma.votesDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    answers: 'answers',
    applicants: 'applicants',
    business_types: 'business_types',
    companies: 'companies',
    company_documents: 'company_documents',
    company_members: 'company_members',
    company_news: 'company_news',
    company_types: 'company_types',
    demodays: 'demodays',
    document_types: 'document_types',
    email_auth: 'email_auth',
    invested_from: 'invested_from',
    invested_to: 'invested_to',
    investment_funds: 'investment_funds',
    investment_portfolio: 'investment_portfolio',
    investment_series: 'investment_series',
    IR_requests: 'IR_requests',
    participants: 'participants',
    partner_infos: 'partner_infos',
    partner_likes: 'partner_likes',
    phone_auth: 'phone_auth',
    project_images: 'project_images',
    project_likes: 'project_likes',
    projects: 'projects',
    questions: 'questions',
    recent_views_project: 'recent_views_project',
    required_documents: 'required_documents',
    sectors: 'sectors',
    service_types: 'service_types',
    signup_methods: 'signup_methods',
    startup_images: 'startup_images',
    startup_infos: 'startup_infos',
    startup_likes: 'startup_likes',
    technologies: 'technologies',
    terms: 'terms',
    user_agreements: 'user_agreements',
    user_types: 'user_types',
    users: 'users',
    votes: 'votes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model answers
   */


  export type AggregateAnswers = {
    count: number | null
    avg: AnswersAvgAggregateOutputType | null
    sum: AnswersSumAggregateOutputType | null
    min: AnswersMinAggregateOutputType | null
    max: AnswersMaxAggregateOutputType | null
  }

  export type AnswersAvgAggregateOutputType = {
    id: number
    question_id: number
  }

  export type AnswersSumAggregateOutputType = {
    id: number
    question_id: number
  }

  export type AnswersMinAggregateOutputType = {
    id: number
    content: string | null
    created_at: Date | null
    updated_at: Date | null
    question_id: number
  }

  export type AnswersMaxAggregateOutputType = {
    id: number
    content: string | null
    created_at: Date | null
    updated_at: Date | null
    question_id: number
  }

  export type AnswersCountAggregateOutputType = {
    id: number
    content: number | null
    created_at: number | null
    updated_at: number | null
    question_id: number
    _all: number
  }


  export type AnswersAvgAggregateInputType = {
    id?: true
    question_id?: true
  }

  export type AnswersSumAggregateInputType = {
    id?: true
    question_id?: true
  }

  export type AnswersMinAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    updated_at?: true
    question_id?: true
  }

  export type AnswersMaxAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    updated_at?: true
    question_id?: true
  }

  export type AnswersCountAggregateInputType = {
    id?: true
    content?: true
    created_at?: true
    updated_at?: true
    question_id?: true
    _all?: true
  }

  export type AggregateAnswersArgs = {
    /**
     * Filter which answers to aggregate.
    **/
    where?: answersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of answers to fetch.
    **/
    orderBy?: Enumerable<answersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned answers
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: AnswersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: AnswersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: AnswersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: AnswersMaxAggregateInputType
  }

  export type GetAnswersAggregateType<T extends AggregateAnswersArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetAnswersAggregateScalarType<T[P]>
  }

  export type GetAnswersAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof AnswersAvgAggregateOutputType ? AnswersAvgAggregateOutputType[P] : never
  }

    



  export type answersSelect = {
    id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    question_id?: boolean
    questions?: boolean | questionsArgs
  }

  export type answersInclude = {
    questions?: boolean | questionsArgs
  }

  export type answersGetPayload<
    S extends boolean | null | undefined | answersArgs,
    U = keyof S
      > = S extends true
        ? answers
    : S extends undefined
    ? never
    : S extends answersArgs | FindManyanswersArgs
    ?'include' extends U
    ? answers  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'questions'
        ? questionsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof answers ?answers [P]
  : 
          P extends 'questions'
        ? questionsGetPayload<S['select'][P]> : never
  } 
    : answers
  : answers


  export interface answersDelegate {
    /**
     * Find zero or one Answers that matches the filter.
     * @param {FindUniqueanswersArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueanswersArgs>(
      args: Subset<T, FindUniqueanswersArgs>
    ): CheckSelect<T, Prisma__answersClient<answers | null>, Prisma__answersClient<answersGetPayload<T> | null>>

    /**
     * Find the first Answers that matches the filter.
     * @param {FindFirstanswersArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstanswersArgs>(
      args?: Subset<T, FindFirstanswersArgs>
    ): CheckSelect<T, Prisma__answersClient<answers | null>, Prisma__answersClient<answersGetPayload<T> | null>>

    /**
     * Find zero or more Answers that matches the filter.
     * @param {FindManyanswersArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answers.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answersWithIdOnly = await prisma.answers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyanswersArgs>(
      args?: Subset<T, FindManyanswersArgs>
    ): CheckSelect<T, Promise<Array<answers>>, Promise<Array<answersGetPayload<T>>>>

    /**
     * Create a Answers.
     * @param {answersCreateArgs} args - Arguments to create a Answers.
     * @example
     * // Create one Answers
     * const Answers = await prisma.answers.create({
     *   data: {
     *     // ... data to create a Answers
     *   }
     * })
     * 
    **/
    create<T extends answersCreateArgs>(
      args: Subset<T, answersCreateArgs>
    ): CheckSelect<T, Prisma__answersClient<answers>, Prisma__answersClient<answersGetPayload<T>>>

    /**
     * Delete a Answers.
     * @param {answersDeleteArgs} args - Arguments to delete one Answers.
     * @example
     * // Delete one Answers
     * const Answers = await prisma.answers.delete({
     *   where: {
     *     // ... filter to delete one Answers
     *   }
     * })
     * 
    **/
    delete<T extends answersDeleteArgs>(
      args: Subset<T, answersDeleteArgs>
    ): CheckSelect<T, Prisma__answersClient<answers>, Prisma__answersClient<answersGetPayload<T>>>

    /**
     * Update one Answers.
     * @param {answersUpdateArgs} args - Arguments to update one Answers.
     * @example
     * // Update one Answers
     * const answers = await prisma.answers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends answersUpdateArgs>(
      args: Subset<T, answersUpdateArgs>
    ): CheckSelect<T, Prisma__answersClient<answers>, Prisma__answersClient<answersGetPayload<T>>>

    /**
     * Delete zero or more Answers.
     * @param {answersDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends answersDeleteManyArgs>(
      args?: Subset<T, answersDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Answers.
     * @param {answersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answers = await prisma.answers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends answersUpdateManyArgs>(
      args: Subset<T, answersUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Answers.
     * @param {answersUpsertArgs} args - Arguments to update or create a Answers.
     * @example
     * // Update or create a Answers
     * const answers = await prisma.answers.upsert({
     *   create: {
     *     // ... data to create a Answers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answers we want to update
     *   }
     * })
    **/
    upsert<T extends answersUpsertArgs>(
      args: Subset<T, answersUpsertArgs>
    ): CheckSelect<T, Prisma__answersClient<answers>, Prisma__answersClient<answersGetPayload<T>>>

    /**
     * Find zero or one Answers that matches the filter.
     * @param {FindUniqueanswersArgs} args - Arguments to find a Answers
     * @deprecated This will be deprecated please use prisma.answers.findUnique
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueanswersArgs>(
      args: Subset<T, FindUniqueanswersArgs>
    ): CheckSelect<T, Prisma__answersClient<answers | null>, Prisma__answersClient<answersGetPayload<T> | null>>

    /**
     * Count the number of Answers.
     * @param {FindManyanswersArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answers.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyanswersArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Answers.
     * @param {AggregateAnswersArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateAnswersArgs>(args: Subset<T, AggregateAnswersArgs>): Promise<GetAnswersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for answers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__answersClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    questions<T extends questionsArgs = {}>(args?: Subset<T, questionsArgs>): CheckSelect<T, Prisma__questionsClient<questions | null>, Prisma__questionsClient<questionsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * answers findUnique
   */
  export type FindUniqueanswersArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * Filter, which answers to fetch.
    **/
    where: answersWhereUniqueInput
  }


  /**
   * answers findFirst
   */
  export type FindFirstanswersArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * Filter, which answers to fetch.
    **/
    where?: answersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of answers to fetch.
    **/
    orderBy?: Enumerable<answersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
    **/
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of answers.
    **/
    distinct?: Enumerable<AnswersScalarFieldEnum>
  }


  /**
   * answers findMany
   */
  export type FindManyanswersArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * Filter, which answers to fetch.
    **/
    where?: answersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of answers to fetch.
    **/
    orderBy?: Enumerable<answersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing answers.
    **/
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
    **/
    skip?: number
    distinct?: Enumerable<AnswersScalarFieldEnum>
  }


  /**
   * answers create
   */
  export type answersCreateArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * The data needed to create a answers.
    **/
    data: answersCreateInput
  }


  /**
   * answers update
   */
  export type answersUpdateArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * The data needed to update a answers.
    **/
    data: answersUpdateInput
    /**
     * Choose, which answers to update.
    **/
    where: answersWhereUniqueInput
  }


  /**
   * answers updateMany
   */
  export type answersUpdateManyArgs = {
    data: answersUpdateManyMutationInput
    where?: answersWhereInput
  }


  /**
   * answers upsert
   */
  export type answersUpsertArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * The filter to search for the answers to update in case it exists.
    **/
    where: answersWhereUniqueInput
    /**
     * In case the answers found by the `where` argument doesn't exist, create a new answers with this data.
    **/
    create: answersCreateInput
    /**
     * In case the answers was found with the provided `where` argument, update it with this data.
    **/
    update: answersUpdateInput
  }


  /**
   * answers delete
   */
  export type answersDeleteArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
    /**
     * Filter which answers to delete.
    **/
    where: answersWhereUniqueInput
  }


  /**
   * answers deleteMany
   */
  export type answersDeleteManyArgs = {
    where?: answersWhereInput
  }


  /**
   * answers without action
   */
  export type answersArgs = {
    /**
     * Select specific fields to fetch from the answers
    **/
    select?: answersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: answersInclude | null
  }



  /**
   * Model applicants
   */


  export type AggregateApplicants = {
    count: number | null
    avg: ApplicantsAvgAggregateOutputType | null
    sum: ApplicantsSumAggregateOutputType | null
    min: ApplicantsMinAggregateOutputType | null
    max: ApplicantsMaxAggregateOutputType | null
  }

  export type ApplicantsAvgAggregateOutputType = {
    id: number
    company_id: number
    project_id: number
  }

  export type ApplicantsSumAggregateOutputType = {
    id: number
    company_id: number
    project_id: number
  }

  export type ApplicantsMinAggregateOutputType = {
    id: number
    company_id: number
    project_id: number
    created_at: Date | null
  }

  export type ApplicantsMaxAggregateOutputType = {
    id: number
    company_id: number
    project_id: number
    created_at: Date | null
  }

  export type ApplicantsCountAggregateOutputType = {
    id: number
    company_id: number
    project_id: number
    created_at: number | null
    _all: number
  }


  export type ApplicantsAvgAggregateInputType = {
    id?: true
    company_id?: true
    project_id?: true
  }

  export type ApplicantsSumAggregateInputType = {
    id?: true
    company_id?: true
    project_id?: true
  }

  export type ApplicantsMinAggregateInputType = {
    id?: true
    company_id?: true
    project_id?: true
    created_at?: true
  }

  export type ApplicantsMaxAggregateInputType = {
    id?: true
    company_id?: true
    project_id?: true
    created_at?: true
  }

  export type ApplicantsCountAggregateInputType = {
    id?: true
    company_id?: true
    project_id?: true
    created_at?: true
    _all?: true
  }

  export type AggregateApplicantsArgs = {
    /**
     * Filter which applicants to aggregate.
    **/
    where?: applicantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of applicants to fetch.
    **/
    orderBy?: Enumerable<applicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: applicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applicants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applicants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned applicants
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ApplicantsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ApplicantsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ApplicantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ApplicantsMaxAggregateInputType
  }

  export type GetApplicantsAggregateType<T extends AggregateApplicantsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetApplicantsAggregateScalarType<T[P]>
  }

  export type GetApplicantsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ApplicantsAvgAggregateOutputType ? ApplicantsAvgAggregateOutputType[P] : never
  }

    



  export type applicantsSelect = {
    id?: boolean
    company_id?: boolean
    project_id?: boolean
    created_at?: boolean
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type applicantsInclude = {
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type applicantsGetPayload<
    S extends boolean | null | undefined | applicantsArgs,
    U = keyof S
      > = S extends true
        ? applicants
    : S extends undefined
    ? never
    : S extends applicantsArgs | FindManyapplicantsArgs
    ?'include' extends U
    ? applicants  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof applicants ?applicants [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['select'][P]> : never
  } 
    : applicants
  : applicants


  export interface applicantsDelegate {
    /**
     * Find zero or one Applicants that matches the filter.
     * @param {FindUniqueapplicantsArgs} args - Arguments to find a Applicants
     * @example
     * // Get one Applicants
     * const applicants = await prisma.applicants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueapplicantsArgs>(
      args: Subset<T, FindUniqueapplicantsArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants | null>, Prisma__applicantsClient<applicantsGetPayload<T> | null>>

    /**
     * Find the first Applicants that matches the filter.
     * @param {FindFirstapplicantsArgs} args - Arguments to find a Applicants
     * @example
     * // Get one Applicants
     * const applicants = await prisma.applicants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstapplicantsArgs>(
      args?: Subset<T, FindFirstapplicantsArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants | null>, Prisma__applicantsClient<applicantsGetPayload<T> | null>>

    /**
     * Find zero or more Applicants that matches the filter.
     * @param {FindManyapplicantsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applicants
     * const applicants = await prisma.applicants.findMany()
     * 
     * // Get first 10 Applicants
     * const applicants = await prisma.applicants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantsWithIdOnly = await prisma.applicants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyapplicantsArgs>(
      args?: Subset<T, FindManyapplicantsArgs>
    ): CheckSelect<T, Promise<Array<applicants>>, Promise<Array<applicantsGetPayload<T>>>>

    /**
     * Create a Applicants.
     * @param {applicantsCreateArgs} args - Arguments to create a Applicants.
     * @example
     * // Create one Applicants
     * const Applicants = await prisma.applicants.create({
     *   data: {
     *     // ... data to create a Applicants
     *   }
     * })
     * 
    **/
    create<T extends applicantsCreateArgs>(
      args: Subset<T, applicantsCreateArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants>, Prisma__applicantsClient<applicantsGetPayload<T>>>

    /**
     * Delete a Applicants.
     * @param {applicantsDeleteArgs} args - Arguments to delete one Applicants.
     * @example
     * // Delete one Applicants
     * const Applicants = await prisma.applicants.delete({
     *   where: {
     *     // ... filter to delete one Applicants
     *   }
     * })
     * 
    **/
    delete<T extends applicantsDeleteArgs>(
      args: Subset<T, applicantsDeleteArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants>, Prisma__applicantsClient<applicantsGetPayload<T>>>

    /**
     * Update one Applicants.
     * @param {applicantsUpdateArgs} args - Arguments to update one Applicants.
     * @example
     * // Update one Applicants
     * const applicants = await prisma.applicants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends applicantsUpdateArgs>(
      args: Subset<T, applicantsUpdateArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants>, Prisma__applicantsClient<applicantsGetPayload<T>>>

    /**
     * Delete zero or more Applicants.
     * @param {applicantsDeleteManyArgs} args - Arguments to filter Applicants to delete.
     * @example
     * // Delete a few Applicants
     * const { count } = await prisma.applicants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends applicantsDeleteManyArgs>(
      args?: Subset<T, applicantsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Applicants.
     * @param {applicantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applicants
     * const applicants = await prisma.applicants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends applicantsUpdateManyArgs>(
      args: Subset<T, applicantsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Applicants.
     * @param {applicantsUpsertArgs} args - Arguments to update or create a Applicants.
     * @example
     * // Update or create a Applicants
     * const applicants = await prisma.applicants.upsert({
     *   create: {
     *     // ... data to create a Applicants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Applicants we want to update
     *   }
     * })
    **/
    upsert<T extends applicantsUpsertArgs>(
      args: Subset<T, applicantsUpsertArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants>, Prisma__applicantsClient<applicantsGetPayload<T>>>

    /**
     * Find zero or one Applicants that matches the filter.
     * @param {FindUniqueapplicantsArgs} args - Arguments to find a Applicants
     * @deprecated This will be deprecated please use prisma.applicants.findUnique
     * @example
     * // Get one Applicants
     * const applicants = await prisma.applicants.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueapplicantsArgs>(
      args: Subset<T, FindUniqueapplicantsArgs>
    ): CheckSelect<T, Prisma__applicantsClient<applicants | null>, Prisma__applicantsClient<applicantsGetPayload<T> | null>>

    /**
     * Count the number of Applicants.
     * @param {FindManyapplicantsArgs} args - Arguments to filter Applicants to count.
     * @example
     * // Count the number of Applicants
     * const count = await prisma.applicants.count({
     *   where: {
     *     // ... the filter for the Applicants we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyapplicantsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Applicants.
     * @param {AggregateApplicantsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateApplicantsArgs>(args: Subset<T, AggregateApplicantsArgs>): Promise<GetApplicantsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for applicants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__applicantsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    projects<T extends projectsArgs = {}>(args?: Subset<T, projectsArgs>): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * applicants findUnique
   */
  export type FindUniqueapplicantsArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * Filter, which applicants to fetch.
    **/
    where: applicantsWhereUniqueInput
  }


  /**
   * applicants findFirst
   */
  export type FindFirstapplicantsArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * Filter, which applicants to fetch.
    **/
    where?: applicantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of applicants to fetch.
    **/
    orderBy?: Enumerable<applicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for applicants.
    **/
    cursor?: applicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applicants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applicants.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of applicants.
    **/
    distinct?: Enumerable<ApplicantsScalarFieldEnum>
  }


  /**
   * applicants findMany
   */
  export type FindManyapplicantsArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * Filter, which applicants to fetch.
    **/
    where?: applicantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of applicants to fetch.
    **/
    orderBy?: Enumerable<applicantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing applicants.
    **/
    cursor?: applicantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applicants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applicants.
    **/
    skip?: number
    distinct?: Enumerable<ApplicantsScalarFieldEnum>
  }


  /**
   * applicants create
   */
  export type applicantsCreateArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * The data needed to create a applicants.
    **/
    data: applicantsCreateInput
  }


  /**
   * applicants update
   */
  export type applicantsUpdateArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * The data needed to update a applicants.
    **/
    data: applicantsUpdateInput
    /**
     * Choose, which applicants to update.
    **/
    where: applicantsWhereUniqueInput
  }


  /**
   * applicants updateMany
   */
  export type applicantsUpdateManyArgs = {
    data: applicantsUpdateManyMutationInput
    where?: applicantsWhereInput
  }


  /**
   * applicants upsert
   */
  export type applicantsUpsertArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * The filter to search for the applicants to update in case it exists.
    **/
    where: applicantsWhereUniqueInput
    /**
     * In case the applicants found by the `where` argument doesn't exist, create a new applicants with this data.
    **/
    create: applicantsCreateInput
    /**
     * In case the applicants was found with the provided `where` argument, update it with this data.
    **/
    update: applicantsUpdateInput
  }


  /**
   * applicants delete
   */
  export type applicantsDeleteArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
    /**
     * Filter which applicants to delete.
    **/
    where: applicantsWhereUniqueInput
  }


  /**
   * applicants deleteMany
   */
  export type applicantsDeleteManyArgs = {
    where?: applicantsWhereInput
  }


  /**
   * applicants without action
   */
  export type applicantsArgs = {
    /**
     * Select specific fields to fetch from the applicants
    **/
    select?: applicantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: applicantsInclude | null
  }



  /**
   * Model business_types
   */


  export type AggregateBusiness_types = {
    count: number | null
    avg: Business_typesAvgAggregateOutputType | null
    sum: Business_typesSumAggregateOutputType | null
    min: Business_typesMinAggregateOutputType | null
    max: Business_typesMaxAggregateOutputType | null
  }

  export type Business_typesAvgAggregateOutputType = {
    id: number
  }

  export type Business_typesSumAggregateOutputType = {
    id: number
  }

  export type Business_typesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Business_typesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Business_typesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Business_typesAvgAggregateInputType = {
    id?: true
  }

  export type Business_typesSumAggregateInputType = {
    id?: true
  }

  export type Business_typesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Business_typesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Business_typesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateBusiness_typesArgs = {
    /**
     * Filter which business_types to aggregate.
    **/
    where?: business_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of business_types to fetch.
    **/
    orderBy?: Enumerable<business_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: business_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` business_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` business_types.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned business_types
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Business_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Business_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Business_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Business_typesMaxAggregateInputType
  }

  export type GetBusiness_typesAggregateType<T extends AggregateBusiness_typesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetBusiness_typesAggregateScalarType<T[P]>
  }

  export type GetBusiness_typesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Business_typesAvgAggregateOutputType ? Business_typesAvgAggregateOutputType[P] : never
  }

    



  export type business_typesSelect = {
    id?: boolean
    name?: boolean
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type business_typesInclude = {
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type business_typesGetPayload<
    S extends boolean | null | undefined | business_typesArgs,
    U = keyof S
      > = S extends true
        ? business_types
    : S extends undefined
    ? never
    : S extends business_typesArgs | FindManybusiness_typesArgs
    ?'include' extends U
    ? business_types  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof business_types ?business_types [P]
  : 
          P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['select'][P]>>  : never
  } 
    : business_types
  : business_types


  export interface business_typesDelegate {
    /**
     * Find zero or one Business_types that matches the filter.
     * @param {FindUniquebusiness_typesArgs} args - Arguments to find a Business_types
     * @example
     * // Get one Business_types
     * const business_types = await prisma.business_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquebusiness_typesArgs>(
      args: Subset<T, FindUniquebusiness_typesArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types | null>, Prisma__business_typesClient<business_typesGetPayload<T> | null>>

    /**
     * Find the first Business_types that matches the filter.
     * @param {FindFirstbusiness_typesArgs} args - Arguments to find a Business_types
     * @example
     * // Get one Business_types
     * const business_types = await prisma.business_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstbusiness_typesArgs>(
      args?: Subset<T, FindFirstbusiness_typesArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types | null>, Prisma__business_typesClient<business_typesGetPayload<T> | null>>

    /**
     * Find zero or more Business_types that matches the filter.
     * @param {FindManybusiness_typesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Business_types
     * const business_types = await prisma.business_types.findMany()
     * 
     * // Get first 10 Business_types
     * const business_types = await prisma.business_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const business_typesWithIdOnly = await prisma.business_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManybusiness_typesArgs>(
      args?: Subset<T, FindManybusiness_typesArgs>
    ): CheckSelect<T, Promise<Array<business_types>>, Promise<Array<business_typesGetPayload<T>>>>

    /**
     * Create a Business_types.
     * @param {business_typesCreateArgs} args - Arguments to create a Business_types.
     * @example
     * // Create one Business_types
     * const Business_types = await prisma.business_types.create({
     *   data: {
     *     // ... data to create a Business_types
     *   }
     * })
     * 
    **/
    create<T extends business_typesCreateArgs>(
      args: Subset<T, business_typesCreateArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types>, Prisma__business_typesClient<business_typesGetPayload<T>>>

    /**
     * Delete a Business_types.
     * @param {business_typesDeleteArgs} args - Arguments to delete one Business_types.
     * @example
     * // Delete one Business_types
     * const Business_types = await prisma.business_types.delete({
     *   where: {
     *     // ... filter to delete one Business_types
     *   }
     * })
     * 
    **/
    delete<T extends business_typesDeleteArgs>(
      args: Subset<T, business_typesDeleteArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types>, Prisma__business_typesClient<business_typesGetPayload<T>>>

    /**
     * Update one Business_types.
     * @param {business_typesUpdateArgs} args - Arguments to update one Business_types.
     * @example
     * // Update one Business_types
     * const business_types = await prisma.business_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends business_typesUpdateArgs>(
      args: Subset<T, business_typesUpdateArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types>, Prisma__business_typesClient<business_typesGetPayload<T>>>

    /**
     * Delete zero or more Business_types.
     * @param {business_typesDeleteManyArgs} args - Arguments to filter Business_types to delete.
     * @example
     * // Delete a few Business_types
     * const { count } = await prisma.business_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends business_typesDeleteManyArgs>(
      args?: Subset<T, business_typesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Business_types.
     * @param {business_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Business_types
     * const business_types = await prisma.business_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends business_typesUpdateManyArgs>(
      args: Subset<T, business_typesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Business_types.
     * @param {business_typesUpsertArgs} args - Arguments to update or create a Business_types.
     * @example
     * // Update or create a Business_types
     * const business_types = await prisma.business_types.upsert({
     *   create: {
     *     // ... data to create a Business_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Business_types we want to update
     *   }
     * })
    **/
    upsert<T extends business_typesUpsertArgs>(
      args: Subset<T, business_typesUpsertArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types>, Prisma__business_typesClient<business_typesGetPayload<T>>>

    /**
     * Find zero or one Business_types that matches the filter.
     * @param {FindUniquebusiness_typesArgs} args - Arguments to find a Business_types
     * @deprecated This will be deprecated please use prisma.business_types.findUnique
     * @example
     * // Get one Business_types
     * const business_types = await prisma.business_types.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquebusiness_typesArgs>(
      args: Subset<T, FindUniquebusiness_typesArgs>
    ): CheckSelect<T, Prisma__business_typesClient<business_types | null>, Prisma__business_typesClient<business_typesGetPayload<T> | null>>

    /**
     * Count the number of Business_types.
     * @param {FindManybusiness_typesArgs} args - Arguments to filter Business_types to count.
     * @example
     * // Count the number of Business_types
     * const count = await prisma.business_types.count({
     *   where: {
     *     // ... the filter for the Business_types we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManybusiness_typesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Business_types.
     * @param {AggregateBusiness_typesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateBusiness_typesArgs>(args: Subset<T, AggregateBusiness_typesArgs>): Promise<GetBusiness_typesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for business_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__business_typesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    startup_infos<T extends FindManystartup_infosArgs = {}>(args?: Subset<T, FindManystartup_infosArgs>): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * business_types findUnique
   */
  export type FindUniquebusiness_typesArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * Filter, which business_types to fetch.
    **/
    where: business_typesWhereUniqueInput
  }


  /**
   * business_types findFirst
   */
  export type FindFirstbusiness_typesArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * Filter, which business_types to fetch.
    **/
    where?: business_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of business_types to fetch.
    **/
    orderBy?: Enumerable<business_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for business_types.
    **/
    cursor?: business_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` business_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` business_types.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of business_types.
    **/
    distinct?: Enumerable<Business_typesScalarFieldEnum>
  }


  /**
   * business_types findMany
   */
  export type FindManybusiness_typesArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * Filter, which business_types to fetch.
    **/
    where?: business_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of business_types to fetch.
    **/
    orderBy?: Enumerable<business_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing business_types.
    **/
    cursor?: business_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` business_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` business_types.
    **/
    skip?: number
    distinct?: Enumerable<Business_typesScalarFieldEnum>
  }


  /**
   * business_types create
   */
  export type business_typesCreateArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * The data needed to create a business_types.
    **/
    data: business_typesCreateInput
  }


  /**
   * business_types update
   */
  export type business_typesUpdateArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * The data needed to update a business_types.
    **/
    data: business_typesUpdateInput
    /**
     * Choose, which business_types to update.
    **/
    where: business_typesWhereUniqueInput
  }


  /**
   * business_types updateMany
   */
  export type business_typesUpdateManyArgs = {
    data: business_typesUpdateManyMutationInput
    where?: business_typesWhereInput
  }


  /**
   * business_types upsert
   */
  export type business_typesUpsertArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * The filter to search for the business_types to update in case it exists.
    **/
    where: business_typesWhereUniqueInput
    /**
     * In case the business_types found by the `where` argument doesn't exist, create a new business_types with this data.
    **/
    create: business_typesCreateInput
    /**
     * In case the business_types was found with the provided `where` argument, update it with this data.
    **/
    update: business_typesUpdateInput
  }


  /**
   * business_types delete
   */
  export type business_typesDeleteArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
    /**
     * Filter which business_types to delete.
    **/
    where: business_typesWhereUniqueInput
  }


  /**
   * business_types deleteMany
   */
  export type business_typesDeleteManyArgs = {
    where?: business_typesWhereInput
  }


  /**
   * business_types without action
   */
  export type business_typesArgs = {
    /**
     * Select specific fields to fetch from the business_types
    **/
    select?: business_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: business_typesInclude | null
  }



  /**
   * Model companies
   */


  export type AggregateCompanies = {
    count: number | null
    avg: CompaniesAvgAggregateOutputType | null
    sum: CompaniesSumAggregateOutputType | null
    min: CompaniesMinAggregateOutputType | null
    max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesAvgAggregateOutputType = {
    id: number
    type_id: number | null
    member_count: number | null
  }

  export type CompaniesSumAggregateOutputType = {
    id: number
    type_id: number | null
    member_count: number | null
  }

  export type CompaniesMinAggregateOutputType = {
    id: number
    type_id: number | null
    name: string | null
    logo_img: string | null
    established_date: Date | null
    hompage: string | null
    description: string | null
    team_intro: string | null
    member_count: number | null
  }

  export type CompaniesMaxAggregateOutputType = {
    id: number
    type_id: number | null
    name: string | null
    logo_img: string | null
    established_date: Date | null
    hompage: string | null
    description: string | null
    team_intro: string | null
    member_count: number | null
  }

  export type CompaniesCountAggregateOutputType = {
    id: number
    type_id: number | null
    name: number | null
    logo_img: number | null
    established_date: number | null
    hompage: number | null
    description: number | null
    team_intro: number | null
    member_count: number | null
    _all: number
  }


  export type CompaniesAvgAggregateInputType = {
    id?: true
    type_id?: true
    member_count?: true
  }

  export type CompaniesSumAggregateInputType = {
    id?: true
    type_id?: true
    member_count?: true
  }

  export type CompaniesMinAggregateInputType = {
    id?: true
    type_id?: true
    name?: true
    logo_img?: true
    established_date?: true
    hompage?: true
    description?: true
    team_intro?: true
    member_count?: true
  }

  export type CompaniesMaxAggregateInputType = {
    id?: true
    type_id?: true
    name?: true
    logo_img?: true
    established_date?: true
    hompage?: true
    description?: true
    team_intro?: true
    member_count?: true
  }

  export type CompaniesCountAggregateInputType = {
    id?: true
    type_id?: true
    name?: true
    logo_img?: true
    established_date?: true
    hompage?: true
    description?: true
    team_intro?: true
    member_count?: true
    _all?: true
  }

  export type AggregateCompaniesArgs = {
    /**
     * Filter which companies to aggregate.
    **/
    where?: companiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CompaniesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CompaniesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends AggregateCompaniesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompaniesAggregateScalarType<T[P]>
  }

  export type GetCompaniesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CompaniesAvgAggregateOutputType ? CompaniesAvgAggregateOutputType[P] : never
  }

    



  export type companiesSelect = {
    id?: boolean
    type_id?: boolean
    name?: boolean
    logo_img?: boolean
    established_date?: boolean
    hompage?: boolean
    description?: boolean
    team_intro?: boolean
    member_count?: boolean
    user_types?: boolean | user_typesArgs
    applicants?: boolean | FindManyapplicantsArgs
    company_documents?: boolean | FindManycompany_documentsArgs
    company_members?: boolean | FindManycompany_membersArgs
    company_news?: boolean | FindManycompany_newsArgs
    demodays?: boolean | FindManydemodaysArgs
    invested_to?: boolean | FindManyinvested_toArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
    participants?: boolean | FindManyparticipantsArgs
    partner_infos?: boolean | FindManypartner_infosArgs
    partner_likes_companiesTopartner_likes_company_liked_id?: boolean | FindManypartner_likesArgs
    partner_likes_companiesTopartner_likes_company_likes_id?: boolean | FindManypartner_likesArgs
    project_likes?: boolean | FindManyproject_likesArgs
    projects?: boolean | FindManyprojectsArgs
    questions?: boolean | FindManyquestionsArgs
    recent_views_project?: boolean | FindManyrecent_views_projectArgs
    startup_infos?: boolean | FindManystartup_infosArgs
    startup_likes?: boolean | FindManystartup_likesArgs
    users?: boolean | FindManyusersArgs
  }

  export type companiesInclude = {
    user_types?: boolean | user_typesArgs
    applicants?: boolean | FindManyapplicantsArgs
    company_documents?: boolean | FindManycompany_documentsArgs
    company_members?: boolean | FindManycompany_membersArgs
    company_news?: boolean | FindManycompany_newsArgs
    demodays?: boolean | FindManydemodaysArgs
    invested_to?: boolean | FindManyinvested_toArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
    participants?: boolean | FindManyparticipantsArgs
    partner_infos?: boolean | FindManypartner_infosArgs
    partner_likes_companiesTopartner_likes_company_liked_id?: boolean | FindManypartner_likesArgs
    partner_likes_companiesTopartner_likes_company_likes_id?: boolean | FindManypartner_likesArgs
    project_likes?: boolean | FindManyproject_likesArgs
    projects?: boolean | FindManyprojectsArgs
    questions?: boolean | FindManyquestionsArgs
    recent_views_project?: boolean | FindManyrecent_views_projectArgs
    startup_infos?: boolean | FindManystartup_infosArgs
    startup_likes?: boolean | FindManystartup_likesArgs
    users?: boolean | FindManyusersArgs
  }

  export type companiesGetPayload<
    S extends boolean | null | undefined | companiesArgs,
    U = keyof S
      > = S extends true
        ? companies
    : S extends undefined
    ? never
    : S extends companiesArgs | FindManycompaniesArgs
    ?'include' extends U
    ? companies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user_types'
        ? user_typesGetPayload<S['include'][P]> | null :
        P extends 'applicants'
        ? Array < applicantsGetPayload<S['include'][P]>>  :
        P extends 'company_documents'
        ? Array < company_documentsGetPayload<S['include'][P]>>  :
        P extends 'company_members'
        ? Array < company_membersGetPayload<S['include'][P]>>  :
        P extends 'company_news'
        ? Array < company_newsGetPayload<S['include'][P]>>  :
        P extends 'demodays'
        ? Array < demodaysGetPayload<S['include'][P]>>  :
        P extends 'invested_to'
        ? Array < invested_toGetPayload<S['include'][P]>>  :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['include'][P]>>  :
        P extends 'participants'
        ? Array < participantsGetPayload<S['include'][P]>>  :
        P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['include'][P]>>  :
        P extends 'partner_likes_companiesTopartner_likes_company_liked_id'
        ? Array < partner_likesGetPayload<S['include'][P]>>  :
        P extends 'partner_likes_companiesTopartner_likes_company_likes_id'
        ? Array < partner_likesGetPayload<S['include'][P]>>  :
        P extends 'project_likes'
        ? Array < project_likesGetPayload<S['include'][P]>>  :
        P extends 'projects'
        ? Array < projectsGetPayload<S['include'][P]>>  :
        P extends 'questions'
        ? Array < questionsGetPayload<S['include'][P]>>  :
        P extends 'recent_views_project'
        ? Array < recent_views_projectGetPayload<S['include'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['include'][P]>>  :
        P extends 'startup_likes'
        ? Array < startup_likesGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof companies ?companies [P]
  : 
          P extends 'user_types'
        ? user_typesGetPayload<S['select'][P]> | null :
        P extends 'applicants'
        ? Array < applicantsGetPayload<S['select'][P]>>  :
        P extends 'company_documents'
        ? Array < company_documentsGetPayload<S['select'][P]>>  :
        P extends 'company_members'
        ? Array < company_membersGetPayload<S['select'][P]>>  :
        P extends 'company_news'
        ? Array < company_newsGetPayload<S['select'][P]>>  :
        P extends 'demodays'
        ? Array < demodaysGetPayload<S['select'][P]>>  :
        P extends 'invested_to'
        ? Array < invested_toGetPayload<S['select'][P]>>  :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['select'][P]>>  :
        P extends 'participants'
        ? Array < participantsGetPayload<S['select'][P]>>  :
        P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['select'][P]>>  :
        P extends 'partner_likes_companiesTopartner_likes_company_liked_id'
        ? Array < partner_likesGetPayload<S['select'][P]>>  :
        P extends 'partner_likes_companiesTopartner_likes_company_likes_id'
        ? Array < partner_likesGetPayload<S['select'][P]>>  :
        P extends 'project_likes'
        ? Array < project_likesGetPayload<S['select'][P]>>  :
        P extends 'projects'
        ? Array < projectsGetPayload<S['select'][P]>>  :
        P extends 'questions'
        ? Array < questionsGetPayload<S['select'][P]>>  :
        P extends 'recent_views_project'
        ? Array < recent_views_projectGetPayload<S['select'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['select'][P]>>  :
        P extends 'startup_likes'
        ? Array < startup_likesGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : companies
  : companies


  export interface companiesDelegate {
    /**
     * Find zero or one Companies that matches the filter.
     * @param {FindUniquecompaniesArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecompaniesArgs>(
      args: Subset<T, FindUniquecompaniesArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>

    /**
     * Find the first Companies that matches the filter.
     * @param {FindFirstcompaniesArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcompaniesArgs>(
      args?: Subset<T, FindFirstcompaniesArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>

    /**
     * Find zero or more Companies that matches the filter.
     * @param {FindManycompaniesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companiesWithIdOnly = await prisma.companies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycompaniesArgs>(
      args?: Subset<T, FindManycompaniesArgs>
    ): CheckSelect<T, Promise<Array<companies>>, Promise<Array<companiesGetPayload<T>>>>

    /**
     * Create a Companies.
     * @param {companiesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
    **/
    create<T extends companiesCreateArgs>(
      args: Subset<T, companiesCreateArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Delete a Companies.
     * @param {companiesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
    **/
    delete<T extends companiesDeleteArgs>(
      args: Subset<T, companiesDeleteArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Update one Companies.
     * @param {companiesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends companiesUpdateArgs>(
      args: Subset<T, companiesUpdateArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Delete zero or more Companies.
     * @param {companiesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends companiesDeleteManyArgs>(
      args?: Subset<T, companiesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Companies.
     * @param {companiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends companiesUpdateManyArgs>(
      args: Subset<T, companiesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {companiesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
    **/
    upsert<T extends companiesUpsertArgs>(
      args: Subset<T, companiesUpsertArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies>, Prisma__companiesClient<companiesGetPayload<T>>>

    /**
     * Find zero or one Companies that matches the filter.
     * @param {FindUniquecompaniesArgs} args - Arguments to find a Companies
     * @deprecated This will be deprecated please use prisma.companies.findUnique
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecompaniesArgs>(
      args: Subset<T, FindUniquecompaniesArgs>
    ): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>

    /**
     * Count the number of Companies.
     * @param {FindManycompaniesArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManycompaniesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Companies.
     * @param {AggregateCompaniesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompaniesArgs>(args: Subset<T, AggregateCompaniesArgs>): Promise<GetCompaniesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__companiesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_types<T extends user_typesArgs = {}>(args?: Subset<T, user_typesArgs>): CheckSelect<T, Prisma__user_typesClient<user_types | null>, Prisma__user_typesClient<user_typesGetPayload<T> | null>>;

    applicants<T extends FindManyapplicantsArgs = {}>(args?: Subset<T, FindManyapplicantsArgs>): CheckSelect<T, Promise<Array<applicants>>, Promise<Array<applicantsGetPayload<T>>>>;

    company_documents<T extends FindManycompany_documentsArgs = {}>(args?: Subset<T, FindManycompany_documentsArgs>): CheckSelect<T, Promise<Array<company_documents>>, Promise<Array<company_documentsGetPayload<T>>>>;

    company_members<T extends FindManycompany_membersArgs = {}>(args?: Subset<T, FindManycompany_membersArgs>): CheckSelect<T, Promise<Array<company_members>>, Promise<Array<company_membersGetPayload<T>>>>;

    company_news<T extends FindManycompany_newsArgs = {}>(args?: Subset<T, FindManycompany_newsArgs>): CheckSelect<T, Promise<Array<company_news>>, Promise<Array<company_newsGetPayload<T>>>>;

    demodays<T extends FindManydemodaysArgs = {}>(args?: Subset<T, FindManydemodaysArgs>): CheckSelect<T, Promise<Array<demodays>>, Promise<Array<demodaysGetPayload<T>>>>;

    invested_to<T extends FindManyinvested_toArgs = {}>(args?: Subset<T, FindManyinvested_toArgs>): CheckSelect<T, Promise<Array<invested_to>>, Promise<Array<invested_toGetPayload<T>>>>;

    IR_requests<T extends FindManyIR_requestsArgs = {}>(args?: Subset<T, FindManyIR_requestsArgs>): CheckSelect<T, Promise<Array<IR_requests>>, Promise<Array<IR_requestsGetPayload<T>>>>;

    participants<T extends FindManyparticipantsArgs = {}>(args?: Subset<T, FindManyparticipantsArgs>): CheckSelect<T, Promise<Array<participants>>, Promise<Array<participantsGetPayload<T>>>>;

    partner_infos<T extends FindManypartner_infosArgs = {}>(args?: Subset<T, FindManypartner_infosArgs>): CheckSelect<T, Promise<Array<partner_infos>>, Promise<Array<partner_infosGetPayload<T>>>>;

    partner_likes_companiesTopartner_likes_company_liked_id<T extends FindManypartner_likesArgs = {}>(args?: Subset<T, FindManypartner_likesArgs>): CheckSelect<T, Promise<Array<partner_likes>>, Promise<Array<partner_likesGetPayload<T>>>>;

    partner_likes_companiesTopartner_likes_company_likes_id<T extends FindManypartner_likesArgs = {}>(args?: Subset<T, FindManypartner_likesArgs>): CheckSelect<T, Promise<Array<partner_likes>>, Promise<Array<partner_likesGetPayload<T>>>>;

    project_likes<T extends FindManyproject_likesArgs = {}>(args?: Subset<T, FindManyproject_likesArgs>): CheckSelect<T, Promise<Array<project_likes>>, Promise<Array<project_likesGetPayload<T>>>>;

    projects<T extends FindManyprojectsArgs = {}>(args?: Subset<T, FindManyprojectsArgs>): CheckSelect<T, Promise<Array<projects>>, Promise<Array<projectsGetPayload<T>>>>;

    questions<T extends FindManyquestionsArgs = {}>(args?: Subset<T, FindManyquestionsArgs>): CheckSelect<T, Promise<Array<questions>>, Promise<Array<questionsGetPayload<T>>>>;

    recent_views_project<T extends FindManyrecent_views_projectArgs = {}>(args?: Subset<T, FindManyrecent_views_projectArgs>): CheckSelect<T, Promise<Array<recent_views_project>>, Promise<Array<recent_views_projectGetPayload<T>>>>;

    startup_infos<T extends FindManystartup_infosArgs = {}>(args?: Subset<T, FindManystartup_infosArgs>): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>;

    startup_likes<T extends FindManystartup_likesArgs = {}>(args?: Subset<T, FindManystartup_likesArgs>): CheckSelect<T, Promise<Array<startup_likes>>, Promise<Array<startup_likesGetPayload<T>>>>;

    users<T extends FindManyusersArgs = {}>(args?: Subset<T, FindManyusersArgs>): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * companies findUnique
   */
  export type FindUniquecompaniesArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter, which companies to fetch.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies findFirst
   */
  export type FindFirstcompaniesArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter, which companies to fetch.
    **/
    where?: companiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of companies.
    **/
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * companies findMany
   */
  export type FindManycompaniesArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter, which companies to fetch.
    **/
    where?: companiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of companies to fetch.
    **/
    orderBy?: Enumerable<companiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
    **/
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
    **/
    skip?: number
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * companies create
   */
  export type companiesCreateArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The data needed to create a companies.
    **/
    data: companiesCreateInput
  }


  /**
   * companies update
   */
  export type companiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The data needed to update a companies.
    **/
    data: companiesUpdateInput
    /**
     * Choose, which companies to update.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies updateMany
   */
  export type companiesUpdateManyArgs = {
    data: companiesUpdateManyMutationInput
    where?: companiesWhereInput
  }


  /**
   * companies upsert
   */
  export type companiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * The filter to search for the companies to update in case it exists.
    **/
    where: companiesWhereUniqueInput
    /**
     * In case the companies found by the `where` argument doesn't exist, create a new companies with this data.
    **/
    create: companiesCreateInput
    /**
     * In case the companies was found with the provided `where` argument, update it with this data.
    **/
    update: companiesUpdateInput
  }


  /**
   * companies delete
   */
  export type companiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
    /**
     * Filter which companies to delete.
    **/
    where: companiesWhereUniqueInput
  }


  /**
   * companies deleteMany
   */
  export type companiesDeleteManyArgs = {
    where?: companiesWhereInput
  }


  /**
   * companies without action
   */
  export type companiesArgs = {
    /**
     * Select specific fields to fetch from the companies
    **/
    select?: companiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: companiesInclude | null
  }



  /**
   * Model company_documents
   */


  export type AggregateCompany_documents = {
    count: number | null
    avg: Company_documentsAvgAggregateOutputType | null
    sum: Company_documentsSumAggregateOutputType | null
    min: Company_documentsMinAggregateOutputType | null
    max: Company_documentsMaxAggregateOutputType | null
  }

  export type Company_documentsAvgAggregateOutputType = {
    id: number
    company_id: number
    type_id: number
  }

  export type Company_documentsSumAggregateOutputType = {
    id: number
    company_id: number
    type_id: number
  }

  export type Company_documentsMinAggregateOutputType = {
    id: number
    company_id: number
    doc_url: string | null
    type_id: number
  }

  export type Company_documentsMaxAggregateOutputType = {
    id: number
    company_id: number
    doc_url: string | null
    type_id: number
  }

  export type Company_documentsCountAggregateOutputType = {
    id: number
    company_id: number
    doc_url: number | null
    type_id: number
    _all: number
  }


  export type Company_documentsAvgAggregateInputType = {
    id?: true
    company_id?: true
    type_id?: true
  }

  export type Company_documentsSumAggregateInputType = {
    id?: true
    company_id?: true
    type_id?: true
  }

  export type Company_documentsMinAggregateInputType = {
    id?: true
    company_id?: true
    doc_url?: true
    type_id?: true
  }

  export type Company_documentsMaxAggregateInputType = {
    id?: true
    company_id?: true
    doc_url?: true
    type_id?: true
  }

  export type Company_documentsCountAggregateInputType = {
    id?: true
    company_id?: true
    doc_url?: true
    type_id?: true
    _all?: true
  }

  export type AggregateCompany_documentsArgs = {
    /**
     * Filter which company_documents to aggregate.
    **/
    where?: company_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_documents to fetch.
    **/
    orderBy?: Enumerable<company_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: company_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_documents.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_documents
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Company_documentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Company_documentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Company_documentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Company_documentsMaxAggregateInputType
  }

  export type GetCompany_documentsAggregateType<T extends AggregateCompany_documentsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompany_documentsAggregateScalarType<T[P]>
  }

  export type GetCompany_documentsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Company_documentsAvgAggregateOutputType ? Company_documentsAvgAggregateOutputType[P] : never
  }

    



  export type company_documentsSelect = {
    id?: boolean
    company_id?: boolean
    doc_url?: boolean
    type_id?: boolean
    companies?: boolean | companiesArgs
    document_types?: boolean | document_typesArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
  }

  export type company_documentsInclude = {
    companies?: boolean | companiesArgs
    document_types?: boolean | document_typesArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
  }

  export type company_documentsGetPayload<
    S extends boolean | null | undefined | company_documentsArgs,
    U = keyof S
      > = S extends true
        ? company_documents
    : S extends undefined
    ? never
    : S extends company_documentsArgs | FindManycompany_documentsArgs
    ?'include' extends U
    ? company_documents  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'document_types'
        ? document_typesGetPayload<S['include'][P]> :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof company_documents ?company_documents [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'document_types'
        ? document_typesGetPayload<S['select'][P]> :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['select'][P]>>  : never
  } 
    : company_documents
  : company_documents


  export interface company_documentsDelegate {
    /**
     * Find zero or one Company_documents that matches the filter.
     * @param {FindUniquecompany_documentsArgs} args - Arguments to find a Company_documents
     * @example
     * // Get one Company_documents
     * const company_documents = await prisma.company_documents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecompany_documentsArgs>(
      args: Subset<T, FindUniquecompany_documentsArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents | null>, Prisma__company_documentsClient<company_documentsGetPayload<T> | null>>

    /**
     * Find the first Company_documents that matches the filter.
     * @param {FindFirstcompany_documentsArgs} args - Arguments to find a Company_documents
     * @example
     * // Get one Company_documents
     * const company_documents = await prisma.company_documents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcompany_documentsArgs>(
      args?: Subset<T, FindFirstcompany_documentsArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents | null>, Prisma__company_documentsClient<company_documentsGetPayload<T> | null>>

    /**
     * Find zero or more Company_documents that matches the filter.
     * @param {FindManycompany_documentsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_documents
     * const company_documents = await prisma.company_documents.findMany()
     * 
     * // Get first 10 Company_documents
     * const company_documents = await prisma.company_documents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const company_documentsWithIdOnly = await prisma.company_documents.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycompany_documentsArgs>(
      args?: Subset<T, FindManycompany_documentsArgs>
    ): CheckSelect<T, Promise<Array<company_documents>>, Promise<Array<company_documentsGetPayload<T>>>>

    /**
     * Create a Company_documents.
     * @param {company_documentsCreateArgs} args - Arguments to create a Company_documents.
     * @example
     * // Create one Company_documents
     * const Company_documents = await prisma.company_documents.create({
     *   data: {
     *     // ... data to create a Company_documents
     *   }
     * })
     * 
    **/
    create<T extends company_documentsCreateArgs>(
      args: Subset<T, company_documentsCreateArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents>, Prisma__company_documentsClient<company_documentsGetPayload<T>>>

    /**
     * Delete a Company_documents.
     * @param {company_documentsDeleteArgs} args - Arguments to delete one Company_documents.
     * @example
     * // Delete one Company_documents
     * const Company_documents = await prisma.company_documents.delete({
     *   where: {
     *     // ... filter to delete one Company_documents
     *   }
     * })
     * 
    **/
    delete<T extends company_documentsDeleteArgs>(
      args: Subset<T, company_documentsDeleteArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents>, Prisma__company_documentsClient<company_documentsGetPayload<T>>>

    /**
     * Update one Company_documents.
     * @param {company_documentsUpdateArgs} args - Arguments to update one Company_documents.
     * @example
     * // Update one Company_documents
     * const company_documents = await prisma.company_documents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends company_documentsUpdateArgs>(
      args: Subset<T, company_documentsUpdateArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents>, Prisma__company_documentsClient<company_documentsGetPayload<T>>>

    /**
     * Delete zero or more Company_documents.
     * @param {company_documentsDeleteManyArgs} args - Arguments to filter Company_documents to delete.
     * @example
     * // Delete a few Company_documents
     * const { count } = await prisma.company_documents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends company_documentsDeleteManyArgs>(
      args?: Subset<T, company_documentsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Company_documents.
     * @param {company_documentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_documents
     * const company_documents = await prisma.company_documents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends company_documentsUpdateManyArgs>(
      args: Subset<T, company_documentsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Company_documents.
     * @param {company_documentsUpsertArgs} args - Arguments to update or create a Company_documents.
     * @example
     * // Update or create a Company_documents
     * const company_documents = await prisma.company_documents.upsert({
     *   create: {
     *     // ... data to create a Company_documents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_documents we want to update
     *   }
     * })
    **/
    upsert<T extends company_documentsUpsertArgs>(
      args: Subset<T, company_documentsUpsertArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents>, Prisma__company_documentsClient<company_documentsGetPayload<T>>>

    /**
     * Find zero or one Company_documents that matches the filter.
     * @param {FindUniquecompany_documentsArgs} args - Arguments to find a Company_documents
     * @deprecated This will be deprecated please use prisma.company_documents.findUnique
     * @example
     * // Get one Company_documents
     * const company_documents = await prisma.company_documents.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecompany_documentsArgs>(
      args: Subset<T, FindUniquecompany_documentsArgs>
    ): CheckSelect<T, Prisma__company_documentsClient<company_documents | null>, Prisma__company_documentsClient<company_documentsGetPayload<T> | null>>

    /**
     * Count the number of Company_documents.
     * @param {FindManycompany_documentsArgs} args - Arguments to filter Company_documents to count.
     * @example
     * // Count the number of Company_documents
     * const count = await prisma.company_documents.count({
     *   where: {
     *     // ... the filter for the Company_documents we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManycompany_documentsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Company_documents.
     * @param {AggregateCompany_documentsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompany_documentsArgs>(args: Subset<T, AggregateCompany_documentsArgs>): Promise<GetCompany_documentsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for company_documents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__company_documentsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    document_types<T extends document_typesArgs = {}>(args?: Subset<T, document_typesArgs>): CheckSelect<T, Prisma__document_typesClient<document_types | null>, Prisma__document_typesClient<document_typesGetPayload<T> | null>>;

    IR_requests<T extends FindManyIR_requestsArgs = {}>(args?: Subset<T, FindManyIR_requestsArgs>): CheckSelect<T, Promise<Array<IR_requests>>, Promise<Array<IR_requestsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * company_documents findUnique
   */
  export type FindUniquecompany_documentsArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * Filter, which company_documents to fetch.
    **/
    where: company_documentsWhereUniqueInput
  }


  /**
   * company_documents findFirst
   */
  export type FindFirstcompany_documentsArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * Filter, which company_documents to fetch.
    **/
    where?: company_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_documents to fetch.
    **/
    orderBy?: Enumerable<company_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_documents.
    **/
    cursor?: company_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_documents.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of company_documents.
    **/
    distinct?: Enumerable<Company_documentsScalarFieldEnum>
  }


  /**
   * company_documents findMany
   */
  export type FindManycompany_documentsArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * Filter, which company_documents to fetch.
    **/
    where?: company_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_documents to fetch.
    **/
    orderBy?: Enumerable<company_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_documents.
    **/
    cursor?: company_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_documents.
    **/
    skip?: number
    distinct?: Enumerable<Company_documentsScalarFieldEnum>
  }


  /**
   * company_documents create
   */
  export type company_documentsCreateArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * The data needed to create a company_documents.
    **/
    data: company_documentsCreateInput
  }


  /**
   * company_documents update
   */
  export type company_documentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * The data needed to update a company_documents.
    **/
    data: company_documentsUpdateInput
    /**
     * Choose, which company_documents to update.
    **/
    where: company_documentsWhereUniqueInput
  }


  /**
   * company_documents updateMany
   */
  export type company_documentsUpdateManyArgs = {
    data: company_documentsUpdateManyMutationInput
    where?: company_documentsWhereInput
  }


  /**
   * company_documents upsert
   */
  export type company_documentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * The filter to search for the company_documents to update in case it exists.
    **/
    where: company_documentsWhereUniqueInput
    /**
     * In case the company_documents found by the `where` argument doesn't exist, create a new company_documents with this data.
    **/
    create: company_documentsCreateInput
    /**
     * In case the company_documents was found with the provided `where` argument, update it with this data.
    **/
    update: company_documentsUpdateInput
  }


  /**
   * company_documents delete
   */
  export type company_documentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
    /**
     * Filter which company_documents to delete.
    **/
    where: company_documentsWhereUniqueInput
  }


  /**
   * company_documents deleteMany
   */
  export type company_documentsDeleteManyArgs = {
    where?: company_documentsWhereInput
  }


  /**
   * company_documents without action
   */
  export type company_documentsArgs = {
    /**
     * Select specific fields to fetch from the company_documents
    **/
    select?: company_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_documentsInclude | null
  }



  /**
   * Model company_members
   */


  export type AggregateCompany_members = {
    count: number | null
    avg: Company_membersAvgAggregateOutputType | null
    sum: Company_membersSumAggregateOutputType | null
    min: Company_membersMinAggregateOutputType | null
    max: Company_membersMaxAggregateOutputType | null
  }

  export type Company_membersAvgAggregateOutputType = {
    id: number
    company_id: number | null
  }

  export type Company_membersSumAggregateOutputType = {
    id: number
    company_id: number | null
  }

  export type Company_membersMinAggregateOutputType = {
    id: number
    company_id: number | null
    name: string | null
    img: string | null
    position: string | null
  }

  export type Company_membersMaxAggregateOutputType = {
    id: number
    company_id: number | null
    name: string | null
    img: string | null
    position: string | null
  }

  export type Company_membersCountAggregateOutputType = {
    id: number
    company_id: number | null
    name: number | null
    img: number | null
    position: number | null
    _all: number
  }


  export type Company_membersAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Company_membersSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Company_membersMinAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    img?: true
    position?: true
  }

  export type Company_membersMaxAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    img?: true
    position?: true
  }

  export type Company_membersCountAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    img?: true
    position?: true
    _all?: true
  }

  export type AggregateCompany_membersArgs = {
    /**
     * Filter which company_members to aggregate.
    **/
    where?: company_membersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_members to fetch.
    **/
    orderBy?: Enumerable<company_membersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: company_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_members from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_members.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_members
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Company_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Company_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Company_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Company_membersMaxAggregateInputType
  }

  export type GetCompany_membersAggregateType<T extends AggregateCompany_membersArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompany_membersAggregateScalarType<T[P]>
  }

  export type GetCompany_membersAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Company_membersAvgAggregateOutputType ? Company_membersAvgAggregateOutputType[P] : never
  }

    



  export type company_membersSelect = {
    id?: boolean
    company_id?: boolean
    name?: boolean
    img?: boolean
    position?: boolean
    companies?: boolean | companiesArgs
  }

  export type company_membersInclude = {
    companies?: boolean | companiesArgs
  }

  export type company_membersGetPayload<
    S extends boolean | null | undefined | company_membersArgs,
    U = keyof S
      > = S extends true
        ? company_members
    : S extends undefined
    ? never
    : S extends company_membersArgs | FindManycompany_membersArgs
    ?'include' extends U
    ? company_members  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof company_members ?company_members [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> | null : never
  } 
    : company_members
  : company_members


  export interface company_membersDelegate {
    /**
     * Find zero or one Company_members that matches the filter.
     * @param {FindUniquecompany_membersArgs} args - Arguments to find a Company_members
     * @example
     * // Get one Company_members
     * const company_members = await prisma.company_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecompany_membersArgs>(
      args: Subset<T, FindUniquecompany_membersArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members | null>, Prisma__company_membersClient<company_membersGetPayload<T> | null>>

    /**
     * Find the first Company_members that matches the filter.
     * @param {FindFirstcompany_membersArgs} args - Arguments to find a Company_members
     * @example
     * // Get one Company_members
     * const company_members = await prisma.company_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcompany_membersArgs>(
      args?: Subset<T, FindFirstcompany_membersArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members | null>, Prisma__company_membersClient<company_membersGetPayload<T> | null>>

    /**
     * Find zero or more Company_members that matches the filter.
     * @param {FindManycompany_membersArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_members
     * const company_members = await prisma.company_members.findMany()
     * 
     * // Get first 10 Company_members
     * const company_members = await prisma.company_members.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const company_membersWithIdOnly = await prisma.company_members.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycompany_membersArgs>(
      args?: Subset<T, FindManycompany_membersArgs>
    ): CheckSelect<T, Promise<Array<company_members>>, Promise<Array<company_membersGetPayload<T>>>>

    /**
     * Create a Company_members.
     * @param {company_membersCreateArgs} args - Arguments to create a Company_members.
     * @example
     * // Create one Company_members
     * const Company_members = await prisma.company_members.create({
     *   data: {
     *     // ... data to create a Company_members
     *   }
     * })
     * 
    **/
    create<T extends company_membersCreateArgs>(
      args: Subset<T, company_membersCreateArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members>, Prisma__company_membersClient<company_membersGetPayload<T>>>

    /**
     * Delete a Company_members.
     * @param {company_membersDeleteArgs} args - Arguments to delete one Company_members.
     * @example
     * // Delete one Company_members
     * const Company_members = await prisma.company_members.delete({
     *   where: {
     *     // ... filter to delete one Company_members
     *   }
     * })
     * 
    **/
    delete<T extends company_membersDeleteArgs>(
      args: Subset<T, company_membersDeleteArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members>, Prisma__company_membersClient<company_membersGetPayload<T>>>

    /**
     * Update one Company_members.
     * @param {company_membersUpdateArgs} args - Arguments to update one Company_members.
     * @example
     * // Update one Company_members
     * const company_members = await prisma.company_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends company_membersUpdateArgs>(
      args: Subset<T, company_membersUpdateArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members>, Prisma__company_membersClient<company_membersGetPayload<T>>>

    /**
     * Delete zero or more Company_members.
     * @param {company_membersDeleteManyArgs} args - Arguments to filter Company_members to delete.
     * @example
     * // Delete a few Company_members
     * const { count } = await prisma.company_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends company_membersDeleteManyArgs>(
      args?: Subset<T, company_membersDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Company_members.
     * @param {company_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_members
     * const company_members = await prisma.company_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends company_membersUpdateManyArgs>(
      args: Subset<T, company_membersUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Company_members.
     * @param {company_membersUpsertArgs} args - Arguments to update or create a Company_members.
     * @example
     * // Update or create a Company_members
     * const company_members = await prisma.company_members.upsert({
     *   create: {
     *     // ... data to create a Company_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_members we want to update
     *   }
     * })
    **/
    upsert<T extends company_membersUpsertArgs>(
      args: Subset<T, company_membersUpsertArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members>, Prisma__company_membersClient<company_membersGetPayload<T>>>

    /**
     * Find zero or one Company_members that matches the filter.
     * @param {FindUniquecompany_membersArgs} args - Arguments to find a Company_members
     * @deprecated This will be deprecated please use prisma.company_members.findUnique
     * @example
     * // Get one Company_members
     * const company_members = await prisma.company_members.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecompany_membersArgs>(
      args: Subset<T, FindUniquecompany_membersArgs>
    ): CheckSelect<T, Prisma__company_membersClient<company_members | null>, Prisma__company_membersClient<company_membersGetPayload<T> | null>>

    /**
     * Count the number of Company_members.
     * @param {FindManycompany_membersArgs} args - Arguments to filter Company_members to count.
     * @example
     * // Count the number of Company_members
     * const count = await prisma.company_members.count({
     *   where: {
     *     // ... the filter for the Company_members we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManycompany_membersArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Company_members.
     * @param {AggregateCompany_membersArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompany_membersArgs>(args: Subset<T, AggregateCompany_membersArgs>): Promise<GetCompany_membersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for company_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__company_membersClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * company_members findUnique
   */
  export type FindUniquecompany_membersArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * Filter, which company_members to fetch.
    **/
    where: company_membersWhereUniqueInput
  }


  /**
   * company_members findFirst
   */
  export type FindFirstcompany_membersArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * Filter, which company_members to fetch.
    **/
    where?: company_membersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_members to fetch.
    **/
    orderBy?: Enumerable<company_membersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_members.
    **/
    cursor?: company_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_members from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_members.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of company_members.
    **/
    distinct?: Enumerable<Company_membersScalarFieldEnum>
  }


  /**
   * company_members findMany
   */
  export type FindManycompany_membersArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * Filter, which company_members to fetch.
    **/
    where?: company_membersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_members to fetch.
    **/
    orderBy?: Enumerable<company_membersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_members.
    **/
    cursor?: company_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_members from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_members.
    **/
    skip?: number
    distinct?: Enumerable<Company_membersScalarFieldEnum>
  }


  /**
   * company_members create
   */
  export type company_membersCreateArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * The data needed to create a company_members.
    **/
    data: company_membersCreateInput
  }


  /**
   * company_members update
   */
  export type company_membersUpdateArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * The data needed to update a company_members.
    **/
    data: company_membersUpdateInput
    /**
     * Choose, which company_members to update.
    **/
    where: company_membersWhereUniqueInput
  }


  /**
   * company_members updateMany
   */
  export type company_membersUpdateManyArgs = {
    data: company_membersUpdateManyMutationInput
    where?: company_membersWhereInput
  }


  /**
   * company_members upsert
   */
  export type company_membersUpsertArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * The filter to search for the company_members to update in case it exists.
    **/
    where: company_membersWhereUniqueInput
    /**
     * In case the company_members found by the `where` argument doesn't exist, create a new company_members with this data.
    **/
    create: company_membersCreateInput
    /**
     * In case the company_members was found with the provided `where` argument, update it with this data.
    **/
    update: company_membersUpdateInput
  }


  /**
   * company_members delete
   */
  export type company_membersDeleteArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
    /**
     * Filter which company_members to delete.
    **/
    where: company_membersWhereUniqueInput
  }


  /**
   * company_members deleteMany
   */
  export type company_membersDeleteManyArgs = {
    where?: company_membersWhereInput
  }


  /**
   * company_members without action
   */
  export type company_membersArgs = {
    /**
     * Select specific fields to fetch from the company_members
    **/
    select?: company_membersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_membersInclude | null
  }



  /**
   * Model company_news
   */


  export type AggregateCompany_news = {
    count: number | null
    avg: Company_newsAvgAggregateOutputType | null
    sum: Company_newsSumAggregateOutputType | null
    min: Company_newsMinAggregateOutputType | null
    max: Company_newsMaxAggregateOutputType | null
  }

  export type Company_newsAvgAggregateOutputType = {
    id: number
    company_id: number
  }

  export type Company_newsSumAggregateOutputType = {
    id: number
    company_id: number
  }

  export type Company_newsMinAggregateOutputType = {
    id: number
    company_id: number
    URL: string | null
  }

  export type Company_newsMaxAggregateOutputType = {
    id: number
    company_id: number
    URL: string | null
  }

  export type Company_newsCountAggregateOutputType = {
    id: number
    company_id: number
    URL: number | null
    _all: number
  }


  export type Company_newsAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Company_newsSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Company_newsMinAggregateInputType = {
    id?: true
    company_id?: true
    URL?: true
  }

  export type Company_newsMaxAggregateInputType = {
    id?: true
    company_id?: true
    URL?: true
  }

  export type Company_newsCountAggregateInputType = {
    id?: true
    company_id?: true
    URL?: true
    _all?: true
  }

  export type AggregateCompany_newsArgs = {
    /**
     * Filter which company_news to aggregate.
    **/
    where?: company_newsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_news to fetch.
    **/
    orderBy?: Enumerable<company_newsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: company_newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_news from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_news.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_news
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Company_newsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Company_newsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Company_newsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Company_newsMaxAggregateInputType
  }

  export type GetCompany_newsAggregateType<T extends AggregateCompany_newsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompany_newsAggregateScalarType<T[P]>
  }

  export type GetCompany_newsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Company_newsAvgAggregateOutputType ? Company_newsAvgAggregateOutputType[P] : never
  }

    



  export type company_newsSelect = {
    id?: boolean
    company_id?: boolean
    URL?: boolean
    companies?: boolean | companiesArgs
  }

  export type company_newsInclude = {
    companies?: boolean | companiesArgs
  }

  export type company_newsGetPayload<
    S extends boolean | null | undefined | company_newsArgs,
    U = keyof S
      > = S extends true
        ? company_news
    : S extends undefined
    ? never
    : S extends company_newsArgs | FindManycompany_newsArgs
    ?'include' extends U
    ? company_news  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof company_news ?company_news [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> : never
  } 
    : company_news
  : company_news


  export interface company_newsDelegate {
    /**
     * Find zero or one Company_news that matches the filter.
     * @param {FindUniquecompany_newsArgs} args - Arguments to find a Company_news
     * @example
     * // Get one Company_news
     * const company_news = await prisma.company_news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecompany_newsArgs>(
      args: Subset<T, FindUniquecompany_newsArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news | null>, Prisma__company_newsClient<company_newsGetPayload<T> | null>>

    /**
     * Find the first Company_news that matches the filter.
     * @param {FindFirstcompany_newsArgs} args - Arguments to find a Company_news
     * @example
     * // Get one Company_news
     * const company_news = await prisma.company_news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcompany_newsArgs>(
      args?: Subset<T, FindFirstcompany_newsArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news | null>, Prisma__company_newsClient<company_newsGetPayload<T> | null>>

    /**
     * Find zero or more Company_news that matches the filter.
     * @param {FindManycompany_newsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_news
     * const company_news = await prisma.company_news.findMany()
     * 
     * // Get first 10 Company_news
     * const company_news = await prisma.company_news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const company_newsWithIdOnly = await prisma.company_news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycompany_newsArgs>(
      args?: Subset<T, FindManycompany_newsArgs>
    ): CheckSelect<T, Promise<Array<company_news>>, Promise<Array<company_newsGetPayload<T>>>>

    /**
     * Create a Company_news.
     * @param {company_newsCreateArgs} args - Arguments to create a Company_news.
     * @example
     * // Create one Company_news
     * const Company_news = await prisma.company_news.create({
     *   data: {
     *     // ... data to create a Company_news
     *   }
     * })
     * 
    **/
    create<T extends company_newsCreateArgs>(
      args: Subset<T, company_newsCreateArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news>, Prisma__company_newsClient<company_newsGetPayload<T>>>

    /**
     * Delete a Company_news.
     * @param {company_newsDeleteArgs} args - Arguments to delete one Company_news.
     * @example
     * // Delete one Company_news
     * const Company_news = await prisma.company_news.delete({
     *   where: {
     *     // ... filter to delete one Company_news
     *   }
     * })
     * 
    **/
    delete<T extends company_newsDeleteArgs>(
      args: Subset<T, company_newsDeleteArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news>, Prisma__company_newsClient<company_newsGetPayload<T>>>

    /**
     * Update one Company_news.
     * @param {company_newsUpdateArgs} args - Arguments to update one Company_news.
     * @example
     * // Update one Company_news
     * const company_news = await prisma.company_news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends company_newsUpdateArgs>(
      args: Subset<T, company_newsUpdateArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news>, Prisma__company_newsClient<company_newsGetPayload<T>>>

    /**
     * Delete zero or more Company_news.
     * @param {company_newsDeleteManyArgs} args - Arguments to filter Company_news to delete.
     * @example
     * // Delete a few Company_news
     * const { count } = await prisma.company_news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends company_newsDeleteManyArgs>(
      args?: Subset<T, company_newsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Company_news.
     * @param {company_newsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_news
     * const company_news = await prisma.company_news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends company_newsUpdateManyArgs>(
      args: Subset<T, company_newsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Company_news.
     * @param {company_newsUpsertArgs} args - Arguments to update or create a Company_news.
     * @example
     * // Update or create a Company_news
     * const company_news = await prisma.company_news.upsert({
     *   create: {
     *     // ... data to create a Company_news
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_news we want to update
     *   }
     * })
    **/
    upsert<T extends company_newsUpsertArgs>(
      args: Subset<T, company_newsUpsertArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news>, Prisma__company_newsClient<company_newsGetPayload<T>>>

    /**
     * Find zero or one Company_news that matches the filter.
     * @param {FindUniquecompany_newsArgs} args - Arguments to find a Company_news
     * @deprecated This will be deprecated please use prisma.company_news.findUnique
     * @example
     * // Get one Company_news
     * const company_news = await prisma.company_news.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecompany_newsArgs>(
      args: Subset<T, FindUniquecompany_newsArgs>
    ): CheckSelect<T, Prisma__company_newsClient<company_news | null>, Prisma__company_newsClient<company_newsGetPayload<T> | null>>

    /**
     * Count the number of Company_news.
     * @param {FindManycompany_newsArgs} args - Arguments to filter Company_news to count.
     * @example
     * // Count the number of Company_news
     * const count = await prisma.company_news.count({
     *   where: {
     *     // ... the filter for the Company_news we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManycompany_newsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Company_news.
     * @param {AggregateCompany_newsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompany_newsArgs>(args: Subset<T, AggregateCompany_newsArgs>): Promise<GetCompany_newsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for company_news.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__company_newsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * company_news findUnique
   */
  export type FindUniquecompany_newsArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * Filter, which company_news to fetch.
    **/
    where: company_newsWhereUniqueInput
  }


  /**
   * company_news findFirst
   */
  export type FindFirstcompany_newsArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * Filter, which company_news to fetch.
    **/
    where?: company_newsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_news to fetch.
    **/
    orderBy?: Enumerable<company_newsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_news.
    **/
    cursor?: company_newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_news from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_news.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of company_news.
    **/
    distinct?: Enumerable<Company_newsScalarFieldEnum>
  }


  /**
   * company_news findMany
   */
  export type FindManycompany_newsArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * Filter, which company_news to fetch.
    **/
    where?: company_newsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_news to fetch.
    **/
    orderBy?: Enumerable<company_newsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_news.
    **/
    cursor?: company_newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_news from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_news.
    **/
    skip?: number
    distinct?: Enumerable<Company_newsScalarFieldEnum>
  }


  /**
   * company_news create
   */
  export type company_newsCreateArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * The data needed to create a company_news.
    **/
    data: company_newsCreateInput
  }


  /**
   * company_news update
   */
  export type company_newsUpdateArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * The data needed to update a company_news.
    **/
    data: company_newsUpdateInput
    /**
     * Choose, which company_news to update.
    **/
    where: company_newsWhereUniqueInput
  }


  /**
   * company_news updateMany
   */
  export type company_newsUpdateManyArgs = {
    data: company_newsUpdateManyMutationInput
    where?: company_newsWhereInput
  }


  /**
   * company_news upsert
   */
  export type company_newsUpsertArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * The filter to search for the company_news to update in case it exists.
    **/
    where: company_newsWhereUniqueInput
    /**
     * In case the company_news found by the `where` argument doesn't exist, create a new company_news with this data.
    **/
    create: company_newsCreateInput
    /**
     * In case the company_news was found with the provided `where` argument, update it with this data.
    **/
    update: company_newsUpdateInput
  }


  /**
   * company_news delete
   */
  export type company_newsDeleteArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
    /**
     * Filter which company_news to delete.
    **/
    where: company_newsWhereUniqueInput
  }


  /**
   * company_news deleteMany
   */
  export type company_newsDeleteManyArgs = {
    where?: company_newsWhereInput
  }


  /**
   * company_news without action
   */
  export type company_newsArgs = {
    /**
     * Select specific fields to fetch from the company_news
    **/
    select?: company_newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: company_newsInclude | null
  }



  /**
   * Model company_types
   */


  export type AggregateCompany_types = {
    count: number | null
    avg: Company_typesAvgAggregateOutputType | null
    sum: Company_typesSumAggregateOutputType | null
    min: Company_typesMinAggregateOutputType | null
    max: Company_typesMaxAggregateOutputType | null
  }

  export type Company_typesAvgAggregateOutputType = {
    id: number
  }

  export type Company_typesSumAggregateOutputType = {
    id: number
  }

  export type Company_typesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Company_typesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Company_typesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Company_typesAvgAggregateInputType = {
    id?: true
  }

  export type Company_typesSumAggregateInputType = {
    id?: true
  }

  export type Company_typesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Company_typesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Company_typesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateCompany_typesArgs = {
    /**
     * Filter which company_types to aggregate.
    **/
    where?: company_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_types to fetch.
    **/
    orderBy?: Enumerable<company_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: company_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_types.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_types
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Company_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Company_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Company_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Company_typesMaxAggregateInputType
  }

  export type GetCompany_typesAggregateType<T extends AggregateCompany_typesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompany_typesAggregateScalarType<T[P]>
  }

  export type GetCompany_typesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Company_typesAvgAggregateOutputType ? Company_typesAvgAggregateOutputType[P] : never
  }

    



  export type company_typesSelect = {
    id?: boolean
    name?: boolean
  }

  export type company_typesGetPayload<
    S extends boolean | null | undefined | company_typesArgs,
    U = keyof S
      > = S extends true
        ? company_types
    : S extends undefined
    ? never
    : S extends company_typesArgs | FindManycompany_typesArgs
    ?'include' extends U
    ? company_types 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof company_types ?company_types [P]
  : 
     never
  } 
    : company_types
  : company_types


  export interface company_typesDelegate {
    /**
     * Find zero or one Company_types that matches the filter.
     * @param {FindUniquecompany_typesArgs} args - Arguments to find a Company_types
     * @example
     * // Get one Company_types
     * const company_types = await prisma.company_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecompany_typesArgs>(
      args: Subset<T, FindUniquecompany_typesArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types | null>, Prisma__company_typesClient<company_typesGetPayload<T> | null>>

    /**
     * Find the first Company_types that matches the filter.
     * @param {FindFirstcompany_typesArgs} args - Arguments to find a Company_types
     * @example
     * // Get one Company_types
     * const company_types = await prisma.company_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcompany_typesArgs>(
      args?: Subset<T, FindFirstcompany_typesArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types | null>, Prisma__company_typesClient<company_typesGetPayload<T> | null>>

    /**
     * Find zero or more Company_types that matches the filter.
     * @param {FindManycompany_typesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_types
     * const company_types = await prisma.company_types.findMany()
     * 
     * // Get first 10 Company_types
     * const company_types = await prisma.company_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const company_typesWithIdOnly = await prisma.company_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycompany_typesArgs>(
      args?: Subset<T, FindManycompany_typesArgs>
    ): CheckSelect<T, Promise<Array<company_types>>, Promise<Array<company_typesGetPayload<T>>>>

    /**
     * Create a Company_types.
     * @param {company_typesCreateArgs} args - Arguments to create a Company_types.
     * @example
     * // Create one Company_types
     * const Company_types = await prisma.company_types.create({
     *   data: {
     *     // ... data to create a Company_types
     *   }
     * })
     * 
    **/
    create<T extends company_typesCreateArgs>(
      args: Subset<T, company_typesCreateArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types>, Prisma__company_typesClient<company_typesGetPayload<T>>>

    /**
     * Delete a Company_types.
     * @param {company_typesDeleteArgs} args - Arguments to delete one Company_types.
     * @example
     * // Delete one Company_types
     * const Company_types = await prisma.company_types.delete({
     *   where: {
     *     // ... filter to delete one Company_types
     *   }
     * })
     * 
    **/
    delete<T extends company_typesDeleteArgs>(
      args: Subset<T, company_typesDeleteArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types>, Prisma__company_typesClient<company_typesGetPayload<T>>>

    /**
     * Update one Company_types.
     * @param {company_typesUpdateArgs} args - Arguments to update one Company_types.
     * @example
     * // Update one Company_types
     * const company_types = await prisma.company_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends company_typesUpdateArgs>(
      args: Subset<T, company_typesUpdateArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types>, Prisma__company_typesClient<company_typesGetPayload<T>>>

    /**
     * Delete zero or more Company_types.
     * @param {company_typesDeleteManyArgs} args - Arguments to filter Company_types to delete.
     * @example
     * // Delete a few Company_types
     * const { count } = await prisma.company_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends company_typesDeleteManyArgs>(
      args?: Subset<T, company_typesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Company_types.
     * @param {company_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_types
     * const company_types = await prisma.company_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends company_typesUpdateManyArgs>(
      args: Subset<T, company_typesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Company_types.
     * @param {company_typesUpsertArgs} args - Arguments to update or create a Company_types.
     * @example
     * // Update or create a Company_types
     * const company_types = await prisma.company_types.upsert({
     *   create: {
     *     // ... data to create a Company_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_types we want to update
     *   }
     * })
    **/
    upsert<T extends company_typesUpsertArgs>(
      args: Subset<T, company_typesUpsertArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types>, Prisma__company_typesClient<company_typesGetPayload<T>>>

    /**
     * Find zero or one Company_types that matches the filter.
     * @param {FindUniquecompany_typesArgs} args - Arguments to find a Company_types
     * @deprecated This will be deprecated please use prisma.company_types.findUnique
     * @example
     * // Get one Company_types
     * const company_types = await prisma.company_types.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecompany_typesArgs>(
      args: Subset<T, FindUniquecompany_typesArgs>
    ): CheckSelect<T, Prisma__company_typesClient<company_types | null>, Prisma__company_typesClient<company_typesGetPayload<T> | null>>

    /**
     * Count the number of Company_types.
     * @param {FindManycompany_typesArgs} args - Arguments to filter Company_types to count.
     * @example
     * // Count the number of Company_types
     * const count = await prisma.company_types.count({
     *   where: {
     *     // ... the filter for the Company_types we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManycompany_typesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Company_types.
     * @param {AggregateCompany_typesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompany_typesArgs>(args: Subset<T, AggregateCompany_typesArgs>): Promise<GetCompany_typesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for company_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__company_typesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * company_types findUnique
   */
  export type FindUniquecompany_typesArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * Filter, which company_types to fetch.
    **/
    where: company_typesWhereUniqueInput
  }


  /**
   * company_types findFirst
   */
  export type FindFirstcompany_typesArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * Filter, which company_types to fetch.
    **/
    where?: company_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_types to fetch.
    **/
    orderBy?: Enumerable<company_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_types.
    **/
    cursor?: company_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_types.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of company_types.
    **/
    distinct?: Enumerable<Company_typesScalarFieldEnum>
  }


  /**
   * company_types findMany
   */
  export type FindManycompany_typesArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * Filter, which company_types to fetch.
    **/
    where?: company_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of company_types to fetch.
    **/
    orderBy?: Enumerable<company_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_types.
    **/
    cursor?: company_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_types.
    **/
    skip?: number
    distinct?: Enumerable<Company_typesScalarFieldEnum>
  }


  /**
   * company_types create
   */
  export type company_typesCreateArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * The data needed to create a company_types.
    **/
    data: company_typesCreateInput
  }


  /**
   * company_types update
   */
  export type company_typesUpdateArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * The data needed to update a company_types.
    **/
    data: company_typesUpdateInput
    /**
     * Choose, which company_types to update.
    **/
    where: company_typesWhereUniqueInput
  }


  /**
   * company_types updateMany
   */
  export type company_typesUpdateManyArgs = {
    data: company_typesUpdateManyMutationInput
    where?: company_typesWhereInput
  }


  /**
   * company_types upsert
   */
  export type company_typesUpsertArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * The filter to search for the company_types to update in case it exists.
    **/
    where: company_typesWhereUniqueInput
    /**
     * In case the company_types found by the `where` argument doesn't exist, create a new company_types with this data.
    **/
    create: company_typesCreateInput
    /**
     * In case the company_types was found with the provided `where` argument, update it with this data.
    **/
    update: company_typesUpdateInput
  }


  /**
   * company_types delete
   */
  export type company_typesDeleteArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
    /**
     * Filter which company_types to delete.
    **/
    where: company_typesWhereUniqueInput
  }


  /**
   * company_types deleteMany
   */
  export type company_typesDeleteManyArgs = {
    where?: company_typesWhereInput
  }


  /**
   * company_types without action
   */
  export type company_typesArgs = {
    /**
     * Select specific fields to fetch from the company_types
    **/
    select?: company_typesSelect | null
  }



  /**
   * Model demodays
   */


  export type AggregateDemodays = {
    count: number | null
    avg: DemodaysAvgAggregateOutputType | null
    sum: DemodaysSumAggregateOutputType | null
    min: DemodaysMinAggregateOutputType | null
    max: DemodaysMaxAggregateOutputType | null
  }

  export type DemodaysAvgAggregateOutputType = {
    id: number
    company_id: number | null
  }

  export type DemodaysSumAggregateOutputType = {
    id: number
    company_id: number | null
  }

  export type DemodaysMinAggregateOutputType = {
    id: number
    name: string | null
    company_id: number | null
    streaming_url: string | null
  }

  export type DemodaysMaxAggregateOutputType = {
    id: number
    name: string | null
    company_id: number | null
    streaming_url: string | null
  }

  export type DemodaysCountAggregateOutputType = {
    id: number
    name: number | null
    company_id: number | null
    streaming_url: number | null
    _all: number
  }


  export type DemodaysAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type DemodaysSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type DemodaysMinAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    streaming_url?: true
  }

  export type DemodaysMaxAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    streaming_url?: true
  }

  export type DemodaysCountAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    streaming_url?: true
    _all?: true
  }

  export type AggregateDemodaysArgs = {
    /**
     * Filter which demodays to aggregate.
    **/
    where?: demodaysWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of demodays to fetch.
    **/
    orderBy?: Enumerable<demodaysOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: demodaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` demodays from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` demodays.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned demodays
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DemodaysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DemodaysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DemodaysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DemodaysMaxAggregateInputType
  }

  export type GetDemodaysAggregateType<T extends AggregateDemodaysArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetDemodaysAggregateScalarType<T[P]>
  }

  export type GetDemodaysAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof DemodaysAvgAggregateOutputType ? DemodaysAvgAggregateOutputType[P] : never
  }

    



  export type demodaysSelect = {
    id?: boolean
    name?: boolean
    company_id?: boolean
    streaming_url?: boolean
    companies?: boolean | companiesArgs
    participants?: boolean | FindManyparticipantsArgs
    questions?: boolean | FindManyquestionsArgs
  }

  export type demodaysInclude = {
    companies?: boolean | companiesArgs
    participants?: boolean | FindManyparticipantsArgs
    questions?: boolean | FindManyquestionsArgs
  }

  export type demodaysGetPayload<
    S extends boolean | null | undefined | demodaysArgs,
    U = keyof S
      > = S extends true
        ? demodays
    : S extends undefined
    ? never
    : S extends demodaysArgs | FindManydemodaysArgs
    ?'include' extends U
    ? demodays  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> | null :
        P extends 'participants'
        ? Array < participantsGetPayload<S['include'][P]>>  :
        P extends 'questions'
        ? Array < questionsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof demodays ?demodays [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> | null :
        P extends 'participants'
        ? Array < participantsGetPayload<S['select'][P]>>  :
        P extends 'questions'
        ? Array < questionsGetPayload<S['select'][P]>>  : never
  } 
    : demodays
  : demodays


  export interface demodaysDelegate {
    /**
     * Find zero or one Demodays that matches the filter.
     * @param {FindUniquedemodaysArgs} args - Arguments to find a Demodays
     * @example
     * // Get one Demodays
     * const demodays = await prisma.demodays.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquedemodaysArgs>(
      args: Subset<T, FindUniquedemodaysArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays | null>, Prisma__demodaysClient<demodaysGetPayload<T> | null>>

    /**
     * Find the first Demodays that matches the filter.
     * @param {FindFirstdemodaysArgs} args - Arguments to find a Demodays
     * @example
     * // Get one Demodays
     * const demodays = await prisma.demodays.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstdemodaysArgs>(
      args?: Subset<T, FindFirstdemodaysArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays | null>, Prisma__demodaysClient<demodaysGetPayload<T> | null>>

    /**
     * Find zero or more Demodays that matches the filter.
     * @param {FindManydemodaysArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Demodays
     * const demodays = await prisma.demodays.findMany()
     * 
     * // Get first 10 Demodays
     * const demodays = await prisma.demodays.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demodaysWithIdOnly = await prisma.demodays.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManydemodaysArgs>(
      args?: Subset<T, FindManydemodaysArgs>
    ): CheckSelect<T, Promise<Array<demodays>>, Promise<Array<demodaysGetPayload<T>>>>

    /**
     * Create a Demodays.
     * @param {demodaysCreateArgs} args - Arguments to create a Demodays.
     * @example
     * // Create one Demodays
     * const Demodays = await prisma.demodays.create({
     *   data: {
     *     // ... data to create a Demodays
     *   }
     * })
     * 
    **/
    create<T extends demodaysCreateArgs>(
      args: Subset<T, demodaysCreateArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays>, Prisma__demodaysClient<demodaysGetPayload<T>>>

    /**
     * Delete a Demodays.
     * @param {demodaysDeleteArgs} args - Arguments to delete one Demodays.
     * @example
     * // Delete one Demodays
     * const Demodays = await prisma.demodays.delete({
     *   where: {
     *     // ... filter to delete one Demodays
     *   }
     * })
     * 
    **/
    delete<T extends demodaysDeleteArgs>(
      args: Subset<T, demodaysDeleteArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays>, Prisma__demodaysClient<demodaysGetPayload<T>>>

    /**
     * Update one Demodays.
     * @param {demodaysUpdateArgs} args - Arguments to update one Demodays.
     * @example
     * // Update one Demodays
     * const demodays = await prisma.demodays.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends demodaysUpdateArgs>(
      args: Subset<T, demodaysUpdateArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays>, Prisma__demodaysClient<demodaysGetPayload<T>>>

    /**
     * Delete zero or more Demodays.
     * @param {demodaysDeleteManyArgs} args - Arguments to filter Demodays to delete.
     * @example
     * // Delete a few Demodays
     * const { count } = await prisma.demodays.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends demodaysDeleteManyArgs>(
      args?: Subset<T, demodaysDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Demodays.
     * @param {demodaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Demodays
     * const demodays = await prisma.demodays.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends demodaysUpdateManyArgs>(
      args: Subset<T, demodaysUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Demodays.
     * @param {demodaysUpsertArgs} args - Arguments to update or create a Demodays.
     * @example
     * // Update or create a Demodays
     * const demodays = await prisma.demodays.upsert({
     *   create: {
     *     // ... data to create a Demodays
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Demodays we want to update
     *   }
     * })
    **/
    upsert<T extends demodaysUpsertArgs>(
      args: Subset<T, demodaysUpsertArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays>, Prisma__demodaysClient<demodaysGetPayload<T>>>

    /**
     * Find zero or one Demodays that matches the filter.
     * @param {FindUniquedemodaysArgs} args - Arguments to find a Demodays
     * @deprecated This will be deprecated please use prisma.demodays.findUnique
     * @example
     * // Get one Demodays
     * const demodays = await prisma.demodays.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquedemodaysArgs>(
      args: Subset<T, FindUniquedemodaysArgs>
    ): CheckSelect<T, Prisma__demodaysClient<demodays | null>, Prisma__demodaysClient<demodaysGetPayload<T> | null>>

    /**
     * Count the number of Demodays.
     * @param {FindManydemodaysArgs} args - Arguments to filter Demodays to count.
     * @example
     * // Count the number of Demodays
     * const count = await prisma.demodays.count({
     *   where: {
     *     // ... the filter for the Demodays we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManydemodaysArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Demodays.
     * @param {AggregateDemodaysArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateDemodaysArgs>(args: Subset<T, AggregateDemodaysArgs>): Promise<GetDemodaysAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for demodays.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__demodaysClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    participants<T extends FindManyparticipantsArgs = {}>(args?: Subset<T, FindManyparticipantsArgs>): CheckSelect<T, Promise<Array<participants>>, Promise<Array<participantsGetPayload<T>>>>;

    questions<T extends FindManyquestionsArgs = {}>(args?: Subset<T, FindManyquestionsArgs>): CheckSelect<T, Promise<Array<questions>>, Promise<Array<questionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * demodays findUnique
   */
  export type FindUniquedemodaysArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * Filter, which demodays to fetch.
    **/
    where: demodaysWhereUniqueInput
  }


  /**
   * demodays findFirst
   */
  export type FindFirstdemodaysArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * Filter, which demodays to fetch.
    **/
    where?: demodaysWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of demodays to fetch.
    **/
    orderBy?: Enumerable<demodaysOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for demodays.
    **/
    cursor?: demodaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` demodays from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` demodays.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of demodays.
    **/
    distinct?: Enumerable<DemodaysScalarFieldEnum>
  }


  /**
   * demodays findMany
   */
  export type FindManydemodaysArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * Filter, which demodays to fetch.
    **/
    where?: demodaysWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of demodays to fetch.
    **/
    orderBy?: Enumerable<demodaysOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing demodays.
    **/
    cursor?: demodaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` demodays from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` demodays.
    **/
    skip?: number
    distinct?: Enumerable<DemodaysScalarFieldEnum>
  }


  /**
   * demodays create
   */
  export type demodaysCreateArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * The data needed to create a demodays.
    **/
    data: demodaysCreateInput
  }


  /**
   * demodays update
   */
  export type demodaysUpdateArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * The data needed to update a demodays.
    **/
    data: demodaysUpdateInput
    /**
     * Choose, which demodays to update.
    **/
    where: demodaysWhereUniqueInput
  }


  /**
   * demodays updateMany
   */
  export type demodaysUpdateManyArgs = {
    data: demodaysUpdateManyMutationInput
    where?: demodaysWhereInput
  }


  /**
   * demodays upsert
   */
  export type demodaysUpsertArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * The filter to search for the demodays to update in case it exists.
    **/
    where: demodaysWhereUniqueInput
    /**
     * In case the demodays found by the `where` argument doesn't exist, create a new demodays with this data.
    **/
    create: demodaysCreateInput
    /**
     * In case the demodays was found with the provided `where` argument, update it with this data.
    **/
    update: demodaysUpdateInput
  }


  /**
   * demodays delete
   */
  export type demodaysDeleteArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
    /**
     * Filter which demodays to delete.
    **/
    where: demodaysWhereUniqueInput
  }


  /**
   * demodays deleteMany
   */
  export type demodaysDeleteManyArgs = {
    where?: demodaysWhereInput
  }


  /**
   * demodays without action
   */
  export type demodaysArgs = {
    /**
     * Select specific fields to fetch from the demodays
    **/
    select?: demodaysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: demodaysInclude | null
  }



  /**
   * Model document_types
   */


  export type AggregateDocument_types = {
    count: number | null
    avg: Document_typesAvgAggregateOutputType | null
    sum: Document_typesSumAggregateOutputType | null
    min: Document_typesMinAggregateOutputType | null
    max: Document_typesMaxAggregateOutputType | null
  }

  export type Document_typesAvgAggregateOutputType = {
    id: number
  }

  export type Document_typesSumAggregateOutputType = {
    id: number
  }

  export type Document_typesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Document_typesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Document_typesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Document_typesAvgAggregateInputType = {
    id?: true
  }

  export type Document_typesSumAggregateInputType = {
    id?: true
  }

  export type Document_typesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Document_typesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Document_typesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateDocument_typesArgs = {
    /**
     * Filter which document_types to aggregate.
    **/
    where?: document_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of document_types to fetch.
    **/
    orderBy?: Enumerable<document_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: document_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` document_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` document_types.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned document_types
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Document_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Document_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Document_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Document_typesMaxAggregateInputType
  }

  export type GetDocument_typesAggregateType<T extends AggregateDocument_typesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetDocument_typesAggregateScalarType<T[P]>
  }

  export type GetDocument_typesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Document_typesAvgAggregateOutputType ? Document_typesAvgAggregateOutputType[P] : never
  }

    



  export type document_typesSelect = {
    id?: boolean
    name?: boolean
    company_documents?: boolean | FindManycompany_documentsArgs
    required_documents?: boolean | FindManyrequired_documentsArgs
  }

  export type document_typesInclude = {
    company_documents?: boolean | FindManycompany_documentsArgs
    required_documents?: boolean | FindManyrequired_documentsArgs
  }

  export type document_typesGetPayload<
    S extends boolean | null | undefined | document_typesArgs,
    U = keyof S
      > = S extends true
        ? document_types
    : S extends undefined
    ? never
    : S extends document_typesArgs | FindManydocument_typesArgs
    ?'include' extends U
    ? document_types  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'company_documents'
        ? Array < company_documentsGetPayload<S['include'][P]>>  :
        P extends 'required_documents'
        ? Array < required_documentsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof document_types ?document_types [P]
  : 
          P extends 'company_documents'
        ? Array < company_documentsGetPayload<S['select'][P]>>  :
        P extends 'required_documents'
        ? Array < required_documentsGetPayload<S['select'][P]>>  : never
  } 
    : document_types
  : document_types


  export interface document_typesDelegate {
    /**
     * Find zero or one Document_types that matches the filter.
     * @param {FindUniquedocument_typesArgs} args - Arguments to find a Document_types
     * @example
     * // Get one Document_types
     * const document_types = await prisma.document_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquedocument_typesArgs>(
      args: Subset<T, FindUniquedocument_typesArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types | null>, Prisma__document_typesClient<document_typesGetPayload<T> | null>>

    /**
     * Find the first Document_types that matches the filter.
     * @param {FindFirstdocument_typesArgs} args - Arguments to find a Document_types
     * @example
     * // Get one Document_types
     * const document_types = await prisma.document_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstdocument_typesArgs>(
      args?: Subset<T, FindFirstdocument_typesArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types | null>, Prisma__document_typesClient<document_typesGetPayload<T> | null>>

    /**
     * Find zero or more Document_types that matches the filter.
     * @param {FindManydocument_typesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Document_types
     * const document_types = await prisma.document_types.findMany()
     * 
     * // Get first 10 Document_types
     * const document_types = await prisma.document_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const document_typesWithIdOnly = await prisma.document_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManydocument_typesArgs>(
      args?: Subset<T, FindManydocument_typesArgs>
    ): CheckSelect<T, Promise<Array<document_types>>, Promise<Array<document_typesGetPayload<T>>>>

    /**
     * Create a Document_types.
     * @param {document_typesCreateArgs} args - Arguments to create a Document_types.
     * @example
     * // Create one Document_types
     * const Document_types = await prisma.document_types.create({
     *   data: {
     *     // ... data to create a Document_types
     *   }
     * })
     * 
    **/
    create<T extends document_typesCreateArgs>(
      args: Subset<T, document_typesCreateArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types>, Prisma__document_typesClient<document_typesGetPayload<T>>>

    /**
     * Delete a Document_types.
     * @param {document_typesDeleteArgs} args - Arguments to delete one Document_types.
     * @example
     * // Delete one Document_types
     * const Document_types = await prisma.document_types.delete({
     *   where: {
     *     // ... filter to delete one Document_types
     *   }
     * })
     * 
    **/
    delete<T extends document_typesDeleteArgs>(
      args: Subset<T, document_typesDeleteArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types>, Prisma__document_typesClient<document_typesGetPayload<T>>>

    /**
     * Update one Document_types.
     * @param {document_typesUpdateArgs} args - Arguments to update one Document_types.
     * @example
     * // Update one Document_types
     * const document_types = await prisma.document_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends document_typesUpdateArgs>(
      args: Subset<T, document_typesUpdateArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types>, Prisma__document_typesClient<document_typesGetPayload<T>>>

    /**
     * Delete zero or more Document_types.
     * @param {document_typesDeleteManyArgs} args - Arguments to filter Document_types to delete.
     * @example
     * // Delete a few Document_types
     * const { count } = await prisma.document_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends document_typesDeleteManyArgs>(
      args?: Subset<T, document_typesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Document_types.
     * @param {document_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Document_types
     * const document_types = await prisma.document_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends document_typesUpdateManyArgs>(
      args: Subset<T, document_typesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Document_types.
     * @param {document_typesUpsertArgs} args - Arguments to update or create a Document_types.
     * @example
     * // Update or create a Document_types
     * const document_types = await prisma.document_types.upsert({
     *   create: {
     *     // ... data to create a Document_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document_types we want to update
     *   }
     * })
    **/
    upsert<T extends document_typesUpsertArgs>(
      args: Subset<T, document_typesUpsertArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types>, Prisma__document_typesClient<document_typesGetPayload<T>>>

    /**
     * Find zero or one Document_types that matches the filter.
     * @param {FindUniquedocument_typesArgs} args - Arguments to find a Document_types
     * @deprecated This will be deprecated please use prisma.document_types.findUnique
     * @example
     * // Get one Document_types
     * const document_types = await prisma.document_types.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquedocument_typesArgs>(
      args: Subset<T, FindUniquedocument_typesArgs>
    ): CheckSelect<T, Prisma__document_typesClient<document_types | null>, Prisma__document_typesClient<document_typesGetPayload<T> | null>>

    /**
     * Count the number of Document_types.
     * @param {FindManydocument_typesArgs} args - Arguments to filter Document_types to count.
     * @example
     * // Count the number of Document_types
     * const count = await prisma.document_types.count({
     *   where: {
     *     // ... the filter for the Document_types we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManydocument_typesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Document_types.
     * @param {AggregateDocument_typesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateDocument_typesArgs>(args: Subset<T, AggregateDocument_typesArgs>): Promise<GetDocument_typesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for document_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__document_typesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    company_documents<T extends FindManycompany_documentsArgs = {}>(args?: Subset<T, FindManycompany_documentsArgs>): CheckSelect<T, Promise<Array<company_documents>>, Promise<Array<company_documentsGetPayload<T>>>>;

    required_documents<T extends FindManyrequired_documentsArgs = {}>(args?: Subset<T, FindManyrequired_documentsArgs>): CheckSelect<T, Promise<Array<required_documents>>, Promise<Array<required_documentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * document_types findUnique
   */
  export type FindUniquedocument_typesArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * Filter, which document_types to fetch.
    **/
    where: document_typesWhereUniqueInput
  }


  /**
   * document_types findFirst
   */
  export type FindFirstdocument_typesArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * Filter, which document_types to fetch.
    **/
    where?: document_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of document_types to fetch.
    **/
    orderBy?: Enumerable<document_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for document_types.
    **/
    cursor?: document_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` document_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` document_types.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of document_types.
    **/
    distinct?: Enumerable<Document_typesScalarFieldEnum>
  }


  /**
   * document_types findMany
   */
  export type FindManydocument_typesArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * Filter, which document_types to fetch.
    **/
    where?: document_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of document_types to fetch.
    **/
    orderBy?: Enumerable<document_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing document_types.
    **/
    cursor?: document_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` document_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` document_types.
    **/
    skip?: number
    distinct?: Enumerable<Document_typesScalarFieldEnum>
  }


  /**
   * document_types create
   */
  export type document_typesCreateArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * The data needed to create a document_types.
    **/
    data: document_typesCreateInput
  }


  /**
   * document_types update
   */
  export type document_typesUpdateArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * The data needed to update a document_types.
    **/
    data: document_typesUpdateInput
    /**
     * Choose, which document_types to update.
    **/
    where: document_typesWhereUniqueInput
  }


  /**
   * document_types updateMany
   */
  export type document_typesUpdateManyArgs = {
    data: document_typesUpdateManyMutationInput
    where?: document_typesWhereInput
  }


  /**
   * document_types upsert
   */
  export type document_typesUpsertArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * The filter to search for the document_types to update in case it exists.
    **/
    where: document_typesWhereUniqueInput
    /**
     * In case the document_types found by the `where` argument doesn't exist, create a new document_types with this data.
    **/
    create: document_typesCreateInput
    /**
     * In case the document_types was found with the provided `where` argument, update it with this data.
    **/
    update: document_typesUpdateInput
  }


  /**
   * document_types delete
   */
  export type document_typesDeleteArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
    /**
     * Filter which document_types to delete.
    **/
    where: document_typesWhereUniqueInput
  }


  /**
   * document_types deleteMany
   */
  export type document_typesDeleteManyArgs = {
    where?: document_typesWhereInput
  }


  /**
   * document_types without action
   */
  export type document_typesArgs = {
    /**
     * Select specific fields to fetch from the document_types
    **/
    select?: document_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: document_typesInclude | null
  }



  /**
   * Model email_auth
   */


  export type AggregateEmail_auth = {
    count: number | null
    avg: Email_authAvgAggregateOutputType | null
    sum: Email_authSumAggregateOutputType | null
    min: Email_authMinAggregateOutputType | null
    max: Email_authMaxAggregateOutputType | null
  }

  export type Email_authAvgAggregateOutputType = {
    id: number
  }

  export type Email_authSumAggregateOutputType = {
    id: number
  }

  export type Email_authMinAggregateOutputType = {
    id: number
    email: string | null
    auth_number: string | null
  }

  export type Email_authMaxAggregateOutputType = {
    id: number
    email: string | null
    auth_number: string | null
  }

  export type Email_authCountAggregateOutputType = {
    id: number
    email: number | null
    auth_number: number | null
    _all: number
  }


  export type Email_authAvgAggregateInputType = {
    id?: true
  }

  export type Email_authSumAggregateInputType = {
    id?: true
  }

  export type Email_authMinAggregateInputType = {
    id?: true
    email?: true
    auth_number?: true
  }

  export type Email_authMaxAggregateInputType = {
    id?: true
    email?: true
    auth_number?: true
  }

  export type Email_authCountAggregateInputType = {
    id?: true
    email?: true
    auth_number?: true
    _all?: true
  }

  export type AggregateEmail_authArgs = {
    /**
     * Filter which email_auth to aggregate.
    **/
    where?: email_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of email_auths to fetch.
    **/
    orderBy?: Enumerable<email_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: email_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` email_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` email_auths.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned email_auths
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Email_authAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Email_authSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Email_authMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Email_authMaxAggregateInputType
  }

  export type GetEmail_authAggregateType<T extends AggregateEmail_authArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetEmail_authAggregateScalarType<T[P]>
  }

  export type GetEmail_authAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Email_authAvgAggregateOutputType ? Email_authAvgAggregateOutputType[P] : never
  }

    



  export type email_authSelect = {
    id?: boolean
    email?: boolean
    auth_number?: boolean
  }

  export type email_authGetPayload<
    S extends boolean | null | undefined | email_authArgs,
    U = keyof S
      > = S extends true
        ? email_auth
    : S extends undefined
    ? never
    : S extends email_authArgs | FindManyemail_authArgs
    ?'include' extends U
    ? email_auth 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof email_auth ?email_auth [P]
  : 
     never
  } 
    : email_auth
  : email_auth


  export interface email_authDelegate {
    /**
     * Find zero or one Email_auth that matches the filter.
     * @param {FindUniqueemail_authArgs} args - Arguments to find a Email_auth
     * @example
     * // Get one Email_auth
     * const email_auth = await prisma.email_auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueemail_authArgs>(
      args: Subset<T, FindUniqueemail_authArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth | null>, Prisma__email_authClient<email_authGetPayload<T> | null>>

    /**
     * Find the first Email_auth that matches the filter.
     * @param {FindFirstemail_authArgs} args - Arguments to find a Email_auth
     * @example
     * // Get one Email_auth
     * const email_auth = await prisma.email_auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstemail_authArgs>(
      args?: Subset<T, FindFirstemail_authArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth | null>, Prisma__email_authClient<email_authGetPayload<T> | null>>

    /**
     * Find zero or more Email_auths that matches the filter.
     * @param {FindManyemail_authArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Email_auths
     * const email_auths = await prisma.email_auth.findMany()
     * 
     * // Get first 10 Email_auths
     * const email_auths = await prisma.email_auth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const email_authWithIdOnly = await prisma.email_auth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyemail_authArgs>(
      args?: Subset<T, FindManyemail_authArgs>
    ): CheckSelect<T, Promise<Array<email_auth>>, Promise<Array<email_authGetPayload<T>>>>

    /**
     * Create a Email_auth.
     * @param {email_authCreateArgs} args - Arguments to create a Email_auth.
     * @example
     * // Create one Email_auth
     * const Email_auth = await prisma.email_auth.create({
     *   data: {
     *     // ... data to create a Email_auth
     *   }
     * })
     * 
    **/
    create<T extends email_authCreateArgs>(
      args: Subset<T, email_authCreateArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth>, Prisma__email_authClient<email_authGetPayload<T>>>

    /**
     * Delete a Email_auth.
     * @param {email_authDeleteArgs} args - Arguments to delete one Email_auth.
     * @example
     * // Delete one Email_auth
     * const Email_auth = await prisma.email_auth.delete({
     *   where: {
     *     // ... filter to delete one Email_auth
     *   }
     * })
     * 
    **/
    delete<T extends email_authDeleteArgs>(
      args: Subset<T, email_authDeleteArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth>, Prisma__email_authClient<email_authGetPayload<T>>>

    /**
     * Update one Email_auth.
     * @param {email_authUpdateArgs} args - Arguments to update one Email_auth.
     * @example
     * // Update one Email_auth
     * const email_auth = await prisma.email_auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends email_authUpdateArgs>(
      args: Subset<T, email_authUpdateArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth>, Prisma__email_authClient<email_authGetPayload<T>>>

    /**
     * Delete zero or more Email_auths.
     * @param {email_authDeleteManyArgs} args - Arguments to filter Email_auths to delete.
     * @example
     * // Delete a few Email_auths
     * const { count } = await prisma.email_auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends email_authDeleteManyArgs>(
      args?: Subset<T, email_authDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Email_auths.
     * @param {email_authUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Email_auths
     * const email_auth = await prisma.email_auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends email_authUpdateManyArgs>(
      args: Subset<T, email_authUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Email_auth.
     * @param {email_authUpsertArgs} args - Arguments to update or create a Email_auth.
     * @example
     * // Update or create a Email_auth
     * const email_auth = await prisma.email_auth.upsert({
     *   create: {
     *     // ... data to create a Email_auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Email_auth we want to update
     *   }
     * })
    **/
    upsert<T extends email_authUpsertArgs>(
      args: Subset<T, email_authUpsertArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth>, Prisma__email_authClient<email_authGetPayload<T>>>

    /**
     * Find zero or one Email_auth that matches the filter.
     * @param {FindUniqueemail_authArgs} args - Arguments to find a Email_auth
     * @deprecated This will be deprecated please use prisma.email_auth.findUnique
     * @example
     * // Get one Email_auth
     * const email_auth = await prisma.email_auth.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueemail_authArgs>(
      args: Subset<T, FindUniqueemail_authArgs>
    ): CheckSelect<T, Prisma__email_authClient<email_auth | null>, Prisma__email_authClient<email_authGetPayload<T> | null>>

    /**
     * Count the number of Email_auths.
     * @param {FindManyemail_authArgs} args - Arguments to filter Email_auths to count.
     * @example
     * // Count the number of Email_auths
     * const count = await prisma.email_auth.count({
     *   where: {
     *     // ... the filter for the Email_auths we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyemail_authArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Email_auth.
     * @param {AggregateEmail_authArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateEmail_authArgs>(args: Subset<T, AggregateEmail_authArgs>): Promise<GetEmail_authAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for email_auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__email_authClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * email_auth findUnique
   */
  export type FindUniqueemail_authArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * Filter, which email_auth to fetch.
    **/
    where: email_authWhereUniqueInput
  }


  /**
   * email_auth findFirst
   */
  export type FindFirstemail_authArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * Filter, which email_auth to fetch.
    **/
    where?: email_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of email_auths to fetch.
    **/
    orderBy?: Enumerable<email_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for email_auths.
    **/
    cursor?: email_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` email_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` email_auths.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of email_auths.
    **/
    distinct?: Enumerable<Email_authScalarFieldEnum>
  }


  /**
   * email_auth findMany
   */
  export type FindManyemail_authArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * Filter, which email_auths to fetch.
    **/
    where?: email_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of email_auths to fetch.
    **/
    orderBy?: Enumerable<email_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing email_auths.
    **/
    cursor?: email_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` email_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` email_auths.
    **/
    skip?: number
    distinct?: Enumerable<Email_authScalarFieldEnum>
  }


  /**
   * email_auth create
   */
  export type email_authCreateArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * The data needed to create a email_auth.
    **/
    data: email_authCreateInput
  }


  /**
   * email_auth update
   */
  export type email_authUpdateArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * The data needed to update a email_auth.
    **/
    data: email_authUpdateInput
    /**
     * Choose, which email_auth to update.
    **/
    where: email_authWhereUniqueInput
  }


  /**
   * email_auth updateMany
   */
  export type email_authUpdateManyArgs = {
    data: email_authUpdateManyMutationInput
    where?: email_authWhereInput
  }


  /**
   * email_auth upsert
   */
  export type email_authUpsertArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * The filter to search for the email_auth to update in case it exists.
    **/
    where: email_authWhereUniqueInput
    /**
     * In case the email_auth found by the `where` argument doesn't exist, create a new email_auth with this data.
    **/
    create: email_authCreateInput
    /**
     * In case the email_auth was found with the provided `where` argument, update it with this data.
    **/
    update: email_authUpdateInput
  }


  /**
   * email_auth delete
   */
  export type email_authDeleteArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
    /**
     * Filter which email_auth to delete.
    **/
    where: email_authWhereUniqueInput
  }


  /**
   * email_auth deleteMany
   */
  export type email_authDeleteManyArgs = {
    where?: email_authWhereInput
  }


  /**
   * email_auth without action
   */
  export type email_authArgs = {
    /**
     * Select specific fields to fetch from the email_auth
    **/
    select?: email_authSelect | null
  }



  /**
   * Model invested_from
   */


  export type AggregateInvested_from = {
    count: number | null
    avg: Invested_fromAvgAggregateOutputType | null
    sum: Invested_fromSumAggregateOutputType | null
    min: Invested_fromMinAggregateOutputType | null
    max: Invested_fromMaxAggregateOutputType | null
  }

  export type Invested_fromAvgAggregateOutputType = {
    id: number
    startup_id: number
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_fromSumAggregateOutputType = {
    id: number
    startup_id: number
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_fromMinAggregateOutputType = {
    id: number
    startup_id: number
    date: Date | null
    invested_institution: string | null
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_fromMaxAggregateOutputType = {
    id: number
    startup_id: number
    date: Date | null
    invested_institution: string | null
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_fromCountAggregateOutputType = {
    id: number
    startup_id: number
    date: number | null
    invested_institution: number | null
    invested_fund: number
    corporate_value: number
    series_id: number
    _all: number
  }


  export type Invested_fromAvgAggregateInputType = {
    id?: true
    startup_id?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_fromSumAggregateInputType = {
    id?: true
    startup_id?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_fromMinAggregateInputType = {
    id?: true
    startup_id?: true
    date?: true
    invested_institution?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_fromMaxAggregateInputType = {
    id?: true
    startup_id?: true
    date?: true
    invested_institution?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_fromCountAggregateInputType = {
    id?: true
    startup_id?: true
    date?: true
    invested_institution?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
    _all?: true
  }

  export type AggregateInvested_fromArgs = {
    /**
     * Filter which invested_from to aggregate.
    **/
    where?: invested_fromWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_froms to fetch.
    **/
    orderBy?: Enumerable<invested_fromOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: invested_fromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_froms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_froms.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned invested_froms
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Invested_fromAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Invested_fromSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Invested_fromMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Invested_fromMaxAggregateInputType
  }

  export type GetInvested_fromAggregateType<T extends AggregateInvested_fromArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetInvested_fromAggregateScalarType<T[P]>
  }

  export type GetInvested_fromAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Invested_fromAvgAggregateOutputType ? Invested_fromAvgAggregateOutputType[P] : never
  }

    



  export type invested_fromSelect = {
    id?: boolean
    startup_id?: boolean
    date?: boolean
    invested_institution?: boolean
    invested_fund?: boolean
    corporate_value?: boolean
    series_id?: boolean
    investment_series?: boolean | investment_seriesArgs
    startup_infos?: boolean | startup_infosArgs
  }

  export type invested_fromInclude = {
    investment_series?: boolean | investment_seriesArgs
    startup_infos?: boolean | startup_infosArgs
  }

  export type invested_fromGetPayload<
    S extends boolean | null | undefined | invested_fromArgs,
    U = keyof S
      > = S extends true
        ? invested_from
    : S extends undefined
    ? never
    : S extends invested_fromArgs | FindManyinvested_fromArgs
    ?'include' extends U
    ? invested_from  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'investment_series'
        ? investment_seriesGetPayload<S['include'][P]> :
        P extends 'startup_infos'
        ? startup_infosGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof invested_from ?invested_from [P]
  : 
          P extends 'investment_series'
        ? investment_seriesGetPayload<S['select'][P]> :
        P extends 'startup_infos'
        ? startup_infosGetPayload<S['select'][P]> : never
  } 
    : invested_from
  : invested_from


  export interface invested_fromDelegate {
    /**
     * Find zero or one Invested_from that matches the filter.
     * @param {FindUniqueinvested_fromArgs} args - Arguments to find a Invested_from
     * @example
     * // Get one Invested_from
     * const invested_from = await prisma.invested_from.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueinvested_fromArgs>(
      args: Subset<T, FindUniqueinvested_fromArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from | null>, Prisma__invested_fromClient<invested_fromGetPayload<T> | null>>

    /**
     * Find the first Invested_from that matches the filter.
     * @param {FindFirstinvested_fromArgs} args - Arguments to find a Invested_from
     * @example
     * // Get one Invested_from
     * const invested_from = await prisma.invested_from.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstinvested_fromArgs>(
      args?: Subset<T, FindFirstinvested_fromArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from | null>, Prisma__invested_fromClient<invested_fromGetPayload<T> | null>>

    /**
     * Find zero or more Invested_froms that matches the filter.
     * @param {FindManyinvested_fromArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invested_froms
     * const invested_froms = await prisma.invested_from.findMany()
     * 
     * // Get first 10 Invested_froms
     * const invested_froms = await prisma.invested_from.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invested_fromWithIdOnly = await prisma.invested_from.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyinvested_fromArgs>(
      args?: Subset<T, FindManyinvested_fromArgs>
    ): CheckSelect<T, Promise<Array<invested_from>>, Promise<Array<invested_fromGetPayload<T>>>>

    /**
     * Create a Invested_from.
     * @param {invested_fromCreateArgs} args - Arguments to create a Invested_from.
     * @example
     * // Create one Invested_from
     * const Invested_from = await prisma.invested_from.create({
     *   data: {
     *     // ... data to create a Invested_from
     *   }
     * })
     * 
    **/
    create<T extends invested_fromCreateArgs>(
      args: Subset<T, invested_fromCreateArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from>, Prisma__invested_fromClient<invested_fromGetPayload<T>>>

    /**
     * Delete a Invested_from.
     * @param {invested_fromDeleteArgs} args - Arguments to delete one Invested_from.
     * @example
     * // Delete one Invested_from
     * const Invested_from = await prisma.invested_from.delete({
     *   where: {
     *     // ... filter to delete one Invested_from
     *   }
     * })
     * 
    **/
    delete<T extends invested_fromDeleteArgs>(
      args: Subset<T, invested_fromDeleteArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from>, Prisma__invested_fromClient<invested_fromGetPayload<T>>>

    /**
     * Update one Invested_from.
     * @param {invested_fromUpdateArgs} args - Arguments to update one Invested_from.
     * @example
     * // Update one Invested_from
     * const invested_from = await prisma.invested_from.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends invested_fromUpdateArgs>(
      args: Subset<T, invested_fromUpdateArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from>, Prisma__invested_fromClient<invested_fromGetPayload<T>>>

    /**
     * Delete zero or more Invested_froms.
     * @param {invested_fromDeleteManyArgs} args - Arguments to filter Invested_froms to delete.
     * @example
     * // Delete a few Invested_froms
     * const { count } = await prisma.invested_from.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends invested_fromDeleteManyArgs>(
      args?: Subset<T, invested_fromDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Invested_froms.
     * @param {invested_fromUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invested_froms
     * const invested_from = await prisma.invested_from.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends invested_fromUpdateManyArgs>(
      args: Subset<T, invested_fromUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Invested_from.
     * @param {invested_fromUpsertArgs} args - Arguments to update or create a Invested_from.
     * @example
     * // Update or create a Invested_from
     * const invested_from = await prisma.invested_from.upsert({
     *   create: {
     *     // ... data to create a Invested_from
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invested_from we want to update
     *   }
     * })
    **/
    upsert<T extends invested_fromUpsertArgs>(
      args: Subset<T, invested_fromUpsertArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from>, Prisma__invested_fromClient<invested_fromGetPayload<T>>>

    /**
     * Find zero or one Invested_from that matches the filter.
     * @param {FindUniqueinvested_fromArgs} args - Arguments to find a Invested_from
     * @deprecated This will be deprecated please use prisma.invested_from.findUnique
     * @example
     * // Get one Invested_from
     * const invested_from = await prisma.invested_from.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueinvested_fromArgs>(
      args: Subset<T, FindUniqueinvested_fromArgs>
    ): CheckSelect<T, Prisma__invested_fromClient<invested_from | null>, Prisma__invested_fromClient<invested_fromGetPayload<T> | null>>

    /**
     * Count the number of Invested_froms.
     * @param {FindManyinvested_fromArgs} args - Arguments to filter Invested_froms to count.
     * @example
     * // Count the number of Invested_froms
     * const count = await prisma.invested_from.count({
     *   where: {
     *     // ... the filter for the Invested_froms we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyinvested_fromArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Invested_from.
     * @param {AggregateInvested_fromArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateInvested_fromArgs>(args: Subset<T, AggregateInvested_fromArgs>): Promise<GetInvested_fromAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for invested_from.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__invested_fromClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    investment_series<T extends investment_seriesArgs = {}>(args?: Subset<T, investment_seriesArgs>): CheckSelect<T, Prisma__investment_seriesClient<investment_series | null>, Prisma__investment_seriesClient<investment_seriesGetPayload<T> | null>>;

    startup_infos<T extends startup_infosArgs = {}>(args?: Subset<T, startup_infosArgs>): CheckSelect<T, Prisma__startup_infosClient<startup_infos | null>, Prisma__startup_infosClient<startup_infosGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * invested_from findUnique
   */
  export type FindUniqueinvested_fromArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * Filter, which invested_from to fetch.
    **/
    where: invested_fromWhereUniqueInput
  }


  /**
   * invested_from findFirst
   */
  export type FindFirstinvested_fromArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * Filter, which invested_from to fetch.
    **/
    where?: invested_fromWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_froms to fetch.
    **/
    orderBy?: Enumerable<invested_fromOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for invested_froms.
    **/
    cursor?: invested_fromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_froms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_froms.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of invested_froms.
    **/
    distinct?: Enumerable<Invested_fromScalarFieldEnum>
  }


  /**
   * invested_from findMany
   */
  export type FindManyinvested_fromArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * Filter, which invested_froms to fetch.
    **/
    where?: invested_fromWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_froms to fetch.
    **/
    orderBy?: Enumerable<invested_fromOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing invested_froms.
    **/
    cursor?: invested_fromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_froms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_froms.
    **/
    skip?: number
    distinct?: Enumerable<Invested_fromScalarFieldEnum>
  }


  /**
   * invested_from create
   */
  export type invested_fromCreateArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * The data needed to create a invested_from.
    **/
    data: invested_fromCreateInput
  }


  /**
   * invested_from update
   */
  export type invested_fromUpdateArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * The data needed to update a invested_from.
    **/
    data: invested_fromUpdateInput
    /**
     * Choose, which invested_from to update.
    **/
    where: invested_fromWhereUniqueInput
  }


  /**
   * invested_from updateMany
   */
  export type invested_fromUpdateManyArgs = {
    data: invested_fromUpdateManyMutationInput
    where?: invested_fromWhereInput
  }


  /**
   * invested_from upsert
   */
  export type invested_fromUpsertArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * The filter to search for the invested_from to update in case it exists.
    **/
    where: invested_fromWhereUniqueInput
    /**
     * In case the invested_from found by the `where` argument doesn't exist, create a new invested_from with this data.
    **/
    create: invested_fromCreateInput
    /**
     * In case the invested_from was found with the provided `where` argument, update it with this data.
    **/
    update: invested_fromUpdateInput
  }


  /**
   * invested_from delete
   */
  export type invested_fromDeleteArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
    /**
     * Filter which invested_from to delete.
    **/
    where: invested_fromWhereUniqueInput
  }


  /**
   * invested_from deleteMany
   */
  export type invested_fromDeleteManyArgs = {
    where?: invested_fromWhereInput
  }


  /**
   * invested_from without action
   */
  export type invested_fromArgs = {
    /**
     * Select specific fields to fetch from the invested_from
    **/
    select?: invested_fromSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_fromInclude | null
  }



  /**
   * Model invested_to
   */


  export type AggregateInvested_to = {
    count: number | null
    avg: Invested_toAvgAggregateOutputType | null
    sum: Invested_toSumAggregateOutputType | null
    min: Invested_toMinAggregateOutputType | null
    max: Invested_toMaxAggregateOutputType | null
  }

  export type Invested_toAvgAggregateOutputType = {
    id: number
    partner_id: number
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_toSumAggregateOutputType = {
    id: number
    partner_id: number
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_toMinAggregateOutputType = {
    id: number
    partner_id: number
    date: Date | null
    startup_name: string | null
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_toMaxAggregateOutputType = {
    id: number
    partner_id: number
    date: Date | null
    startup_name: string | null
    invested_fund: number
    corporate_value: number
    series_id: number
  }

  export type Invested_toCountAggregateOutputType = {
    id: number
    partner_id: number
    date: number | null
    startup_name: number | null
    invested_fund: number
    corporate_value: number
    series_id: number
    _all: number
  }


  export type Invested_toAvgAggregateInputType = {
    id?: true
    partner_id?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_toSumAggregateInputType = {
    id?: true
    partner_id?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_toMinAggregateInputType = {
    id?: true
    partner_id?: true
    date?: true
    startup_name?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_toMaxAggregateInputType = {
    id?: true
    partner_id?: true
    date?: true
    startup_name?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
  }

  export type Invested_toCountAggregateInputType = {
    id?: true
    partner_id?: true
    date?: true
    startup_name?: true
    invested_fund?: true
    corporate_value?: true
    series_id?: true
    _all?: true
  }

  export type AggregateInvested_toArgs = {
    /**
     * Filter which invested_to to aggregate.
    **/
    where?: invested_toWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_tos to fetch.
    **/
    orderBy?: Enumerable<invested_toOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: invested_toWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_tos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_tos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned invested_tos
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Invested_toAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Invested_toSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Invested_toMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Invested_toMaxAggregateInputType
  }

  export type GetInvested_toAggregateType<T extends AggregateInvested_toArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetInvested_toAggregateScalarType<T[P]>
  }

  export type GetInvested_toAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Invested_toAvgAggregateOutputType ? Invested_toAvgAggregateOutputType[P] : never
  }

    



  export type invested_toSelect = {
    id?: boolean
    partner_id?: boolean
    date?: boolean
    startup_name?: boolean
    invested_fund?: boolean
    corporate_value?: boolean
    series_id?: boolean
    companies?: boolean | companiesArgs
    investment_series?: boolean | investment_seriesArgs
  }

  export type invested_toInclude = {
    companies?: boolean | companiesArgs
    investment_series?: boolean | investment_seriesArgs
  }

  export type invested_toGetPayload<
    S extends boolean | null | undefined | invested_toArgs,
    U = keyof S
      > = S extends true
        ? invested_to
    : S extends undefined
    ? never
    : S extends invested_toArgs | FindManyinvested_toArgs
    ?'include' extends U
    ? invested_to  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'investment_series'
        ? investment_seriesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof invested_to ?invested_to [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'investment_series'
        ? investment_seriesGetPayload<S['select'][P]> : never
  } 
    : invested_to
  : invested_to


  export interface invested_toDelegate {
    /**
     * Find zero or one Invested_to that matches the filter.
     * @param {FindUniqueinvested_toArgs} args - Arguments to find a Invested_to
     * @example
     * // Get one Invested_to
     * const invested_to = await prisma.invested_to.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueinvested_toArgs>(
      args: Subset<T, FindUniqueinvested_toArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to | null>, Prisma__invested_toClient<invested_toGetPayload<T> | null>>

    /**
     * Find the first Invested_to that matches the filter.
     * @param {FindFirstinvested_toArgs} args - Arguments to find a Invested_to
     * @example
     * // Get one Invested_to
     * const invested_to = await prisma.invested_to.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstinvested_toArgs>(
      args?: Subset<T, FindFirstinvested_toArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to | null>, Prisma__invested_toClient<invested_toGetPayload<T> | null>>

    /**
     * Find zero or more Invested_tos that matches the filter.
     * @param {FindManyinvested_toArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invested_tos
     * const invested_tos = await prisma.invested_to.findMany()
     * 
     * // Get first 10 Invested_tos
     * const invested_tos = await prisma.invested_to.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invested_toWithIdOnly = await prisma.invested_to.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyinvested_toArgs>(
      args?: Subset<T, FindManyinvested_toArgs>
    ): CheckSelect<T, Promise<Array<invested_to>>, Promise<Array<invested_toGetPayload<T>>>>

    /**
     * Create a Invested_to.
     * @param {invested_toCreateArgs} args - Arguments to create a Invested_to.
     * @example
     * // Create one Invested_to
     * const Invested_to = await prisma.invested_to.create({
     *   data: {
     *     // ... data to create a Invested_to
     *   }
     * })
     * 
    **/
    create<T extends invested_toCreateArgs>(
      args: Subset<T, invested_toCreateArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to>, Prisma__invested_toClient<invested_toGetPayload<T>>>

    /**
     * Delete a Invested_to.
     * @param {invested_toDeleteArgs} args - Arguments to delete one Invested_to.
     * @example
     * // Delete one Invested_to
     * const Invested_to = await prisma.invested_to.delete({
     *   where: {
     *     // ... filter to delete one Invested_to
     *   }
     * })
     * 
    **/
    delete<T extends invested_toDeleteArgs>(
      args: Subset<T, invested_toDeleteArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to>, Prisma__invested_toClient<invested_toGetPayload<T>>>

    /**
     * Update one Invested_to.
     * @param {invested_toUpdateArgs} args - Arguments to update one Invested_to.
     * @example
     * // Update one Invested_to
     * const invested_to = await prisma.invested_to.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends invested_toUpdateArgs>(
      args: Subset<T, invested_toUpdateArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to>, Prisma__invested_toClient<invested_toGetPayload<T>>>

    /**
     * Delete zero or more Invested_tos.
     * @param {invested_toDeleteManyArgs} args - Arguments to filter Invested_tos to delete.
     * @example
     * // Delete a few Invested_tos
     * const { count } = await prisma.invested_to.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends invested_toDeleteManyArgs>(
      args?: Subset<T, invested_toDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Invested_tos.
     * @param {invested_toUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invested_tos
     * const invested_to = await prisma.invested_to.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends invested_toUpdateManyArgs>(
      args: Subset<T, invested_toUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Invested_to.
     * @param {invested_toUpsertArgs} args - Arguments to update or create a Invested_to.
     * @example
     * // Update or create a Invested_to
     * const invested_to = await prisma.invested_to.upsert({
     *   create: {
     *     // ... data to create a Invested_to
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invested_to we want to update
     *   }
     * })
    **/
    upsert<T extends invested_toUpsertArgs>(
      args: Subset<T, invested_toUpsertArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to>, Prisma__invested_toClient<invested_toGetPayload<T>>>

    /**
     * Find zero or one Invested_to that matches the filter.
     * @param {FindUniqueinvested_toArgs} args - Arguments to find a Invested_to
     * @deprecated This will be deprecated please use prisma.invested_to.findUnique
     * @example
     * // Get one Invested_to
     * const invested_to = await prisma.invested_to.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueinvested_toArgs>(
      args: Subset<T, FindUniqueinvested_toArgs>
    ): CheckSelect<T, Prisma__invested_toClient<invested_to | null>, Prisma__invested_toClient<invested_toGetPayload<T> | null>>

    /**
     * Count the number of Invested_tos.
     * @param {FindManyinvested_toArgs} args - Arguments to filter Invested_tos to count.
     * @example
     * // Count the number of Invested_tos
     * const count = await prisma.invested_to.count({
     *   where: {
     *     // ... the filter for the Invested_tos we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyinvested_toArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Invested_to.
     * @param {AggregateInvested_toArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateInvested_toArgs>(args: Subset<T, AggregateInvested_toArgs>): Promise<GetInvested_toAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for invested_to.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__invested_toClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    investment_series<T extends investment_seriesArgs = {}>(args?: Subset<T, investment_seriesArgs>): CheckSelect<T, Prisma__investment_seriesClient<investment_series | null>, Prisma__investment_seriesClient<investment_seriesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * invested_to findUnique
   */
  export type FindUniqueinvested_toArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * Filter, which invested_to to fetch.
    **/
    where: invested_toWhereUniqueInput
  }


  /**
   * invested_to findFirst
   */
  export type FindFirstinvested_toArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * Filter, which invested_to to fetch.
    **/
    where?: invested_toWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_tos to fetch.
    **/
    orderBy?: Enumerable<invested_toOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for invested_tos.
    **/
    cursor?: invested_toWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_tos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_tos.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of invested_tos.
    **/
    distinct?: Enumerable<Invested_toScalarFieldEnum>
  }


  /**
   * invested_to findMany
   */
  export type FindManyinvested_toArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * Filter, which invested_tos to fetch.
    **/
    where?: invested_toWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of invested_tos to fetch.
    **/
    orderBy?: Enumerable<invested_toOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing invested_tos.
    **/
    cursor?: invested_toWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invested_tos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invested_tos.
    **/
    skip?: number
    distinct?: Enumerable<Invested_toScalarFieldEnum>
  }


  /**
   * invested_to create
   */
  export type invested_toCreateArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * The data needed to create a invested_to.
    **/
    data: invested_toCreateInput
  }


  /**
   * invested_to update
   */
  export type invested_toUpdateArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * The data needed to update a invested_to.
    **/
    data: invested_toUpdateInput
    /**
     * Choose, which invested_to to update.
    **/
    where: invested_toWhereUniqueInput
  }


  /**
   * invested_to updateMany
   */
  export type invested_toUpdateManyArgs = {
    data: invested_toUpdateManyMutationInput
    where?: invested_toWhereInput
  }


  /**
   * invested_to upsert
   */
  export type invested_toUpsertArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * The filter to search for the invested_to to update in case it exists.
    **/
    where: invested_toWhereUniqueInput
    /**
     * In case the invested_to found by the `where` argument doesn't exist, create a new invested_to with this data.
    **/
    create: invested_toCreateInput
    /**
     * In case the invested_to was found with the provided `where` argument, update it with this data.
    **/
    update: invested_toUpdateInput
  }


  /**
   * invested_to delete
   */
  export type invested_toDeleteArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
    /**
     * Filter which invested_to to delete.
    **/
    where: invested_toWhereUniqueInput
  }


  /**
   * invested_to deleteMany
   */
  export type invested_toDeleteManyArgs = {
    where?: invested_toWhereInput
  }


  /**
   * invested_to without action
   */
  export type invested_toArgs = {
    /**
     * Select specific fields to fetch from the invested_to
    **/
    select?: invested_toSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: invested_toInclude | null
  }



  /**
   * Model investment_funds
   */


  export type AggregateInvestment_funds = {
    count: number | null
    avg: Investment_fundsAvgAggregateOutputType | null
    sum: Investment_fundsSumAggregateOutputType | null
    min: Investment_fundsMinAggregateOutputType | null
    max: Investment_fundsMaxAggregateOutputType | null
  }

  export type Investment_fundsAvgAggregateOutputType = {
    id: number
  }

  export type Investment_fundsSumAggregateOutputType = {
    id: number
  }

  export type Investment_fundsMinAggregateOutputType = {
    id: number
    range: string | null
  }

  export type Investment_fundsMaxAggregateOutputType = {
    id: number
    range: string | null
  }

  export type Investment_fundsCountAggregateOutputType = {
    id: number
    range: number | null
    _all: number
  }


  export type Investment_fundsAvgAggregateInputType = {
    id?: true
  }

  export type Investment_fundsSumAggregateInputType = {
    id?: true
  }

  export type Investment_fundsMinAggregateInputType = {
    id?: true
    range?: true
  }

  export type Investment_fundsMaxAggregateInputType = {
    id?: true
    range?: true
  }

  export type Investment_fundsCountAggregateInputType = {
    id?: true
    range?: true
    _all?: true
  }

  export type AggregateInvestment_fundsArgs = {
    /**
     * Filter which investment_funds to aggregate.
    **/
    where?: investment_fundsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_funds to fetch.
    **/
    orderBy?: Enumerable<investment_fundsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: investment_fundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_funds from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_funds.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned investment_funds
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Investment_fundsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Investment_fundsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Investment_fundsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Investment_fundsMaxAggregateInputType
  }

  export type GetInvestment_fundsAggregateType<T extends AggregateInvestment_fundsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetInvestment_fundsAggregateScalarType<T[P]>
  }

  export type GetInvestment_fundsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Investment_fundsAvgAggregateOutputType ? Investment_fundsAvgAggregateOutputType[P] : never
  }

    



  export type investment_fundsSelect = {
    id?: boolean
    range?: boolean
    partner_infos?: boolean | FindManypartner_infosArgs
  }

  export type investment_fundsInclude = {
    partner_infos?: boolean | FindManypartner_infosArgs
  }

  export type investment_fundsGetPayload<
    S extends boolean | null | undefined | investment_fundsArgs,
    U = keyof S
      > = S extends true
        ? investment_funds
    : S extends undefined
    ? never
    : S extends investment_fundsArgs | FindManyinvestment_fundsArgs
    ?'include' extends U
    ? investment_funds  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof investment_funds ?investment_funds [P]
  : 
          P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['select'][P]>>  : never
  } 
    : investment_funds
  : investment_funds


  export interface investment_fundsDelegate {
    /**
     * Find zero or one Investment_funds that matches the filter.
     * @param {FindUniqueinvestment_fundsArgs} args - Arguments to find a Investment_funds
     * @example
     * // Get one Investment_funds
     * const investment_funds = await prisma.investment_funds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueinvestment_fundsArgs>(
      args: Subset<T, FindUniqueinvestment_fundsArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds | null>, Prisma__investment_fundsClient<investment_fundsGetPayload<T> | null>>

    /**
     * Find the first Investment_funds that matches the filter.
     * @param {FindFirstinvestment_fundsArgs} args - Arguments to find a Investment_funds
     * @example
     * // Get one Investment_funds
     * const investment_funds = await prisma.investment_funds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstinvestment_fundsArgs>(
      args?: Subset<T, FindFirstinvestment_fundsArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds | null>, Prisma__investment_fundsClient<investment_fundsGetPayload<T> | null>>

    /**
     * Find zero or more Investment_funds that matches the filter.
     * @param {FindManyinvestment_fundsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investment_funds
     * const investment_funds = await prisma.investment_funds.findMany()
     * 
     * // Get first 10 Investment_funds
     * const investment_funds = await prisma.investment_funds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investment_fundsWithIdOnly = await prisma.investment_funds.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyinvestment_fundsArgs>(
      args?: Subset<T, FindManyinvestment_fundsArgs>
    ): CheckSelect<T, Promise<Array<investment_funds>>, Promise<Array<investment_fundsGetPayload<T>>>>

    /**
     * Create a Investment_funds.
     * @param {investment_fundsCreateArgs} args - Arguments to create a Investment_funds.
     * @example
     * // Create one Investment_funds
     * const Investment_funds = await prisma.investment_funds.create({
     *   data: {
     *     // ... data to create a Investment_funds
     *   }
     * })
     * 
    **/
    create<T extends investment_fundsCreateArgs>(
      args: Subset<T, investment_fundsCreateArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds>, Prisma__investment_fundsClient<investment_fundsGetPayload<T>>>

    /**
     * Delete a Investment_funds.
     * @param {investment_fundsDeleteArgs} args - Arguments to delete one Investment_funds.
     * @example
     * // Delete one Investment_funds
     * const Investment_funds = await prisma.investment_funds.delete({
     *   where: {
     *     // ... filter to delete one Investment_funds
     *   }
     * })
     * 
    **/
    delete<T extends investment_fundsDeleteArgs>(
      args: Subset<T, investment_fundsDeleteArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds>, Prisma__investment_fundsClient<investment_fundsGetPayload<T>>>

    /**
     * Update one Investment_funds.
     * @param {investment_fundsUpdateArgs} args - Arguments to update one Investment_funds.
     * @example
     * // Update one Investment_funds
     * const investment_funds = await prisma.investment_funds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends investment_fundsUpdateArgs>(
      args: Subset<T, investment_fundsUpdateArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds>, Prisma__investment_fundsClient<investment_fundsGetPayload<T>>>

    /**
     * Delete zero or more Investment_funds.
     * @param {investment_fundsDeleteManyArgs} args - Arguments to filter Investment_funds to delete.
     * @example
     * // Delete a few Investment_funds
     * const { count } = await prisma.investment_funds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends investment_fundsDeleteManyArgs>(
      args?: Subset<T, investment_fundsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Investment_funds.
     * @param {investment_fundsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investment_funds
     * const investment_funds = await prisma.investment_funds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends investment_fundsUpdateManyArgs>(
      args: Subset<T, investment_fundsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Investment_funds.
     * @param {investment_fundsUpsertArgs} args - Arguments to update or create a Investment_funds.
     * @example
     * // Update or create a Investment_funds
     * const investment_funds = await prisma.investment_funds.upsert({
     *   create: {
     *     // ... data to create a Investment_funds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investment_funds we want to update
     *   }
     * })
    **/
    upsert<T extends investment_fundsUpsertArgs>(
      args: Subset<T, investment_fundsUpsertArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds>, Prisma__investment_fundsClient<investment_fundsGetPayload<T>>>

    /**
     * Find zero or one Investment_funds that matches the filter.
     * @param {FindUniqueinvestment_fundsArgs} args - Arguments to find a Investment_funds
     * @deprecated This will be deprecated please use prisma.investment_funds.findUnique
     * @example
     * // Get one Investment_funds
     * const investment_funds = await prisma.investment_funds.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueinvestment_fundsArgs>(
      args: Subset<T, FindUniqueinvestment_fundsArgs>
    ): CheckSelect<T, Prisma__investment_fundsClient<investment_funds | null>, Prisma__investment_fundsClient<investment_fundsGetPayload<T> | null>>

    /**
     * Count the number of Investment_funds.
     * @param {FindManyinvestment_fundsArgs} args - Arguments to filter Investment_funds to count.
     * @example
     * // Count the number of Investment_funds
     * const count = await prisma.investment_funds.count({
     *   where: {
     *     // ... the filter for the Investment_funds we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyinvestment_fundsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Investment_funds.
     * @param {AggregateInvestment_fundsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateInvestment_fundsArgs>(args: Subset<T, AggregateInvestment_fundsArgs>): Promise<GetInvestment_fundsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for investment_funds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__investment_fundsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    partner_infos<T extends FindManypartner_infosArgs = {}>(args?: Subset<T, FindManypartner_infosArgs>): CheckSelect<T, Promise<Array<partner_infos>>, Promise<Array<partner_infosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * investment_funds findUnique
   */
  export type FindUniqueinvestment_fundsArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * Filter, which investment_funds to fetch.
    **/
    where: investment_fundsWhereUniqueInput
  }


  /**
   * investment_funds findFirst
   */
  export type FindFirstinvestment_fundsArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * Filter, which investment_funds to fetch.
    **/
    where?: investment_fundsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_funds to fetch.
    **/
    orderBy?: Enumerable<investment_fundsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for investment_funds.
    **/
    cursor?: investment_fundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_funds from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_funds.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of investment_funds.
    **/
    distinct?: Enumerable<Investment_fundsScalarFieldEnum>
  }


  /**
   * investment_funds findMany
   */
  export type FindManyinvestment_fundsArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * Filter, which investment_funds to fetch.
    **/
    where?: investment_fundsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_funds to fetch.
    **/
    orderBy?: Enumerable<investment_fundsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing investment_funds.
    **/
    cursor?: investment_fundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_funds from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_funds.
    **/
    skip?: number
    distinct?: Enumerable<Investment_fundsScalarFieldEnum>
  }


  /**
   * investment_funds create
   */
  export type investment_fundsCreateArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * The data needed to create a investment_funds.
    **/
    data: investment_fundsCreateInput
  }


  /**
   * investment_funds update
   */
  export type investment_fundsUpdateArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * The data needed to update a investment_funds.
    **/
    data: investment_fundsUpdateInput
    /**
     * Choose, which investment_funds to update.
    **/
    where: investment_fundsWhereUniqueInput
  }


  /**
   * investment_funds updateMany
   */
  export type investment_fundsUpdateManyArgs = {
    data: investment_fundsUpdateManyMutationInput
    where?: investment_fundsWhereInput
  }


  /**
   * investment_funds upsert
   */
  export type investment_fundsUpsertArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * The filter to search for the investment_funds to update in case it exists.
    **/
    where: investment_fundsWhereUniqueInput
    /**
     * In case the investment_funds found by the `where` argument doesn't exist, create a new investment_funds with this data.
    **/
    create: investment_fundsCreateInput
    /**
     * In case the investment_funds was found with the provided `where` argument, update it with this data.
    **/
    update: investment_fundsUpdateInput
  }


  /**
   * investment_funds delete
   */
  export type investment_fundsDeleteArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
    /**
     * Filter which investment_funds to delete.
    **/
    where: investment_fundsWhereUniqueInput
  }


  /**
   * investment_funds deleteMany
   */
  export type investment_fundsDeleteManyArgs = {
    where?: investment_fundsWhereInput
  }


  /**
   * investment_funds without action
   */
  export type investment_fundsArgs = {
    /**
     * Select specific fields to fetch from the investment_funds
    **/
    select?: investment_fundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_fundsInclude | null
  }



  /**
   * Model investment_portfolio
   */


  export type AggregateInvestment_portfolio = {
    count: number | null
    avg: Investment_portfolioAvgAggregateOutputType | null
    sum: Investment_portfolioSumAggregateOutputType | null
    min: Investment_portfolioMinAggregateOutputType | null
    max: Investment_portfolioMaxAggregateOutputType | null
  }

  export type Investment_portfolioAvgAggregateOutputType = {
    id: number
    partner_id: number
  }

  export type Investment_portfolioSumAggregateOutputType = {
    id: number
    partner_id: number
  }

  export type Investment_portfolioMinAggregateOutputType = {
    id: number
    partner_id: number
    img_url: string | null
  }

  export type Investment_portfolioMaxAggregateOutputType = {
    id: number
    partner_id: number
    img_url: string | null
  }

  export type Investment_portfolioCountAggregateOutputType = {
    id: number
    partner_id: number
    img_url: number | null
    _all: number
  }


  export type Investment_portfolioAvgAggregateInputType = {
    id?: true
    partner_id?: true
  }

  export type Investment_portfolioSumAggregateInputType = {
    id?: true
    partner_id?: true
  }

  export type Investment_portfolioMinAggregateInputType = {
    id?: true
    partner_id?: true
    img_url?: true
  }

  export type Investment_portfolioMaxAggregateInputType = {
    id?: true
    partner_id?: true
    img_url?: true
  }

  export type Investment_portfolioCountAggregateInputType = {
    id?: true
    partner_id?: true
    img_url?: true
    _all?: true
  }

  export type AggregateInvestment_portfolioArgs = {
    /**
     * Filter which investment_portfolio to aggregate.
    **/
    where?: investment_portfolioWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_portfolios to fetch.
    **/
    orderBy?: Enumerable<investment_portfolioOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: investment_portfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_portfolios from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_portfolios.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned investment_portfolios
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Investment_portfolioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Investment_portfolioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Investment_portfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Investment_portfolioMaxAggregateInputType
  }

  export type GetInvestment_portfolioAggregateType<T extends AggregateInvestment_portfolioArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetInvestment_portfolioAggregateScalarType<T[P]>
  }

  export type GetInvestment_portfolioAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Investment_portfolioAvgAggregateOutputType ? Investment_portfolioAvgAggregateOutputType[P] : never
  }

    



  export type investment_portfolioSelect = {
    id?: boolean
    partner_id?: boolean
    img_url?: boolean
    partner_infos?: boolean | partner_infosArgs
  }

  export type investment_portfolioInclude = {
    partner_infos?: boolean | partner_infosArgs
  }

  export type investment_portfolioGetPayload<
    S extends boolean | null | undefined | investment_portfolioArgs,
    U = keyof S
      > = S extends true
        ? investment_portfolio
    : S extends undefined
    ? never
    : S extends investment_portfolioArgs | FindManyinvestment_portfolioArgs
    ?'include' extends U
    ? investment_portfolio  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'partner_infos'
        ? partner_infosGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof investment_portfolio ?investment_portfolio [P]
  : 
          P extends 'partner_infos'
        ? partner_infosGetPayload<S['select'][P]> : never
  } 
    : investment_portfolio
  : investment_portfolio


  export interface investment_portfolioDelegate {
    /**
     * Find zero or one Investment_portfolio that matches the filter.
     * @param {FindUniqueinvestment_portfolioArgs} args - Arguments to find a Investment_portfolio
     * @example
     * // Get one Investment_portfolio
     * const investment_portfolio = await prisma.investment_portfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueinvestment_portfolioArgs>(
      args: Subset<T, FindUniqueinvestment_portfolioArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio | null>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T> | null>>

    /**
     * Find the first Investment_portfolio that matches the filter.
     * @param {FindFirstinvestment_portfolioArgs} args - Arguments to find a Investment_portfolio
     * @example
     * // Get one Investment_portfolio
     * const investment_portfolio = await prisma.investment_portfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstinvestment_portfolioArgs>(
      args?: Subset<T, FindFirstinvestment_portfolioArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio | null>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T> | null>>

    /**
     * Find zero or more Investment_portfolios that matches the filter.
     * @param {FindManyinvestment_portfolioArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investment_portfolios
     * const investment_portfolios = await prisma.investment_portfolio.findMany()
     * 
     * // Get first 10 Investment_portfolios
     * const investment_portfolios = await prisma.investment_portfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investment_portfolioWithIdOnly = await prisma.investment_portfolio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyinvestment_portfolioArgs>(
      args?: Subset<T, FindManyinvestment_portfolioArgs>
    ): CheckSelect<T, Promise<Array<investment_portfolio>>, Promise<Array<investment_portfolioGetPayload<T>>>>

    /**
     * Create a Investment_portfolio.
     * @param {investment_portfolioCreateArgs} args - Arguments to create a Investment_portfolio.
     * @example
     * // Create one Investment_portfolio
     * const Investment_portfolio = await prisma.investment_portfolio.create({
     *   data: {
     *     // ... data to create a Investment_portfolio
     *   }
     * })
     * 
    **/
    create<T extends investment_portfolioCreateArgs>(
      args: Subset<T, investment_portfolioCreateArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T>>>

    /**
     * Delete a Investment_portfolio.
     * @param {investment_portfolioDeleteArgs} args - Arguments to delete one Investment_portfolio.
     * @example
     * // Delete one Investment_portfolio
     * const Investment_portfolio = await prisma.investment_portfolio.delete({
     *   where: {
     *     // ... filter to delete one Investment_portfolio
     *   }
     * })
     * 
    **/
    delete<T extends investment_portfolioDeleteArgs>(
      args: Subset<T, investment_portfolioDeleteArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T>>>

    /**
     * Update one Investment_portfolio.
     * @param {investment_portfolioUpdateArgs} args - Arguments to update one Investment_portfolio.
     * @example
     * // Update one Investment_portfolio
     * const investment_portfolio = await prisma.investment_portfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends investment_portfolioUpdateArgs>(
      args: Subset<T, investment_portfolioUpdateArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T>>>

    /**
     * Delete zero or more Investment_portfolios.
     * @param {investment_portfolioDeleteManyArgs} args - Arguments to filter Investment_portfolios to delete.
     * @example
     * // Delete a few Investment_portfolios
     * const { count } = await prisma.investment_portfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends investment_portfolioDeleteManyArgs>(
      args?: Subset<T, investment_portfolioDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Investment_portfolios.
     * @param {investment_portfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investment_portfolios
     * const investment_portfolio = await prisma.investment_portfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends investment_portfolioUpdateManyArgs>(
      args: Subset<T, investment_portfolioUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Investment_portfolio.
     * @param {investment_portfolioUpsertArgs} args - Arguments to update or create a Investment_portfolio.
     * @example
     * // Update or create a Investment_portfolio
     * const investment_portfolio = await prisma.investment_portfolio.upsert({
     *   create: {
     *     // ... data to create a Investment_portfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investment_portfolio we want to update
     *   }
     * })
    **/
    upsert<T extends investment_portfolioUpsertArgs>(
      args: Subset<T, investment_portfolioUpsertArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T>>>

    /**
     * Find zero or one Investment_portfolio that matches the filter.
     * @param {FindUniqueinvestment_portfolioArgs} args - Arguments to find a Investment_portfolio
     * @deprecated This will be deprecated please use prisma.investment_portfolio.findUnique
     * @example
     * // Get one Investment_portfolio
     * const investment_portfolio = await prisma.investment_portfolio.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueinvestment_portfolioArgs>(
      args: Subset<T, FindUniqueinvestment_portfolioArgs>
    ): CheckSelect<T, Prisma__investment_portfolioClient<investment_portfolio | null>, Prisma__investment_portfolioClient<investment_portfolioGetPayload<T> | null>>

    /**
     * Count the number of Investment_portfolios.
     * @param {FindManyinvestment_portfolioArgs} args - Arguments to filter Investment_portfolios to count.
     * @example
     * // Count the number of Investment_portfolios
     * const count = await prisma.investment_portfolio.count({
     *   where: {
     *     // ... the filter for the Investment_portfolios we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyinvestment_portfolioArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Investment_portfolio.
     * @param {AggregateInvestment_portfolioArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateInvestment_portfolioArgs>(args: Subset<T, AggregateInvestment_portfolioArgs>): Promise<GetInvestment_portfolioAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for investment_portfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__investment_portfolioClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    partner_infos<T extends partner_infosArgs = {}>(args?: Subset<T, partner_infosArgs>): CheckSelect<T, Prisma__partner_infosClient<partner_infos | null>, Prisma__partner_infosClient<partner_infosGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * investment_portfolio findUnique
   */
  export type FindUniqueinvestment_portfolioArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * Filter, which investment_portfolio to fetch.
    **/
    where: investment_portfolioWhereUniqueInput
  }


  /**
   * investment_portfolio findFirst
   */
  export type FindFirstinvestment_portfolioArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * Filter, which investment_portfolio to fetch.
    **/
    where?: investment_portfolioWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_portfolios to fetch.
    **/
    orderBy?: Enumerable<investment_portfolioOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for investment_portfolios.
    **/
    cursor?: investment_portfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_portfolios from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_portfolios.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of investment_portfolios.
    **/
    distinct?: Enumerable<Investment_portfolioScalarFieldEnum>
  }


  /**
   * investment_portfolio findMany
   */
  export type FindManyinvestment_portfolioArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * Filter, which investment_portfolios to fetch.
    **/
    where?: investment_portfolioWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_portfolios to fetch.
    **/
    orderBy?: Enumerable<investment_portfolioOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing investment_portfolios.
    **/
    cursor?: investment_portfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_portfolios from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_portfolios.
    **/
    skip?: number
    distinct?: Enumerable<Investment_portfolioScalarFieldEnum>
  }


  /**
   * investment_portfolio create
   */
  export type investment_portfolioCreateArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * The data needed to create a investment_portfolio.
    **/
    data: investment_portfolioCreateInput
  }


  /**
   * investment_portfolio update
   */
  export type investment_portfolioUpdateArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * The data needed to update a investment_portfolio.
    **/
    data: investment_portfolioUpdateInput
    /**
     * Choose, which investment_portfolio to update.
    **/
    where: investment_portfolioWhereUniqueInput
  }


  /**
   * investment_portfolio updateMany
   */
  export type investment_portfolioUpdateManyArgs = {
    data: investment_portfolioUpdateManyMutationInput
    where?: investment_portfolioWhereInput
  }


  /**
   * investment_portfolio upsert
   */
  export type investment_portfolioUpsertArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * The filter to search for the investment_portfolio to update in case it exists.
    **/
    where: investment_portfolioWhereUniqueInput
    /**
     * In case the investment_portfolio found by the `where` argument doesn't exist, create a new investment_portfolio with this data.
    **/
    create: investment_portfolioCreateInput
    /**
     * In case the investment_portfolio was found with the provided `where` argument, update it with this data.
    **/
    update: investment_portfolioUpdateInput
  }


  /**
   * investment_portfolio delete
   */
  export type investment_portfolioDeleteArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
    /**
     * Filter which investment_portfolio to delete.
    **/
    where: investment_portfolioWhereUniqueInput
  }


  /**
   * investment_portfolio deleteMany
   */
  export type investment_portfolioDeleteManyArgs = {
    where?: investment_portfolioWhereInput
  }


  /**
   * investment_portfolio without action
   */
  export type investment_portfolioArgs = {
    /**
     * Select specific fields to fetch from the investment_portfolio
    **/
    select?: investment_portfolioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_portfolioInclude | null
  }



  /**
   * Model investment_series
   */


  export type AggregateInvestment_series = {
    count: number | null
    avg: Investment_seriesAvgAggregateOutputType | null
    sum: Investment_seriesSumAggregateOutputType | null
    min: Investment_seriesMinAggregateOutputType | null
    max: Investment_seriesMaxAggregateOutputType | null
  }

  export type Investment_seriesAvgAggregateOutputType = {
    id: number
  }

  export type Investment_seriesSumAggregateOutputType = {
    id: number
  }

  export type Investment_seriesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Investment_seriesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Investment_seriesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Investment_seriesAvgAggregateInputType = {
    id?: true
  }

  export type Investment_seriesSumAggregateInputType = {
    id?: true
  }

  export type Investment_seriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Investment_seriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Investment_seriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateInvestment_seriesArgs = {
    /**
     * Filter which investment_series to aggregate.
    **/
    where?: investment_seriesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_series to fetch.
    **/
    orderBy?: Enumerable<investment_seriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: investment_seriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_series from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_series.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned investment_series
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Investment_seriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Investment_seriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Investment_seriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Investment_seriesMaxAggregateInputType
  }

  export type GetInvestment_seriesAggregateType<T extends AggregateInvestment_seriesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetInvestment_seriesAggregateScalarType<T[P]>
  }

  export type GetInvestment_seriesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Investment_seriesAvgAggregateOutputType ? Investment_seriesAvgAggregateOutputType[P] : never
  }

    



  export type investment_seriesSelect = {
    id?: boolean
    name?: boolean
    invested_from?: boolean | FindManyinvested_fromArgs
    invested_to?: boolean | FindManyinvested_toArgs
  }

  export type investment_seriesInclude = {
    invested_from?: boolean | FindManyinvested_fromArgs
    invested_to?: boolean | FindManyinvested_toArgs
  }

  export type investment_seriesGetPayload<
    S extends boolean | null | undefined | investment_seriesArgs,
    U = keyof S
      > = S extends true
        ? investment_series
    : S extends undefined
    ? never
    : S extends investment_seriesArgs | FindManyinvestment_seriesArgs
    ?'include' extends U
    ? investment_series  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'invested_from'
        ? Array < invested_fromGetPayload<S['include'][P]>>  :
        P extends 'invested_to'
        ? Array < invested_toGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof investment_series ?investment_series [P]
  : 
          P extends 'invested_from'
        ? Array < invested_fromGetPayload<S['select'][P]>>  :
        P extends 'invested_to'
        ? Array < invested_toGetPayload<S['select'][P]>>  : never
  } 
    : investment_series
  : investment_series


  export interface investment_seriesDelegate {
    /**
     * Find zero or one Investment_series that matches the filter.
     * @param {FindUniqueinvestment_seriesArgs} args - Arguments to find a Investment_series
     * @example
     * // Get one Investment_series
     * const investment_series = await prisma.investment_series.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueinvestment_seriesArgs>(
      args: Subset<T, FindUniqueinvestment_seriesArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series | null>, Prisma__investment_seriesClient<investment_seriesGetPayload<T> | null>>

    /**
     * Find the first Investment_series that matches the filter.
     * @param {FindFirstinvestment_seriesArgs} args - Arguments to find a Investment_series
     * @example
     * // Get one Investment_series
     * const investment_series = await prisma.investment_series.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstinvestment_seriesArgs>(
      args?: Subset<T, FindFirstinvestment_seriesArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series | null>, Prisma__investment_seriesClient<investment_seriesGetPayload<T> | null>>

    /**
     * Find zero or more Investment_series that matches the filter.
     * @param {FindManyinvestment_seriesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investment_series
     * const investment_series = await prisma.investment_series.findMany()
     * 
     * // Get first 10 Investment_series
     * const investment_series = await prisma.investment_series.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investment_seriesWithIdOnly = await prisma.investment_series.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyinvestment_seriesArgs>(
      args?: Subset<T, FindManyinvestment_seriesArgs>
    ): CheckSelect<T, Promise<Array<investment_series>>, Promise<Array<investment_seriesGetPayload<T>>>>

    /**
     * Create a Investment_series.
     * @param {investment_seriesCreateArgs} args - Arguments to create a Investment_series.
     * @example
     * // Create one Investment_series
     * const Investment_series = await prisma.investment_series.create({
     *   data: {
     *     // ... data to create a Investment_series
     *   }
     * })
     * 
    **/
    create<T extends investment_seriesCreateArgs>(
      args: Subset<T, investment_seriesCreateArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series>, Prisma__investment_seriesClient<investment_seriesGetPayload<T>>>

    /**
     * Delete a Investment_series.
     * @param {investment_seriesDeleteArgs} args - Arguments to delete one Investment_series.
     * @example
     * // Delete one Investment_series
     * const Investment_series = await prisma.investment_series.delete({
     *   where: {
     *     // ... filter to delete one Investment_series
     *   }
     * })
     * 
    **/
    delete<T extends investment_seriesDeleteArgs>(
      args: Subset<T, investment_seriesDeleteArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series>, Prisma__investment_seriesClient<investment_seriesGetPayload<T>>>

    /**
     * Update one Investment_series.
     * @param {investment_seriesUpdateArgs} args - Arguments to update one Investment_series.
     * @example
     * // Update one Investment_series
     * const investment_series = await prisma.investment_series.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends investment_seriesUpdateArgs>(
      args: Subset<T, investment_seriesUpdateArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series>, Prisma__investment_seriesClient<investment_seriesGetPayload<T>>>

    /**
     * Delete zero or more Investment_series.
     * @param {investment_seriesDeleteManyArgs} args - Arguments to filter Investment_series to delete.
     * @example
     * // Delete a few Investment_series
     * const { count } = await prisma.investment_series.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends investment_seriesDeleteManyArgs>(
      args?: Subset<T, investment_seriesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Investment_series.
     * @param {investment_seriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investment_series
     * const investment_series = await prisma.investment_series.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends investment_seriesUpdateManyArgs>(
      args: Subset<T, investment_seriesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Investment_series.
     * @param {investment_seriesUpsertArgs} args - Arguments to update or create a Investment_series.
     * @example
     * // Update or create a Investment_series
     * const investment_series = await prisma.investment_series.upsert({
     *   create: {
     *     // ... data to create a Investment_series
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investment_series we want to update
     *   }
     * })
    **/
    upsert<T extends investment_seriesUpsertArgs>(
      args: Subset<T, investment_seriesUpsertArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series>, Prisma__investment_seriesClient<investment_seriesGetPayload<T>>>

    /**
     * Find zero or one Investment_series that matches the filter.
     * @param {FindUniqueinvestment_seriesArgs} args - Arguments to find a Investment_series
     * @deprecated This will be deprecated please use prisma.investment_series.findUnique
     * @example
     * // Get one Investment_series
     * const investment_series = await prisma.investment_series.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueinvestment_seriesArgs>(
      args: Subset<T, FindUniqueinvestment_seriesArgs>
    ): CheckSelect<T, Prisma__investment_seriesClient<investment_series | null>, Prisma__investment_seriesClient<investment_seriesGetPayload<T> | null>>

    /**
     * Count the number of Investment_series.
     * @param {FindManyinvestment_seriesArgs} args - Arguments to filter Investment_series to count.
     * @example
     * // Count the number of Investment_series
     * const count = await prisma.investment_series.count({
     *   where: {
     *     // ... the filter for the Investment_series we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyinvestment_seriesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Investment_series.
     * @param {AggregateInvestment_seriesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateInvestment_seriesArgs>(args: Subset<T, AggregateInvestment_seriesArgs>): Promise<GetInvestment_seriesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for investment_series.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__investment_seriesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    invested_from<T extends FindManyinvested_fromArgs = {}>(args?: Subset<T, FindManyinvested_fromArgs>): CheckSelect<T, Promise<Array<invested_from>>, Promise<Array<invested_fromGetPayload<T>>>>;

    invested_to<T extends FindManyinvested_toArgs = {}>(args?: Subset<T, FindManyinvested_toArgs>): CheckSelect<T, Promise<Array<invested_to>>, Promise<Array<invested_toGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * investment_series findUnique
   */
  export type FindUniqueinvestment_seriesArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * Filter, which investment_series to fetch.
    **/
    where: investment_seriesWhereUniqueInput
  }


  /**
   * investment_series findFirst
   */
  export type FindFirstinvestment_seriesArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * Filter, which investment_series to fetch.
    **/
    where?: investment_seriesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_series to fetch.
    **/
    orderBy?: Enumerable<investment_seriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for investment_series.
    **/
    cursor?: investment_seriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_series from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_series.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of investment_series.
    **/
    distinct?: Enumerable<Investment_seriesScalarFieldEnum>
  }


  /**
   * investment_series findMany
   */
  export type FindManyinvestment_seriesArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * Filter, which investment_series to fetch.
    **/
    where?: investment_seriesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of investment_series to fetch.
    **/
    orderBy?: Enumerable<investment_seriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing investment_series.
    **/
    cursor?: investment_seriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investment_series from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investment_series.
    **/
    skip?: number
    distinct?: Enumerable<Investment_seriesScalarFieldEnum>
  }


  /**
   * investment_series create
   */
  export type investment_seriesCreateArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * The data needed to create a investment_series.
    **/
    data: investment_seriesCreateInput
  }


  /**
   * investment_series update
   */
  export type investment_seriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * The data needed to update a investment_series.
    **/
    data: investment_seriesUpdateInput
    /**
     * Choose, which investment_series to update.
    **/
    where: investment_seriesWhereUniqueInput
  }


  /**
   * investment_series updateMany
   */
  export type investment_seriesUpdateManyArgs = {
    data: investment_seriesUpdateManyMutationInput
    where?: investment_seriesWhereInput
  }


  /**
   * investment_series upsert
   */
  export type investment_seriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * The filter to search for the investment_series to update in case it exists.
    **/
    where: investment_seriesWhereUniqueInput
    /**
     * In case the investment_series found by the `where` argument doesn't exist, create a new investment_series with this data.
    **/
    create: investment_seriesCreateInput
    /**
     * In case the investment_series was found with the provided `where` argument, update it with this data.
    **/
    update: investment_seriesUpdateInput
  }


  /**
   * investment_series delete
   */
  export type investment_seriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
    /**
     * Filter which investment_series to delete.
    **/
    where: investment_seriesWhereUniqueInput
  }


  /**
   * investment_series deleteMany
   */
  export type investment_seriesDeleteManyArgs = {
    where?: investment_seriesWhereInput
  }


  /**
   * investment_series without action
   */
  export type investment_seriesArgs = {
    /**
     * Select specific fields to fetch from the investment_series
    **/
    select?: investment_seriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: investment_seriesInclude | null
  }



  /**
   * Model IR_requests
   */


  export type AggregateIR_requests = {
    count: number | null
    avg: IR_requestsAvgAggregateOutputType | null
    sum: IR_requestsSumAggregateOutputType | null
    min: IR_requestsMinAggregateOutputType | null
    max: IR_requestsMaxAggregateOutputType | null
  }

  export type IR_requestsAvgAggregateOutputType = {
    id: number
    startup_id: number
    partner_id: number
    document_id: number | null
    is_checked: number
    from_partner: number
  }

  export type IR_requestsSumAggregateOutputType = {
    id: number
    startup_id: number
    partner_id: number
    document_id: number | null
    is_checked: number
    from_partner: number
  }

  export type IR_requestsMinAggregateOutputType = {
    id: number
    startup_id: number
    partner_id: number
    document_id: number | null
    is_checked: number
    from_partner: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type IR_requestsMaxAggregateOutputType = {
    id: number
    startup_id: number
    partner_id: number
    document_id: number | null
    is_checked: number
    from_partner: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type IR_requestsCountAggregateOutputType = {
    id: number
    startup_id: number
    partner_id: number
    document_id: number | null
    is_checked: number
    from_partner: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type IR_requestsAvgAggregateInputType = {
    id?: true
    startup_id?: true
    partner_id?: true
    document_id?: true
    is_checked?: true
    from_partner?: true
  }

  export type IR_requestsSumAggregateInputType = {
    id?: true
    startup_id?: true
    partner_id?: true
    document_id?: true
    is_checked?: true
    from_partner?: true
  }

  export type IR_requestsMinAggregateInputType = {
    id?: true
    startup_id?: true
    partner_id?: true
    document_id?: true
    is_checked?: true
    from_partner?: true
    created_at?: true
    updated_at?: true
  }

  export type IR_requestsMaxAggregateInputType = {
    id?: true
    startup_id?: true
    partner_id?: true
    document_id?: true
    is_checked?: true
    from_partner?: true
    created_at?: true
    updated_at?: true
  }

  export type IR_requestsCountAggregateInputType = {
    id?: true
    startup_id?: true
    partner_id?: true
    document_id?: true
    is_checked?: true
    from_partner?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateIR_requestsArgs = {
    /**
     * Filter which IR_requests to aggregate.
    **/
    where?: IR_requestsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of IR_requests to fetch.
    **/
    orderBy?: Enumerable<IR_requestsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: IR_requestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IR_requests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IR_requests.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IR_requests
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: IR_requestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: IR_requestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: IR_requestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: IR_requestsMaxAggregateInputType
  }

  export type GetIR_requestsAggregateType<T extends AggregateIR_requestsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetIR_requestsAggregateScalarType<T[P]>
  }

  export type GetIR_requestsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof IR_requestsAvgAggregateOutputType ? IR_requestsAvgAggregateOutputType[P] : never
  }

    



  export type IR_requestsSelect = {
    id?: boolean
    startup_id?: boolean
    partner_id?: boolean
    document_id?: boolean
    is_checked?: boolean
    from_partner?: boolean
    created_at?: boolean
    updated_at?: boolean
    company_documents?: boolean | company_documentsArgs
    partner_infos?: boolean | partner_infosArgs
    companies?: boolean | companiesArgs
  }

  export type IR_requestsInclude = {
    company_documents?: boolean | company_documentsArgs
    partner_infos?: boolean | partner_infosArgs
    companies?: boolean | companiesArgs
  }

  export type IR_requestsGetPayload<
    S extends boolean | null | undefined | IR_requestsArgs,
    U = keyof S
      > = S extends true
        ? IR_requests
    : S extends undefined
    ? never
    : S extends IR_requestsArgs | FindManyIR_requestsArgs
    ?'include' extends U
    ? IR_requests  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'company_documents'
        ? company_documentsGetPayload<S['include'][P]> | null :
        P extends 'partner_infos'
        ? partner_infosGetPayload<S['include'][P]> :
        P extends 'companies'
        ? companiesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof IR_requests ?IR_requests [P]
  : 
          P extends 'company_documents'
        ? company_documentsGetPayload<S['select'][P]> | null :
        P extends 'partner_infos'
        ? partner_infosGetPayload<S['select'][P]> :
        P extends 'companies'
        ? companiesGetPayload<S['select'][P]> : never
  } 
    : IR_requests
  : IR_requests


  export interface IR_requestsDelegate {
    /**
     * Find zero or one IR_requests that matches the filter.
     * @param {FindUniqueIR_requestsArgs} args - Arguments to find a IR_requests
     * @example
     * // Get one IR_requests
     * const iR_requests = await prisma.iR_requests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueIR_requestsArgs>(
      args: Subset<T, FindUniqueIR_requestsArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests | null>, Prisma__IR_requestsClient<IR_requestsGetPayload<T> | null>>

    /**
     * Find the first IR_requests that matches the filter.
     * @param {FindFirstIR_requestsArgs} args - Arguments to find a IR_requests
     * @example
     * // Get one IR_requests
     * const iR_requests = await prisma.iR_requests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstIR_requestsArgs>(
      args?: Subset<T, FindFirstIR_requestsArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests | null>, Prisma__IR_requestsClient<IR_requestsGetPayload<T> | null>>

    /**
     * Find zero or more IR_requests that matches the filter.
     * @param {FindManyIR_requestsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IR_requests
     * const iR_requests = await prisma.iR_requests.findMany()
     * 
     * // Get first 10 IR_requests
     * const iR_requests = await prisma.iR_requests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iR_requestsWithIdOnly = await prisma.iR_requests.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyIR_requestsArgs>(
      args?: Subset<T, FindManyIR_requestsArgs>
    ): CheckSelect<T, Promise<Array<IR_requests>>, Promise<Array<IR_requestsGetPayload<T>>>>

    /**
     * Create a IR_requests.
     * @param {IR_requestsCreateArgs} args - Arguments to create a IR_requests.
     * @example
     * // Create one IR_requests
     * const IR_requests = await prisma.iR_requests.create({
     *   data: {
     *     // ... data to create a IR_requests
     *   }
     * })
     * 
    **/
    create<T extends IR_requestsCreateArgs>(
      args: Subset<T, IR_requestsCreateArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests>, Prisma__IR_requestsClient<IR_requestsGetPayload<T>>>

    /**
     * Delete a IR_requests.
     * @param {IR_requestsDeleteArgs} args - Arguments to delete one IR_requests.
     * @example
     * // Delete one IR_requests
     * const IR_requests = await prisma.iR_requests.delete({
     *   where: {
     *     // ... filter to delete one IR_requests
     *   }
     * })
     * 
    **/
    delete<T extends IR_requestsDeleteArgs>(
      args: Subset<T, IR_requestsDeleteArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests>, Prisma__IR_requestsClient<IR_requestsGetPayload<T>>>

    /**
     * Update one IR_requests.
     * @param {IR_requestsUpdateArgs} args - Arguments to update one IR_requests.
     * @example
     * // Update one IR_requests
     * const iR_requests = await prisma.iR_requests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IR_requestsUpdateArgs>(
      args: Subset<T, IR_requestsUpdateArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests>, Prisma__IR_requestsClient<IR_requestsGetPayload<T>>>

    /**
     * Delete zero or more IR_requests.
     * @param {IR_requestsDeleteManyArgs} args - Arguments to filter IR_requests to delete.
     * @example
     * // Delete a few IR_requests
     * const { count } = await prisma.iR_requests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IR_requestsDeleteManyArgs>(
      args?: Subset<T, IR_requestsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more IR_requests.
     * @param {IR_requestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IR_requests
     * const iR_requests = await prisma.iR_requests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IR_requestsUpdateManyArgs>(
      args: Subset<T, IR_requestsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one IR_requests.
     * @param {IR_requestsUpsertArgs} args - Arguments to update or create a IR_requests.
     * @example
     * // Update or create a IR_requests
     * const iR_requests = await prisma.iR_requests.upsert({
     *   create: {
     *     // ... data to create a IR_requests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IR_requests we want to update
     *   }
     * })
    **/
    upsert<T extends IR_requestsUpsertArgs>(
      args: Subset<T, IR_requestsUpsertArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests>, Prisma__IR_requestsClient<IR_requestsGetPayload<T>>>

    /**
     * Find zero or one IR_requests that matches the filter.
     * @param {FindUniqueIR_requestsArgs} args - Arguments to find a IR_requests
     * @deprecated This will be deprecated please use prisma.iR_requests.findUnique
     * @example
     * // Get one IR_requests
     * const iR_requests = await prisma.iR_requests.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueIR_requestsArgs>(
      args: Subset<T, FindUniqueIR_requestsArgs>
    ): CheckSelect<T, Prisma__IR_requestsClient<IR_requests | null>, Prisma__IR_requestsClient<IR_requestsGetPayload<T> | null>>

    /**
     * Count the number of IR_requests.
     * @param {FindManyIR_requestsArgs} args - Arguments to filter IR_requests to count.
     * @example
     * // Count the number of IR_requests
     * const count = await prisma.iR_requests.count({
     *   where: {
     *     // ... the filter for the IR_requests we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyIR_requestsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a IR_requests.
     * @param {AggregateIR_requestsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateIR_requestsArgs>(args: Subset<T, AggregateIR_requestsArgs>): Promise<GetIR_requestsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for IR_requests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IR_requestsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    company_documents<T extends company_documentsArgs = {}>(args?: Subset<T, company_documentsArgs>): CheckSelect<T, Prisma__company_documentsClient<company_documents | null>, Prisma__company_documentsClient<company_documentsGetPayload<T> | null>>;

    partner_infos<T extends partner_infosArgs = {}>(args?: Subset<T, partner_infosArgs>): CheckSelect<T, Prisma__partner_infosClient<partner_infos | null>, Prisma__partner_infosClient<partner_infosGetPayload<T> | null>>;

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * IR_requests findUnique
   */
  export type FindUniqueIR_requestsArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * Filter, which IR_requests to fetch.
    **/
    where: IR_requestsWhereUniqueInput
  }


  /**
   * IR_requests findFirst
   */
  export type FindFirstIR_requestsArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * Filter, which IR_requests to fetch.
    **/
    where?: IR_requestsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of IR_requests to fetch.
    **/
    orderBy?: Enumerable<IR_requestsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IR_requests.
    **/
    cursor?: IR_requestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IR_requests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IR_requests.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of IR_requests.
    **/
    distinct?: Enumerable<IR_requestsScalarFieldEnum>
  }


  /**
   * IR_requests findMany
   */
  export type FindManyIR_requestsArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * Filter, which IR_requests to fetch.
    **/
    where?: IR_requestsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of IR_requests to fetch.
    **/
    orderBy?: Enumerable<IR_requestsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IR_requests.
    **/
    cursor?: IR_requestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IR_requests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IR_requests.
    **/
    skip?: number
    distinct?: Enumerable<IR_requestsScalarFieldEnum>
  }


  /**
   * IR_requests create
   */
  export type IR_requestsCreateArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * The data needed to create a IR_requests.
    **/
    data: IR_requestsCreateInput
  }


  /**
   * IR_requests update
   */
  export type IR_requestsUpdateArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * The data needed to update a IR_requests.
    **/
    data: IR_requestsUpdateInput
    /**
     * Choose, which IR_requests to update.
    **/
    where: IR_requestsWhereUniqueInput
  }


  /**
   * IR_requests updateMany
   */
  export type IR_requestsUpdateManyArgs = {
    data: IR_requestsUpdateManyMutationInput
    where?: IR_requestsWhereInput
  }


  /**
   * IR_requests upsert
   */
  export type IR_requestsUpsertArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * The filter to search for the IR_requests to update in case it exists.
    **/
    where: IR_requestsWhereUniqueInput
    /**
     * In case the IR_requests found by the `where` argument doesn't exist, create a new IR_requests with this data.
    **/
    create: IR_requestsCreateInput
    /**
     * In case the IR_requests was found with the provided `where` argument, update it with this data.
    **/
    update: IR_requestsUpdateInput
  }


  /**
   * IR_requests delete
   */
  export type IR_requestsDeleteArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
    /**
     * Filter which IR_requests to delete.
    **/
    where: IR_requestsWhereUniqueInput
  }


  /**
   * IR_requests deleteMany
   */
  export type IR_requestsDeleteManyArgs = {
    where?: IR_requestsWhereInput
  }


  /**
   * IR_requests without action
   */
  export type IR_requestsArgs = {
    /**
     * Select specific fields to fetch from the IR_requests
    **/
    select?: IR_requestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: IR_requestsInclude | null
  }



  /**
   * Model participants
   */


  export type AggregateParticipants = {
    count: number | null
    avg: ParticipantsAvgAggregateOutputType | null
    sum: ParticipantsSumAggregateOutputType | null
    min: ParticipantsMinAggregateOutputType | null
    max: ParticipantsMaxAggregateOutputType | null
  }

  export type ParticipantsAvgAggregateOutputType = {
    id: number
    demoday_id: number
    order: number
    company_id: number
  }

  export type ParticipantsSumAggregateOutputType = {
    id: number
    demoday_id: number
    order: number
    company_id: number
  }

  export type ParticipantsMinAggregateOutputType = {
    id: number
    demoday_id: number
    order: number
    company_id: number
  }

  export type ParticipantsMaxAggregateOutputType = {
    id: number
    demoday_id: number
    order: number
    company_id: number
  }

  export type ParticipantsCountAggregateOutputType = {
    id: number
    demoday_id: number
    order: number
    company_id: number
    _all: number
  }


  export type ParticipantsAvgAggregateInputType = {
    id?: true
    demoday_id?: true
    order?: true
    company_id?: true
  }

  export type ParticipantsSumAggregateInputType = {
    id?: true
    demoday_id?: true
    order?: true
    company_id?: true
  }

  export type ParticipantsMinAggregateInputType = {
    id?: true
    demoday_id?: true
    order?: true
    company_id?: true
  }

  export type ParticipantsMaxAggregateInputType = {
    id?: true
    demoday_id?: true
    order?: true
    company_id?: true
  }

  export type ParticipantsCountAggregateInputType = {
    id?: true
    demoday_id?: true
    order?: true
    company_id?: true
    _all?: true
  }

  export type AggregateParticipantsArgs = {
    /**
     * Filter which participants to aggregate.
    **/
    where?: participantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of participants to fetch.
    **/
    orderBy?: Enumerable<participantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: participantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned participants
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ParticipantsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ParticipantsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ParticipantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ParticipantsMaxAggregateInputType
  }

  export type GetParticipantsAggregateType<T extends AggregateParticipantsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetParticipantsAggregateScalarType<T[P]>
  }

  export type GetParticipantsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ParticipantsAvgAggregateOutputType ? ParticipantsAvgAggregateOutputType[P] : never
  }

    



  export type participantsSelect = {
    id?: boolean
    demoday_id?: boolean
    order?: boolean
    company_id?: boolean
    companies?: boolean | companiesArgs
    demodays?: boolean | demodaysArgs
    votes?: boolean | FindManyvotesArgs
  }

  export type participantsInclude = {
    companies?: boolean | companiesArgs
    demodays?: boolean | demodaysArgs
    votes?: boolean | FindManyvotesArgs
  }

  export type participantsGetPayload<
    S extends boolean | null | undefined | participantsArgs,
    U = keyof S
      > = S extends true
        ? participants
    : S extends undefined
    ? never
    : S extends participantsArgs | FindManyparticipantsArgs
    ?'include' extends U
    ? participants  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'demodays'
        ? demodaysGetPayload<S['include'][P]> :
        P extends 'votes'
        ? Array < votesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof participants ?participants [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'demodays'
        ? demodaysGetPayload<S['select'][P]> :
        P extends 'votes'
        ? Array < votesGetPayload<S['select'][P]>>  : never
  } 
    : participants
  : participants


  export interface participantsDelegate {
    /**
     * Find zero or one Participants that matches the filter.
     * @param {FindUniqueparticipantsArgs} args - Arguments to find a Participants
     * @example
     * // Get one Participants
     * const participants = await prisma.participants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueparticipantsArgs>(
      args: Subset<T, FindUniqueparticipantsArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants | null>, Prisma__participantsClient<participantsGetPayload<T> | null>>

    /**
     * Find the first Participants that matches the filter.
     * @param {FindFirstparticipantsArgs} args - Arguments to find a Participants
     * @example
     * // Get one Participants
     * const participants = await prisma.participants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstparticipantsArgs>(
      args?: Subset<T, FindFirstparticipantsArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants | null>, Prisma__participantsClient<participantsGetPayload<T> | null>>

    /**
     * Find zero or more Participants that matches the filter.
     * @param {FindManyparticipantsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participants
     * const participants = await prisma.participants.findMany()
     * 
     * // Get first 10 Participants
     * const participants = await prisma.participants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const participantsWithIdOnly = await prisma.participants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyparticipantsArgs>(
      args?: Subset<T, FindManyparticipantsArgs>
    ): CheckSelect<T, Promise<Array<participants>>, Promise<Array<participantsGetPayload<T>>>>

    /**
     * Create a Participants.
     * @param {participantsCreateArgs} args - Arguments to create a Participants.
     * @example
     * // Create one Participants
     * const Participants = await prisma.participants.create({
     *   data: {
     *     // ... data to create a Participants
     *   }
     * })
     * 
    **/
    create<T extends participantsCreateArgs>(
      args: Subset<T, participantsCreateArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants>, Prisma__participantsClient<participantsGetPayload<T>>>

    /**
     * Delete a Participants.
     * @param {participantsDeleteArgs} args - Arguments to delete one Participants.
     * @example
     * // Delete one Participants
     * const Participants = await prisma.participants.delete({
     *   where: {
     *     // ... filter to delete one Participants
     *   }
     * })
     * 
    **/
    delete<T extends participantsDeleteArgs>(
      args: Subset<T, participantsDeleteArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants>, Prisma__participantsClient<participantsGetPayload<T>>>

    /**
     * Update one Participants.
     * @param {participantsUpdateArgs} args - Arguments to update one Participants.
     * @example
     * // Update one Participants
     * const participants = await prisma.participants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends participantsUpdateArgs>(
      args: Subset<T, participantsUpdateArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants>, Prisma__participantsClient<participantsGetPayload<T>>>

    /**
     * Delete zero or more Participants.
     * @param {participantsDeleteManyArgs} args - Arguments to filter Participants to delete.
     * @example
     * // Delete a few Participants
     * const { count } = await prisma.participants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends participantsDeleteManyArgs>(
      args?: Subset<T, participantsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Participants.
     * @param {participantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participants
     * const participants = await prisma.participants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends participantsUpdateManyArgs>(
      args: Subset<T, participantsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Participants.
     * @param {participantsUpsertArgs} args - Arguments to update or create a Participants.
     * @example
     * // Update or create a Participants
     * const participants = await prisma.participants.upsert({
     *   create: {
     *     // ... data to create a Participants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participants we want to update
     *   }
     * })
    **/
    upsert<T extends participantsUpsertArgs>(
      args: Subset<T, participantsUpsertArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants>, Prisma__participantsClient<participantsGetPayload<T>>>

    /**
     * Find zero or one Participants that matches the filter.
     * @param {FindUniqueparticipantsArgs} args - Arguments to find a Participants
     * @deprecated This will be deprecated please use prisma.participants.findUnique
     * @example
     * // Get one Participants
     * const participants = await prisma.participants.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueparticipantsArgs>(
      args: Subset<T, FindUniqueparticipantsArgs>
    ): CheckSelect<T, Prisma__participantsClient<participants | null>, Prisma__participantsClient<participantsGetPayload<T> | null>>

    /**
     * Count the number of Participants.
     * @param {FindManyparticipantsArgs} args - Arguments to filter Participants to count.
     * @example
     * // Count the number of Participants
     * const count = await prisma.participants.count({
     *   where: {
     *     // ... the filter for the Participants we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyparticipantsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Participants.
     * @param {AggregateParticipantsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateParticipantsArgs>(args: Subset<T, AggregateParticipantsArgs>): Promise<GetParticipantsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for participants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__participantsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    demodays<T extends demodaysArgs = {}>(args?: Subset<T, demodaysArgs>): CheckSelect<T, Prisma__demodaysClient<demodays | null>, Prisma__demodaysClient<demodaysGetPayload<T> | null>>;

    votes<T extends FindManyvotesArgs = {}>(args?: Subset<T, FindManyvotesArgs>): CheckSelect<T, Promise<Array<votes>>, Promise<Array<votesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * participants findUnique
   */
  export type FindUniqueparticipantsArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * Filter, which participants to fetch.
    **/
    where: participantsWhereUniqueInput
  }


  /**
   * participants findFirst
   */
  export type FindFirstparticipantsArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * Filter, which participants to fetch.
    **/
    where?: participantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of participants to fetch.
    **/
    orderBy?: Enumerable<participantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participants.
    **/
    cursor?: participantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of participants.
    **/
    distinct?: Enumerable<ParticipantsScalarFieldEnum>
  }


  /**
   * participants findMany
   */
  export type FindManyparticipantsArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * Filter, which participants to fetch.
    **/
    where?: participantsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of participants to fetch.
    **/
    orderBy?: Enumerable<participantsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing participants.
    **/
    cursor?: participantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participants.
    **/
    skip?: number
    distinct?: Enumerable<ParticipantsScalarFieldEnum>
  }


  /**
   * participants create
   */
  export type participantsCreateArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * The data needed to create a participants.
    **/
    data: participantsCreateInput
  }


  /**
   * participants update
   */
  export type participantsUpdateArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * The data needed to update a participants.
    **/
    data: participantsUpdateInput
    /**
     * Choose, which participants to update.
    **/
    where: participantsWhereUniqueInput
  }


  /**
   * participants updateMany
   */
  export type participantsUpdateManyArgs = {
    data: participantsUpdateManyMutationInput
    where?: participantsWhereInput
  }


  /**
   * participants upsert
   */
  export type participantsUpsertArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * The filter to search for the participants to update in case it exists.
    **/
    where: participantsWhereUniqueInput
    /**
     * In case the participants found by the `where` argument doesn't exist, create a new participants with this data.
    **/
    create: participantsCreateInput
    /**
     * In case the participants was found with the provided `where` argument, update it with this data.
    **/
    update: participantsUpdateInput
  }


  /**
   * participants delete
   */
  export type participantsDeleteArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
    /**
     * Filter which participants to delete.
    **/
    where: participantsWhereUniqueInput
  }


  /**
   * participants deleteMany
   */
  export type participantsDeleteManyArgs = {
    where?: participantsWhereInput
  }


  /**
   * participants without action
   */
  export type participantsArgs = {
    /**
     * Select specific fields to fetch from the participants
    **/
    select?: participantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: participantsInclude | null
  }



  /**
   * Model partner_infos
   */


  export type AggregatePartner_infos = {
    count: number | null
    avg: Partner_infosAvgAggregateOutputType | null
    sum: Partner_infosSumAggregateOutputType | null
    min: Partner_infosMinAggregateOutputType | null
    max: Partner_infosMaxAggregateOutputType | null
  }

  export type Partner_infosAvgAggregateOutputType = {
    id: number
    company_id: number
    interst_technology_id: number | null
    invested_total_id: number | null
    invested_counts: number | null
  }

  export type Partner_infosSumAggregateOutputType = {
    id: number
    company_id: number
    interst_technology_id: number | null
    invested_total_id: number | null
    invested_counts: number | null
  }

  export type Partner_infosMinAggregateOutputType = {
    id: number
    company_id: number
    interst_technology_id: number | null
    invested_total_id: number | null
    invested_counts: number | null
  }

  export type Partner_infosMaxAggregateOutputType = {
    id: number
    company_id: number
    interst_technology_id: number | null
    invested_total_id: number | null
    invested_counts: number | null
  }

  export type Partner_infosCountAggregateOutputType = {
    id: number
    company_id: number
    interst_technology_id: number | null
    invested_total_id: number | null
    invested_counts: number | null
    _all: number
  }


  export type Partner_infosAvgAggregateInputType = {
    id?: true
    company_id?: true
    interst_technology_id?: true
    invested_total_id?: true
    invested_counts?: true
  }

  export type Partner_infosSumAggregateInputType = {
    id?: true
    company_id?: true
    interst_technology_id?: true
    invested_total_id?: true
    invested_counts?: true
  }

  export type Partner_infosMinAggregateInputType = {
    id?: true
    company_id?: true
    interst_technology_id?: true
    invested_total_id?: true
    invested_counts?: true
  }

  export type Partner_infosMaxAggregateInputType = {
    id?: true
    company_id?: true
    interst_technology_id?: true
    invested_total_id?: true
    invested_counts?: true
  }

  export type Partner_infosCountAggregateInputType = {
    id?: true
    company_id?: true
    interst_technology_id?: true
    invested_total_id?: true
    invested_counts?: true
    _all?: true
  }

  export type AggregatePartner_infosArgs = {
    /**
     * Filter which partner_infos to aggregate.
    **/
    where?: partner_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_infos to fetch.
    **/
    orderBy?: Enumerable<partner_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: partner_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_infos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned partner_infos
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Partner_infosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Partner_infosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Partner_infosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Partner_infosMaxAggregateInputType
  }

  export type GetPartner_infosAggregateType<T extends AggregatePartner_infosArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPartner_infosAggregateScalarType<T[P]>
  }

  export type GetPartner_infosAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Partner_infosAvgAggregateOutputType ? Partner_infosAvgAggregateOutputType[P] : never
  }

    



  export type partner_infosSelect = {
    id?: boolean
    company_id?: boolean
    interst_technology_id?: boolean
    invested_total_id?: boolean
    invested_counts?: boolean
    companies?: boolean | companiesArgs
    technologies?: boolean | technologiesArgs
    investment_funds?: boolean | investment_fundsArgs
    investment_portfolio?: boolean | FindManyinvestment_portfolioArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
  }

  export type partner_infosInclude = {
    companies?: boolean | companiesArgs
    technologies?: boolean | technologiesArgs
    investment_funds?: boolean | investment_fundsArgs
    investment_portfolio?: boolean | FindManyinvestment_portfolioArgs
    IR_requests?: boolean | FindManyIR_requestsArgs
  }

  export type partner_infosGetPayload<
    S extends boolean | null | undefined | partner_infosArgs,
    U = keyof S
      > = S extends true
        ? partner_infos
    : S extends undefined
    ? never
    : S extends partner_infosArgs | FindManypartner_infosArgs
    ?'include' extends U
    ? partner_infos  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'technologies'
        ? technologiesGetPayload<S['include'][P]> | null :
        P extends 'investment_funds'
        ? investment_fundsGetPayload<S['include'][P]> | null :
        P extends 'investment_portfolio'
        ? Array < investment_portfolioGetPayload<S['include'][P]>>  :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof partner_infos ?partner_infos [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'technologies'
        ? technologiesGetPayload<S['select'][P]> | null :
        P extends 'investment_funds'
        ? investment_fundsGetPayload<S['select'][P]> | null :
        P extends 'investment_portfolio'
        ? Array < investment_portfolioGetPayload<S['select'][P]>>  :
        P extends 'IR_requests'
        ? Array < IR_requestsGetPayload<S['select'][P]>>  : never
  } 
    : partner_infos
  : partner_infos


  export interface partner_infosDelegate {
    /**
     * Find zero or one Partner_infos that matches the filter.
     * @param {FindUniquepartner_infosArgs} args - Arguments to find a Partner_infos
     * @example
     * // Get one Partner_infos
     * const partner_infos = await prisma.partner_infos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquepartner_infosArgs>(
      args: Subset<T, FindUniquepartner_infosArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos | null>, Prisma__partner_infosClient<partner_infosGetPayload<T> | null>>

    /**
     * Find the first Partner_infos that matches the filter.
     * @param {FindFirstpartner_infosArgs} args - Arguments to find a Partner_infos
     * @example
     * // Get one Partner_infos
     * const partner_infos = await prisma.partner_infos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstpartner_infosArgs>(
      args?: Subset<T, FindFirstpartner_infosArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos | null>, Prisma__partner_infosClient<partner_infosGetPayload<T> | null>>

    /**
     * Find zero or more Partner_infos that matches the filter.
     * @param {FindManypartner_infosArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partner_infos
     * const partner_infos = await prisma.partner_infos.findMany()
     * 
     * // Get first 10 Partner_infos
     * const partner_infos = await prisma.partner_infos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partner_infosWithIdOnly = await prisma.partner_infos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManypartner_infosArgs>(
      args?: Subset<T, FindManypartner_infosArgs>
    ): CheckSelect<T, Promise<Array<partner_infos>>, Promise<Array<partner_infosGetPayload<T>>>>

    /**
     * Create a Partner_infos.
     * @param {partner_infosCreateArgs} args - Arguments to create a Partner_infos.
     * @example
     * // Create one Partner_infos
     * const Partner_infos = await prisma.partner_infos.create({
     *   data: {
     *     // ... data to create a Partner_infos
     *   }
     * })
     * 
    **/
    create<T extends partner_infosCreateArgs>(
      args: Subset<T, partner_infosCreateArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos>, Prisma__partner_infosClient<partner_infosGetPayload<T>>>

    /**
     * Delete a Partner_infos.
     * @param {partner_infosDeleteArgs} args - Arguments to delete one Partner_infos.
     * @example
     * // Delete one Partner_infos
     * const Partner_infos = await prisma.partner_infos.delete({
     *   where: {
     *     // ... filter to delete one Partner_infos
     *   }
     * })
     * 
    **/
    delete<T extends partner_infosDeleteArgs>(
      args: Subset<T, partner_infosDeleteArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos>, Prisma__partner_infosClient<partner_infosGetPayload<T>>>

    /**
     * Update one Partner_infos.
     * @param {partner_infosUpdateArgs} args - Arguments to update one Partner_infos.
     * @example
     * // Update one Partner_infos
     * const partner_infos = await prisma.partner_infos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends partner_infosUpdateArgs>(
      args: Subset<T, partner_infosUpdateArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos>, Prisma__partner_infosClient<partner_infosGetPayload<T>>>

    /**
     * Delete zero or more Partner_infos.
     * @param {partner_infosDeleteManyArgs} args - Arguments to filter Partner_infos to delete.
     * @example
     * // Delete a few Partner_infos
     * const { count } = await prisma.partner_infos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends partner_infosDeleteManyArgs>(
      args?: Subset<T, partner_infosDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Partner_infos.
     * @param {partner_infosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partner_infos
     * const partner_infos = await prisma.partner_infos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends partner_infosUpdateManyArgs>(
      args: Subset<T, partner_infosUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Partner_infos.
     * @param {partner_infosUpsertArgs} args - Arguments to update or create a Partner_infos.
     * @example
     * // Update or create a Partner_infos
     * const partner_infos = await prisma.partner_infos.upsert({
     *   create: {
     *     // ... data to create a Partner_infos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner_infos we want to update
     *   }
     * })
    **/
    upsert<T extends partner_infosUpsertArgs>(
      args: Subset<T, partner_infosUpsertArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos>, Prisma__partner_infosClient<partner_infosGetPayload<T>>>

    /**
     * Find zero or one Partner_infos that matches the filter.
     * @param {FindUniquepartner_infosArgs} args - Arguments to find a Partner_infos
     * @deprecated This will be deprecated please use prisma.partner_infos.findUnique
     * @example
     * // Get one Partner_infos
     * const partner_infos = await prisma.partner_infos.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquepartner_infosArgs>(
      args: Subset<T, FindUniquepartner_infosArgs>
    ): CheckSelect<T, Prisma__partner_infosClient<partner_infos | null>, Prisma__partner_infosClient<partner_infosGetPayload<T> | null>>

    /**
     * Count the number of Partner_infos.
     * @param {FindManypartner_infosArgs} args - Arguments to filter Partner_infos to count.
     * @example
     * // Count the number of Partner_infos
     * const count = await prisma.partner_infos.count({
     *   where: {
     *     // ... the filter for the Partner_infos we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManypartner_infosArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Partner_infos.
     * @param {AggregatePartner_infosArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregatePartner_infosArgs>(args: Subset<T, AggregatePartner_infosArgs>): Promise<GetPartner_infosAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for partner_infos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__partner_infosClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    technologies<T extends technologiesArgs = {}>(args?: Subset<T, technologiesArgs>): CheckSelect<T, Prisma__technologiesClient<technologies | null>, Prisma__technologiesClient<technologiesGetPayload<T> | null>>;

    investment_funds<T extends investment_fundsArgs = {}>(args?: Subset<T, investment_fundsArgs>): CheckSelect<T, Prisma__investment_fundsClient<investment_funds | null>, Prisma__investment_fundsClient<investment_fundsGetPayload<T> | null>>;

    investment_portfolio<T extends FindManyinvestment_portfolioArgs = {}>(args?: Subset<T, FindManyinvestment_portfolioArgs>): CheckSelect<T, Promise<Array<investment_portfolio>>, Promise<Array<investment_portfolioGetPayload<T>>>>;

    IR_requests<T extends FindManyIR_requestsArgs = {}>(args?: Subset<T, FindManyIR_requestsArgs>): CheckSelect<T, Promise<Array<IR_requests>>, Promise<Array<IR_requestsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * partner_infos findUnique
   */
  export type FindUniquepartner_infosArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * Filter, which partner_infos to fetch.
    **/
    where: partner_infosWhereUniqueInput
  }


  /**
   * partner_infos findFirst
   */
  export type FindFirstpartner_infosArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * Filter, which partner_infos to fetch.
    **/
    where?: partner_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_infos to fetch.
    **/
    orderBy?: Enumerable<partner_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partner_infos.
    **/
    cursor?: partner_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_infos.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of partner_infos.
    **/
    distinct?: Enumerable<Partner_infosScalarFieldEnum>
  }


  /**
   * partner_infos findMany
   */
  export type FindManypartner_infosArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * Filter, which partner_infos to fetch.
    **/
    where?: partner_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_infos to fetch.
    **/
    orderBy?: Enumerable<partner_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing partner_infos.
    **/
    cursor?: partner_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_infos.
    **/
    skip?: number
    distinct?: Enumerable<Partner_infosScalarFieldEnum>
  }


  /**
   * partner_infos create
   */
  export type partner_infosCreateArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * The data needed to create a partner_infos.
    **/
    data: partner_infosCreateInput
  }


  /**
   * partner_infos update
   */
  export type partner_infosUpdateArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * The data needed to update a partner_infos.
    **/
    data: partner_infosUpdateInput
    /**
     * Choose, which partner_infos to update.
    **/
    where: partner_infosWhereUniqueInput
  }


  /**
   * partner_infos updateMany
   */
  export type partner_infosUpdateManyArgs = {
    data: partner_infosUpdateManyMutationInput
    where?: partner_infosWhereInput
  }


  /**
   * partner_infos upsert
   */
  export type partner_infosUpsertArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * The filter to search for the partner_infos to update in case it exists.
    **/
    where: partner_infosWhereUniqueInput
    /**
     * In case the partner_infos found by the `where` argument doesn't exist, create a new partner_infos with this data.
    **/
    create: partner_infosCreateInput
    /**
     * In case the partner_infos was found with the provided `where` argument, update it with this data.
    **/
    update: partner_infosUpdateInput
  }


  /**
   * partner_infos delete
   */
  export type partner_infosDeleteArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
    /**
     * Filter which partner_infos to delete.
    **/
    where: partner_infosWhereUniqueInput
  }


  /**
   * partner_infos deleteMany
   */
  export type partner_infosDeleteManyArgs = {
    where?: partner_infosWhereInput
  }


  /**
   * partner_infos without action
   */
  export type partner_infosArgs = {
    /**
     * Select specific fields to fetch from the partner_infos
    **/
    select?: partner_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_infosInclude | null
  }



  /**
   * Model partner_likes
   */


  export type AggregatePartner_likes = {
    count: number | null
    avg: Partner_likesAvgAggregateOutputType | null
    sum: Partner_likesSumAggregateOutputType | null
    min: Partner_likesMinAggregateOutputType | null
    max: Partner_likesMaxAggregateOutputType | null
  }

  export type Partner_likesAvgAggregateOutputType = {
    id: number
    company_likes_id: number
    company_liked_id: number
    is_liked: number
  }

  export type Partner_likesSumAggregateOutputType = {
    id: number
    company_likes_id: number
    company_liked_id: number
    is_liked: number
  }

  export type Partner_likesMinAggregateOutputType = {
    id: number
    company_likes_id: number
    company_liked_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Partner_likesMaxAggregateOutputType = {
    id: number
    company_likes_id: number
    company_liked_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Partner_likesCountAggregateOutputType = {
    id: number
    company_likes_id: number
    company_liked_id: number
    is_liked: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type Partner_likesAvgAggregateInputType = {
    id?: true
    company_likes_id?: true
    company_liked_id?: true
    is_liked?: true
  }

  export type Partner_likesSumAggregateInputType = {
    id?: true
    company_likes_id?: true
    company_liked_id?: true
    is_liked?: true
  }

  export type Partner_likesMinAggregateInputType = {
    id?: true
    company_likes_id?: true
    company_liked_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Partner_likesMaxAggregateInputType = {
    id?: true
    company_likes_id?: true
    company_liked_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Partner_likesCountAggregateInputType = {
    id?: true
    company_likes_id?: true
    company_liked_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregatePartner_likesArgs = {
    /**
     * Filter which partner_likes to aggregate.
    **/
    where?: partner_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_likes to fetch.
    **/
    orderBy?: Enumerable<partner_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: partner_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned partner_likes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Partner_likesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Partner_likesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Partner_likesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Partner_likesMaxAggregateInputType
  }

  export type GetPartner_likesAggregateType<T extends AggregatePartner_likesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPartner_likesAggregateScalarType<T[P]>
  }

  export type GetPartner_likesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Partner_likesAvgAggregateOutputType ? Partner_likesAvgAggregateOutputType[P] : never
  }

    



  export type partner_likesSelect = {
    id?: boolean
    company_likes_id?: boolean
    company_liked_id?: boolean
    is_liked?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies_companiesTopartner_likes_company_liked_id?: boolean | companiesArgs
    companies_companiesTopartner_likes_company_likes_id?: boolean | companiesArgs
  }

  export type partner_likesInclude = {
    companies_companiesTopartner_likes_company_liked_id?: boolean | companiesArgs
    companies_companiesTopartner_likes_company_likes_id?: boolean | companiesArgs
  }

  export type partner_likesGetPayload<
    S extends boolean | null | undefined | partner_likesArgs,
    U = keyof S
      > = S extends true
        ? partner_likes
    : S extends undefined
    ? never
    : S extends partner_likesArgs | FindManypartner_likesArgs
    ?'include' extends U
    ? partner_likes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies_companiesTopartner_likes_company_liked_id'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'companies_companiesTopartner_likes_company_likes_id'
        ? companiesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof partner_likes ?partner_likes [P]
  : 
          P extends 'companies_companiesTopartner_likes_company_liked_id'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'companies_companiesTopartner_likes_company_likes_id'
        ? companiesGetPayload<S['select'][P]> : never
  } 
    : partner_likes
  : partner_likes


  export interface partner_likesDelegate {
    /**
     * Find zero or one Partner_likes that matches the filter.
     * @param {FindUniquepartner_likesArgs} args - Arguments to find a Partner_likes
     * @example
     * // Get one Partner_likes
     * const partner_likes = await prisma.partner_likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquepartner_likesArgs>(
      args: Subset<T, FindUniquepartner_likesArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes | null>, Prisma__partner_likesClient<partner_likesGetPayload<T> | null>>

    /**
     * Find the first Partner_likes that matches the filter.
     * @param {FindFirstpartner_likesArgs} args - Arguments to find a Partner_likes
     * @example
     * // Get one Partner_likes
     * const partner_likes = await prisma.partner_likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstpartner_likesArgs>(
      args?: Subset<T, FindFirstpartner_likesArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes | null>, Prisma__partner_likesClient<partner_likesGetPayload<T> | null>>

    /**
     * Find zero or more Partner_likes that matches the filter.
     * @param {FindManypartner_likesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partner_likes
     * const partner_likes = await prisma.partner_likes.findMany()
     * 
     * // Get first 10 Partner_likes
     * const partner_likes = await prisma.partner_likes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partner_likesWithIdOnly = await prisma.partner_likes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManypartner_likesArgs>(
      args?: Subset<T, FindManypartner_likesArgs>
    ): CheckSelect<T, Promise<Array<partner_likes>>, Promise<Array<partner_likesGetPayload<T>>>>

    /**
     * Create a Partner_likes.
     * @param {partner_likesCreateArgs} args - Arguments to create a Partner_likes.
     * @example
     * // Create one Partner_likes
     * const Partner_likes = await prisma.partner_likes.create({
     *   data: {
     *     // ... data to create a Partner_likes
     *   }
     * })
     * 
    **/
    create<T extends partner_likesCreateArgs>(
      args: Subset<T, partner_likesCreateArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes>, Prisma__partner_likesClient<partner_likesGetPayload<T>>>

    /**
     * Delete a Partner_likes.
     * @param {partner_likesDeleteArgs} args - Arguments to delete one Partner_likes.
     * @example
     * // Delete one Partner_likes
     * const Partner_likes = await prisma.partner_likes.delete({
     *   where: {
     *     // ... filter to delete one Partner_likes
     *   }
     * })
     * 
    **/
    delete<T extends partner_likesDeleteArgs>(
      args: Subset<T, partner_likesDeleteArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes>, Prisma__partner_likesClient<partner_likesGetPayload<T>>>

    /**
     * Update one Partner_likes.
     * @param {partner_likesUpdateArgs} args - Arguments to update one Partner_likes.
     * @example
     * // Update one Partner_likes
     * const partner_likes = await prisma.partner_likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends partner_likesUpdateArgs>(
      args: Subset<T, partner_likesUpdateArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes>, Prisma__partner_likesClient<partner_likesGetPayload<T>>>

    /**
     * Delete zero or more Partner_likes.
     * @param {partner_likesDeleteManyArgs} args - Arguments to filter Partner_likes to delete.
     * @example
     * // Delete a few Partner_likes
     * const { count } = await prisma.partner_likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends partner_likesDeleteManyArgs>(
      args?: Subset<T, partner_likesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Partner_likes.
     * @param {partner_likesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partner_likes
     * const partner_likes = await prisma.partner_likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends partner_likesUpdateManyArgs>(
      args: Subset<T, partner_likesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Partner_likes.
     * @param {partner_likesUpsertArgs} args - Arguments to update or create a Partner_likes.
     * @example
     * // Update or create a Partner_likes
     * const partner_likes = await prisma.partner_likes.upsert({
     *   create: {
     *     // ... data to create a Partner_likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner_likes we want to update
     *   }
     * })
    **/
    upsert<T extends partner_likesUpsertArgs>(
      args: Subset<T, partner_likesUpsertArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes>, Prisma__partner_likesClient<partner_likesGetPayload<T>>>

    /**
     * Find zero or one Partner_likes that matches the filter.
     * @param {FindUniquepartner_likesArgs} args - Arguments to find a Partner_likes
     * @deprecated This will be deprecated please use prisma.partner_likes.findUnique
     * @example
     * // Get one Partner_likes
     * const partner_likes = await prisma.partner_likes.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquepartner_likesArgs>(
      args: Subset<T, FindUniquepartner_likesArgs>
    ): CheckSelect<T, Prisma__partner_likesClient<partner_likes | null>, Prisma__partner_likesClient<partner_likesGetPayload<T> | null>>

    /**
     * Count the number of Partner_likes.
     * @param {FindManypartner_likesArgs} args - Arguments to filter Partner_likes to count.
     * @example
     * // Count the number of Partner_likes
     * const count = await prisma.partner_likes.count({
     *   where: {
     *     // ... the filter for the Partner_likes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManypartner_likesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Partner_likes.
     * @param {AggregatePartner_likesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregatePartner_likesArgs>(args: Subset<T, AggregatePartner_likesArgs>): Promise<GetPartner_likesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for partner_likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__partner_likesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies_companiesTopartner_likes_company_liked_id<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    companies_companiesTopartner_likes_company_likes_id<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * partner_likes findUnique
   */
  export type FindUniquepartner_likesArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * Filter, which partner_likes to fetch.
    **/
    where: partner_likesWhereUniqueInput
  }


  /**
   * partner_likes findFirst
   */
  export type FindFirstpartner_likesArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * Filter, which partner_likes to fetch.
    **/
    where?: partner_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_likes to fetch.
    **/
    orderBy?: Enumerable<partner_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partner_likes.
    **/
    cursor?: partner_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_likes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of partner_likes.
    **/
    distinct?: Enumerable<Partner_likesScalarFieldEnum>
  }


  /**
   * partner_likes findMany
   */
  export type FindManypartner_likesArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * Filter, which partner_likes to fetch.
    **/
    where?: partner_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of partner_likes to fetch.
    **/
    orderBy?: Enumerable<partner_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing partner_likes.
    **/
    cursor?: partner_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partner_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partner_likes.
    **/
    skip?: number
    distinct?: Enumerable<Partner_likesScalarFieldEnum>
  }


  /**
   * partner_likes create
   */
  export type partner_likesCreateArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * The data needed to create a partner_likes.
    **/
    data: partner_likesCreateInput
  }


  /**
   * partner_likes update
   */
  export type partner_likesUpdateArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * The data needed to update a partner_likes.
    **/
    data: partner_likesUpdateInput
    /**
     * Choose, which partner_likes to update.
    **/
    where: partner_likesWhereUniqueInput
  }


  /**
   * partner_likes updateMany
   */
  export type partner_likesUpdateManyArgs = {
    data: partner_likesUpdateManyMutationInput
    where?: partner_likesWhereInput
  }


  /**
   * partner_likes upsert
   */
  export type partner_likesUpsertArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * The filter to search for the partner_likes to update in case it exists.
    **/
    where: partner_likesWhereUniqueInput
    /**
     * In case the partner_likes found by the `where` argument doesn't exist, create a new partner_likes with this data.
    **/
    create: partner_likesCreateInput
    /**
     * In case the partner_likes was found with the provided `where` argument, update it with this data.
    **/
    update: partner_likesUpdateInput
  }


  /**
   * partner_likes delete
   */
  export type partner_likesDeleteArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
    /**
     * Filter which partner_likes to delete.
    **/
    where: partner_likesWhereUniqueInput
  }


  /**
   * partner_likes deleteMany
   */
  export type partner_likesDeleteManyArgs = {
    where?: partner_likesWhereInput
  }


  /**
   * partner_likes without action
   */
  export type partner_likesArgs = {
    /**
     * Select specific fields to fetch from the partner_likes
    **/
    select?: partner_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: partner_likesInclude | null
  }



  /**
   * Model phone_auth
   */


  export type AggregatePhone_auth = {
    count: number | null
    avg: Phone_authAvgAggregateOutputType | null
    sum: Phone_authSumAggregateOutputType | null
    min: Phone_authMinAggregateOutputType | null
    max: Phone_authMaxAggregateOutputType | null
  }

  export type Phone_authAvgAggregateOutputType = {
    id: number
  }

  export type Phone_authSumAggregateOutputType = {
    id: number
  }

  export type Phone_authMinAggregateOutputType = {
    id: number
    phone_number: string | null
    auth_number: string | null
  }

  export type Phone_authMaxAggregateOutputType = {
    id: number
    phone_number: string | null
    auth_number: string | null
  }

  export type Phone_authCountAggregateOutputType = {
    id: number
    phone_number: number | null
    auth_number: number | null
    _all: number
  }


  export type Phone_authAvgAggregateInputType = {
    id?: true
  }

  export type Phone_authSumAggregateInputType = {
    id?: true
  }

  export type Phone_authMinAggregateInputType = {
    id?: true
    phone_number?: true
    auth_number?: true
  }

  export type Phone_authMaxAggregateInputType = {
    id?: true
    phone_number?: true
    auth_number?: true
  }

  export type Phone_authCountAggregateInputType = {
    id?: true
    phone_number?: true
    auth_number?: true
    _all?: true
  }

  export type AggregatePhone_authArgs = {
    /**
     * Filter which phone_auth to aggregate.
    **/
    where?: phone_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of phone_auths to fetch.
    **/
    orderBy?: Enumerable<phone_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: phone_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` phone_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` phone_auths.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned phone_auths
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Phone_authAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Phone_authSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Phone_authMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Phone_authMaxAggregateInputType
  }

  export type GetPhone_authAggregateType<T extends AggregatePhone_authArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPhone_authAggregateScalarType<T[P]>
  }

  export type GetPhone_authAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Phone_authAvgAggregateOutputType ? Phone_authAvgAggregateOutputType[P] : never
  }

    



  export type phone_authSelect = {
    id?: boolean
    phone_number?: boolean
    auth_number?: boolean
  }

  export type phone_authGetPayload<
    S extends boolean | null | undefined | phone_authArgs,
    U = keyof S
      > = S extends true
        ? phone_auth
    : S extends undefined
    ? never
    : S extends phone_authArgs | FindManyphone_authArgs
    ?'include' extends U
    ? phone_auth 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof phone_auth ?phone_auth [P]
  : 
     never
  } 
    : phone_auth
  : phone_auth


  export interface phone_authDelegate {
    /**
     * Find zero or one Phone_auth that matches the filter.
     * @param {FindUniquephone_authArgs} args - Arguments to find a Phone_auth
     * @example
     * // Get one Phone_auth
     * const phone_auth = await prisma.phone_auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquephone_authArgs>(
      args: Subset<T, FindUniquephone_authArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth | null>, Prisma__phone_authClient<phone_authGetPayload<T> | null>>

    /**
     * Find the first Phone_auth that matches the filter.
     * @param {FindFirstphone_authArgs} args - Arguments to find a Phone_auth
     * @example
     * // Get one Phone_auth
     * const phone_auth = await prisma.phone_auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstphone_authArgs>(
      args?: Subset<T, FindFirstphone_authArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth | null>, Prisma__phone_authClient<phone_authGetPayload<T> | null>>

    /**
     * Find zero or more Phone_auths that matches the filter.
     * @param {FindManyphone_authArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Phone_auths
     * const phone_auths = await prisma.phone_auth.findMany()
     * 
     * // Get first 10 Phone_auths
     * const phone_auths = await prisma.phone_auth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phone_authWithIdOnly = await prisma.phone_auth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyphone_authArgs>(
      args?: Subset<T, FindManyphone_authArgs>
    ): CheckSelect<T, Promise<Array<phone_auth>>, Promise<Array<phone_authGetPayload<T>>>>

    /**
     * Create a Phone_auth.
     * @param {phone_authCreateArgs} args - Arguments to create a Phone_auth.
     * @example
     * // Create one Phone_auth
     * const Phone_auth = await prisma.phone_auth.create({
     *   data: {
     *     // ... data to create a Phone_auth
     *   }
     * })
     * 
    **/
    create<T extends phone_authCreateArgs>(
      args: Subset<T, phone_authCreateArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth>, Prisma__phone_authClient<phone_authGetPayload<T>>>

    /**
     * Delete a Phone_auth.
     * @param {phone_authDeleteArgs} args - Arguments to delete one Phone_auth.
     * @example
     * // Delete one Phone_auth
     * const Phone_auth = await prisma.phone_auth.delete({
     *   where: {
     *     // ... filter to delete one Phone_auth
     *   }
     * })
     * 
    **/
    delete<T extends phone_authDeleteArgs>(
      args: Subset<T, phone_authDeleteArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth>, Prisma__phone_authClient<phone_authGetPayload<T>>>

    /**
     * Update one Phone_auth.
     * @param {phone_authUpdateArgs} args - Arguments to update one Phone_auth.
     * @example
     * // Update one Phone_auth
     * const phone_auth = await prisma.phone_auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends phone_authUpdateArgs>(
      args: Subset<T, phone_authUpdateArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth>, Prisma__phone_authClient<phone_authGetPayload<T>>>

    /**
     * Delete zero or more Phone_auths.
     * @param {phone_authDeleteManyArgs} args - Arguments to filter Phone_auths to delete.
     * @example
     * // Delete a few Phone_auths
     * const { count } = await prisma.phone_auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends phone_authDeleteManyArgs>(
      args?: Subset<T, phone_authDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Phone_auths.
     * @param {phone_authUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Phone_auths
     * const phone_auth = await prisma.phone_auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends phone_authUpdateManyArgs>(
      args: Subset<T, phone_authUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Phone_auth.
     * @param {phone_authUpsertArgs} args - Arguments to update or create a Phone_auth.
     * @example
     * // Update or create a Phone_auth
     * const phone_auth = await prisma.phone_auth.upsert({
     *   create: {
     *     // ... data to create a Phone_auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Phone_auth we want to update
     *   }
     * })
    **/
    upsert<T extends phone_authUpsertArgs>(
      args: Subset<T, phone_authUpsertArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth>, Prisma__phone_authClient<phone_authGetPayload<T>>>

    /**
     * Find zero or one Phone_auth that matches the filter.
     * @param {FindUniquephone_authArgs} args - Arguments to find a Phone_auth
     * @deprecated This will be deprecated please use prisma.phone_auth.findUnique
     * @example
     * // Get one Phone_auth
     * const phone_auth = await prisma.phone_auth.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquephone_authArgs>(
      args: Subset<T, FindUniquephone_authArgs>
    ): CheckSelect<T, Prisma__phone_authClient<phone_auth | null>, Prisma__phone_authClient<phone_authGetPayload<T> | null>>

    /**
     * Count the number of Phone_auths.
     * @param {FindManyphone_authArgs} args - Arguments to filter Phone_auths to count.
     * @example
     * // Count the number of Phone_auths
     * const count = await prisma.phone_auth.count({
     *   where: {
     *     // ... the filter for the Phone_auths we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyphone_authArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Phone_auth.
     * @param {AggregatePhone_authArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregatePhone_authArgs>(args: Subset<T, AggregatePhone_authArgs>): Promise<GetPhone_authAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for phone_auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__phone_authClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * phone_auth findUnique
   */
  export type FindUniquephone_authArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * Filter, which phone_auth to fetch.
    **/
    where: phone_authWhereUniqueInput
  }


  /**
   * phone_auth findFirst
   */
  export type FindFirstphone_authArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * Filter, which phone_auth to fetch.
    **/
    where?: phone_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of phone_auths to fetch.
    **/
    orderBy?: Enumerable<phone_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for phone_auths.
    **/
    cursor?: phone_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` phone_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` phone_auths.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of phone_auths.
    **/
    distinct?: Enumerable<Phone_authScalarFieldEnum>
  }


  /**
   * phone_auth findMany
   */
  export type FindManyphone_authArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * Filter, which phone_auths to fetch.
    **/
    where?: phone_authWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of phone_auths to fetch.
    **/
    orderBy?: Enumerable<phone_authOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing phone_auths.
    **/
    cursor?: phone_authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` phone_auths from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` phone_auths.
    **/
    skip?: number
    distinct?: Enumerable<Phone_authScalarFieldEnum>
  }


  /**
   * phone_auth create
   */
  export type phone_authCreateArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * The data needed to create a phone_auth.
    **/
    data: phone_authCreateInput
  }


  /**
   * phone_auth update
   */
  export type phone_authUpdateArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * The data needed to update a phone_auth.
    **/
    data: phone_authUpdateInput
    /**
     * Choose, which phone_auth to update.
    **/
    where: phone_authWhereUniqueInput
  }


  /**
   * phone_auth updateMany
   */
  export type phone_authUpdateManyArgs = {
    data: phone_authUpdateManyMutationInput
    where?: phone_authWhereInput
  }


  /**
   * phone_auth upsert
   */
  export type phone_authUpsertArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * The filter to search for the phone_auth to update in case it exists.
    **/
    where: phone_authWhereUniqueInput
    /**
     * In case the phone_auth found by the `where` argument doesn't exist, create a new phone_auth with this data.
    **/
    create: phone_authCreateInput
    /**
     * In case the phone_auth was found with the provided `where` argument, update it with this data.
    **/
    update: phone_authUpdateInput
  }


  /**
   * phone_auth delete
   */
  export type phone_authDeleteArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
    /**
     * Filter which phone_auth to delete.
    **/
    where: phone_authWhereUniqueInput
  }


  /**
   * phone_auth deleteMany
   */
  export type phone_authDeleteManyArgs = {
    where?: phone_authWhereInput
  }


  /**
   * phone_auth without action
   */
  export type phone_authArgs = {
    /**
     * Select specific fields to fetch from the phone_auth
    **/
    select?: phone_authSelect | null
  }



  /**
   * Model project_images
   */


  export type AggregateProject_images = {
    count: number | null
    avg: Project_imagesAvgAggregateOutputType | null
    sum: Project_imagesSumAggregateOutputType | null
    min: Project_imagesMinAggregateOutputType | null
    max: Project_imagesMaxAggregateOutputType | null
  }

  export type Project_imagesAvgAggregateOutputType = {
    id: number
    project_id: number
  }

  export type Project_imagesSumAggregateOutputType = {
    id: number
    project_id: number
  }

  export type Project_imagesMinAggregateOutputType = {
    id: number
    project_id: number
    img_url: string | null
  }

  export type Project_imagesMaxAggregateOutputType = {
    id: number
    project_id: number
    img_url: string | null
  }

  export type Project_imagesCountAggregateOutputType = {
    id: number
    project_id: number
    img_url: number | null
    _all: number
  }


  export type Project_imagesAvgAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type Project_imagesSumAggregateInputType = {
    id?: true
    project_id?: true
  }

  export type Project_imagesMinAggregateInputType = {
    id?: true
    project_id?: true
    img_url?: true
  }

  export type Project_imagesMaxAggregateInputType = {
    id?: true
    project_id?: true
    img_url?: true
  }

  export type Project_imagesCountAggregateInputType = {
    id?: true
    project_id?: true
    img_url?: true
    _all?: true
  }

  export type AggregateProject_imagesArgs = {
    /**
     * Filter which project_images to aggregate.
    **/
    where?: project_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_images to fetch.
    **/
    orderBy?: Enumerable<project_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: project_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned project_images
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Project_imagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Project_imagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Project_imagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Project_imagesMaxAggregateInputType
  }

  export type GetProject_imagesAggregateType<T extends AggregateProject_imagesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProject_imagesAggregateScalarType<T[P]>
  }

  export type GetProject_imagesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Project_imagesAvgAggregateOutputType ? Project_imagesAvgAggregateOutputType[P] : never
  }

    



  export type project_imagesSelect = {
    id?: boolean
    project_id?: boolean
    img_url?: boolean
    projects?: boolean | projectsArgs
  }

  export type project_imagesInclude = {
    projects?: boolean | projectsArgs
  }

  export type project_imagesGetPayload<
    S extends boolean | null | undefined | project_imagesArgs,
    U = keyof S
      > = S extends true
        ? project_images
    : S extends undefined
    ? never
    : S extends project_imagesArgs | FindManyproject_imagesArgs
    ?'include' extends U
    ? project_images  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'projects'
        ? projectsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof project_images ?project_images [P]
  : 
          P extends 'projects'
        ? projectsGetPayload<S['select'][P]> : never
  } 
    : project_images
  : project_images


  export interface project_imagesDelegate {
    /**
     * Find zero or one Project_images that matches the filter.
     * @param {FindUniqueproject_imagesArgs} args - Arguments to find a Project_images
     * @example
     * // Get one Project_images
     * const project_images = await prisma.project_images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueproject_imagesArgs>(
      args: Subset<T, FindUniqueproject_imagesArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images | null>, Prisma__project_imagesClient<project_imagesGetPayload<T> | null>>

    /**
     * Find the first Project_images that matches the filter.
     * @param {FindFirstproject_imagesArgs} args - Arguments to find a Project_images
     * @example
     * // Get one Project_images
     * const project_images = await prisma.project_images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstproject_imagesArgs>(
      args?: Subset<T, FindFirstproject_imagesArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images | null>, Prisma__project_imagesClient<project_imagesGetPayload<T> | null>>

    /**
     * Find zero or more Project_images that matches the filter.
     * @param {FindManyproject_imagesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Project_images
     * const project_images = await prisma.project_images.findMany()
     * 
     * // Get first 10 Project_images
     * const project_images = await prisma.project_images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const project_imagesWithIdOnly = await prisma.project_images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyproject_imagesArgs>(
      args?: Subset<T, FindManyproject_imagesArgs>
    ): CheckSelect<T, Promise<Array<project_images>>, Promise<Array<project_imagesGetPayload<T>>>>

    /**
     * Create a Project_images.
     * @param {project_imagesCreateArgs} args - Arguments to create a Project_images.
     * @example
     * // Create one Project_images
     * const Project_images = await prisma.project_images.create({
     *   data: {
     *     // ... data to create a Project_images
     *   }
     * })
     * 
    **/
    create<T extends project_imagesCreateArgs>(
      args: Subset<T, project_imagesCreateArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images>, Prisma__project_imagesClient<project_imagesGetPayload<T>>>

    /**
     * Delete a Project_images.
     * @param {project_imagesDeleteArgs} args - Arguments to delete one Project_images.
     * @example
     * // Delete one Project_images
     * const Project_images = await prisma.project_images.delete({
     *   where: {
     *     // ... filter to delete one Project_images
     *   }
     * })
     * 
    **/
    delete<T extends project_imagesDeleteArgs>(
      args: Subset<T, project_imagesDeleteArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images>, Prisma__project_imagesClient<project_imagesGetPayload<T>>>

    /**
     * Update one Project_images.
     * @param {project_imagesUpdateArgs} args - Arguments to update one Project_images.
     * @example
     * // Update one Project_images
     * const project_images = await prisma.project_images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends project_imagesUpdateArgs>(
      args: Subset<T, project_imagesUpdateArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images>, Prisma__project_imagesClient<project_imagesGetPayload<T>>>

    /**
     * Delete zero or more Project_images.
     * @param {project_imagesDeleteManyArgs} args - Arguments to filter Project_images to delete.
     * @example
     * // Delete a few Project_images
     * const { count } = await prisma.project_images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends project_imagesDeleteManyArgs>(
      args?: Subset<T, project_imagesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Project_images.
     * @param {project_imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Project_images
     * const project_images = await prisma.project_images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends project_imagesUpdateManyArgs>(
      args: Subset<T, project_imagesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Project_images.
     * @param {project_imagesUpsertArgs} args - Arguments to update or create a Project_images.
     * @example
     * // Update or create a Project_images
     * const project_images = await prisma.project_images.upsert({
     *   create: {
     *     // ... data to create a Project_images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project_images we want to update
     *   }
     * })
    **/
    upsert<T extends project_imagesUpsertArgs>(
      args: Subset<T, project_imagesUpsertArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images>, Prisma__project_imagesClient<project_imagesGetPayload<T>>>

    /**
     * Find zero or one Project_images that matches the filter.
     * @param {FindUniqueproject_imagesArgs} args - Arguments to find a Project_images
     * @deprecated This will be deprecated please use prisma.project_images.findUnique
     * @example
     * // Get one Project_images
     * const project_images = await prisma.project_images.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueproject_imagesArgs>(
      args: Subset<T, FindUniqueproject_imagesArgs>
    ): CheckSelect<T, Prisma__project_imagesClient<project_images | null>, Prisma__project_imagesClient<project_imagesGetPayload<T> | null>>

    /**
     * Count the number of Project_images.
     * @param {FindManyproject_imagesArgs} args - Arguments to filter Project_images to count.
     * @example
     * // Count the number of Project_images
     * const count = await prisma.project_images.count({
     *   where: {
     *     // ... the filter for the Project_images we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyproject_imagesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Project_images.
     * @param {AggregateProject_imagesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProject_imagesArgs>(args: Subset<T, AggregateProject_imagesArgs>): Promise<GetProject_imagesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for project_images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__project_imagesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projects<T extends projectsArgs = {}>(args?: Subset<T, projectsArgs>): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * project_images findUnique
   */
  export type FindUniqueproject_imagesArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * Filter, which project_images to fetch.
    **/
    where: project_imagesWhereUniqueInput
  }


  /**
   * project_images findFirst
   */
  export type FindFirstproject_imagesArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * Filter, which project_images to fetch.
    **/
    where?: project_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_images to fetch.
    **/
    orderBy?: Enumerable<project_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for project_images.
    **/
    cursor?: project_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_images.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of project_images.
    **/
    distinct?: Enumerable<Project_imagesScalarFieldEnum>
  }


  /**
   * project_images findMany
   */
  export type FindManyproject_imagesArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * Filter, which project_images to fetch.
    **/
    where?: project_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_images to fetch.
    **/
    orderBy?: Enumerable<project_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing project_images.
    **/
    cursor?: project_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_images.
    **/
    skip?: number
    distinct?: Enumerable<Project_imagesScalarFieldEnum>
  }


  /**
   * project_images create
   */
  export type project_imagesCreateArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * The data needed to create a project_images.
    **/
    data: project_imagesCreateInput
  }


  /**
   * project_images update
   */
  export type project_imagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * The data needed to update a project_images.
    **/
    data: project_imagesUpdateInput
    /**
     * Choose, which project_images to update.
    **/
    where: project_imagesWhereUniqueInput
  }


  /**
   * project_images updateMany
   */
  export type project_imagesUpdateManyArgs = {
    data: project_imagesUpdateManyMutationInput
    where?: project_imagesWhereInput
  }


  /**
   * project_images upsert
   */
  export type project_imagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * The filter to search for the project_images to update in case it exists.
    **/
    where: project_imagesWhereUniqueInput
    /**
     * In case the project_images found by the `where` argument doesn't exist, create a new project_images with this data.
    **/
    create: project_imagesCreateInput
    /**
     * In case the project_images was found with the provided `where` argument, update it with this data.
    **/
    update: project_imagesUpdateInput
  }


  /**
   * project_images delete
   */
  export type project_imagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
    /**
     * Filter which project_images to delete.
    **/
    where: project_imagesWhereUniqueInput
  }


  /**
   * project_images deleteMany
   */
  export type project_imagesDeleteManyArgs = {
    where?: project_imagesWhereInput
  }


  /**
   * project_images without action
   */
  export type project_imagesArgs = {
    /**
     * Select specific fields to fetch from the project_images
    **/
    select?: project_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_imagesInclude | null
  }



  /**
   * Model project_likes
   */


  export type AggregateProject_likes = {
    count: number | null
    avg: Project_likesAvgAggregateOutputType | null
    sum: Project_likesSumAggregateOutputType | null
    min: Project_likesMinAggregateOutputType | null
    max: Project_likesMaxAggregateOutputType | null
  }

  export type Project_likesAvgAggregateOutputType = {
    id: number
    comapny_id: number
    project_id: number
    is_liked: number
  }

  export type Project_likesSumAggregateOutputType = {
    id: number
    comapny_id: number
    project_id: number
    is_liked: number
  }

  export type Project_likesMinAggregateOutputType = {
    id: number
    comapny_id: number
    project_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Project_likesMaxAggregateOutputType = {
    id: number
    comapny_id: number
    project_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Project_likesCountAggregateOutputType = {
    id: number
    comapny_id: number
    project_id: number
    is_liked: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type Project_likesAvgAggregateInputType = {
    id?: true
    comapny_id?: true
    project_id?: true
    is_liked?: true
  }

  export type Project_likesSumAggregateInputType = {
    id?: true
    comapny_id?: true
    project_id?: true
    is_liked?: true
  }

  export type Project_likesMinAggregateInputType = {
    id?: true
    comapny_id?: true
    project_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Project_likesMaxAggregateInputType = {
    id?: true
    comapny_id?: true
    project_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Project_likesCountAggregateInputType = {
    id?: true
    comapny_id?: true
    project_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateProject_likesArgs = {
    /**
     * Filter which project_likes to aggregate.
    **/
    where?: project_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_likes to fetch.
    **/
    orderBy?: Enumerable<project_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: project_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned project_likes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Project_likesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Project_likesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Project_likesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Project_likesMaxAggregateInputType
  }

  export type GetProject_likesAggregateType<T extends AggregateProject_likesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProject_likesAggregateScalarType<T[P]>
  }

  export type GetProject_likesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Project_likesAvgAggregateOutputType ? Project_likesAvgAggregateOutputType[P] : never
  }

    



  export type project_likesSelect = {
    id?: boolean
    comapny_id?: boolean
    project_id?: boolean
    is_liked?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type project_likesInclude = {
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type project_likesGetPayload<
    S extends boolean | null | undefined | project_likesArgs,
    U = keyof S
      > = S extends true
        ? project_likes
    : S extends undefined
    ? never
    : S extends project_likesArgs | FindManyproject_likesArgs
    ?'include' extends U
    ? project_likes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof project_likes ?project_likes [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['select'][P]> : never
  } 
    : project_likes
  : project_likes


  export interface project_likesDelegate {
    /**
     * Find zero or one Project_likes that matches the filter.
     * @param {FindUniqueproject_likesArgs} args - Arguments to find a Project_likes
     * @example
     * // Get one Project_likes
     * const project_likes = await prisma.project_likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueproject_likesArgs>(
      args: Subset<T, FindUniqueproject_likesArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes | null>, Prisma__project_likesClient<project_likesGetPayload<T> | null>>

    /**
     * Find the first Project_likes that matches the filter.
     * @param {FindFirstproject_likesArgs} args - Arguments to find a Project_likes
     * @example
     * // Get one Project_likes
     * const project_likes = await prisma.project_likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstproject_likesArgs>(
      args?: Subset<T, FindFirstproject_likesArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes | null>, Prisma__project_likesClient<project_likesGetPayload<T> | null>>

    /**
     * Find zero or more Project_likes that matches the filter.
     * @param {FindManyproject_likesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Project_likes
     * const project_likes = await prisma.project_likes.findMany()
     * 
     * // Get first 10 Project_likes
     * const project_likes = await prisma.project_likes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const project_likesWithIdOnly = await prisma.project_likes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyproject_likesArgs>(
      args?: Subset<T, FindManyproject_likesArgs>
    ): CheckSelect<T, Promise<Array<project_likes>>, Promise<Array<project_likesGetPayload<T>>>>

    /**
     * Create a Project_likes.
     * @param {project_likesCreateArgs} args - Arguments to create a Project_likes.
     * @example
     * // Create one Project_likes
     * const Project_likes = await prisma.project_likes.create({
     *   data: {
     *     // ... data to create a Project_likes
     *   }
     * })
     * 
    **/
    create<T extends project_likesCreateArgs>(
      args: Subset<T, project_likesCreateArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes>, Prisma__project_likesClient<project_likesGetPayload<T>>>

    /**
     * Delete a Project_likes.
     * @param {project_likesDeleteArgs} args - Arguments to delete one Project_likes.
     * @example
     * // Delete one Project_likes
     * const Project_likes = await prisma.project_likes.delete({
     *   where: {
     *     // ... filter to delete one Project_likes
     *   }
     * })
     * 
    **/
    delete<T extends project_likesDeleteArgs>(
      args: Subset<T, project_likesDeleteArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes>, Prisma__project_likesClient<project_likesGetPayload<T>>>

    /**
     * Update one Project_likes.
     * @param {project_likesUpdateArgs} args - Arguments to update one Project_likes.
     * @example
     * // Update one Project_likes
     * const project_likes = await prisma.project_likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends project_likesUpdateArgs>(
      args: Subset<T, project_likesUpdateArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes>, Prisma__project_likesClient<project_likesGetPayload<T>>>

    /**
     * Delete zero or more Project_likes.
     * @param {project_likesDeleteManyArgs} args - Arguments to filter Project_likes to delete.
     * @example
     * // Delete a few Project_likes
     * const { count } = await prisma.project_likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends project_likesDeleteManyArgs>(
      args?: Subset<T, project_likesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Project_likes.
     * @param {project_likesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Project_likes
     * const project_likes = await prisma.project_likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends project_likesUpdateManyArgs>(
      args: Subset<T, project_likesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Project_likes.
     * @param {project_likesUpsertArgs} args - Arguments to update or create a Project_likes.
     * @example
     * // Update or create a Project_likes
     * const project_likes = await prisma.project_likes.upsert({
     *   create: {
     *     // ... data to create a Project_likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project_likes we want to update
     *   }
     * })
    **/
    upsert<T extends project_likesUpsertArgs>(
      args: Subset<T, project_likesUpsertArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes>, Prisma__project_likesClient<project_likesGetPayload<T>>>

    /**
     * Find zero or one Project_likes that matches the filter.
     * @param {FindUniqueproject_likesArgs} args - Arguments to find a Project_likes
     * @deprecated This will be deprecated please use prisma.project_likes.findUnique
     * @example
     * // Get one Project_likes
     * const project_likes = await prisma.project_likes.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueproject_likesArgs>(
      args: Subset<T, FindUniqueproject_likesArgs>
    ): CheckSelect<T, Prisma__project_likesClient<project_likes | null>, Prisma__project_likesClient<project_likesGetPayload<T> | null>>

    /**
     * Count the number of Project_likes.
     * @param {FindManyproject_likesArgs} args - Arguments to filter Project_likes to count.
     * @example
     * // Count the number of Project_likes
     * const count = await prisma.project_likes.count({
     *   where: {
     *     // ... the filter for the Project_likes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyproject_likesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Project_likes.
     * @param {AggregateProject_likesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProject_likesArgs>(args: Subset<T, AggregateProject_likesArgs>): Promise<GetProject_likesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for project_likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__project_likesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    projects<T extends projectsArgs = {}>(args?: Subset<T, projectsArgs>): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * project_likes findUnique
   */
  export type FindUniqueproject_likesArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * Filter, which project_likes to fetch.
    **/
    where: project_likesWhereUniqueInput
  }


  /**
   * project_likes findFirst
   */
  export type FindFirstproject_likesArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * Filter, which project_likes to fetch.
    **/
    where?: project_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_likes to fetch.
    **/
    orderBy?: Enumerable<project_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for project_likes.
    **/
    cursor?: project_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_likes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of project_likes.
    **/
    distinct?: Enumerable<Project_likesScalarFieldEnum>
  }


  /**
   * project_likes findMany
   */
  export type FindManyproject_likesArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * Filter, which project_likes to fetch.
    **/
    where?: project_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of project_likes to fetch.
    **/
    orderBy?: Enumerable<project_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing project_likes.
    **/
    cursor?: project_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` project_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` project_likes.
    **/
    skip?: number
    distinct?: Enumerable<Project_likesScalarFieldEnum>
  }


  /**
   * project_likes create
   */
  export type project_likesCreateArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * The data needed to create a project_likes.
    **/
    data: project_likesCreateInput
  }


  /**
   * project_likes update
   */
  export type project_likesUpdateArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * The data needed to update a project_likes.
    **/
    data: project_likesUpdateInput
    /**
     * Choose, which project_likes to update.
    **/
    where: project_likesWhereUniqueInput
  }


  /**
   * project_likes updateMany
   */
  export type project_likesUpdateManyArgs = {
    data: project_likesUpdateManyMutationInput
    where?: project_likesWhereInput
  }


  /**
   * project_likes upsert
   */
  export type project_likesUpsertArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * The filter to search for the project_likes to update in case it exists.
    **/
    where: project_likesWhereUniqueInput
    /**
     * In case the project_likes found by the `where` argument doesn't exist, create a new project_likes with this data.
    **/
    create: project_likesCreateInput
    /**
     * In case the project_likes was found with the provided `where` argument, update it with this data.
    **/
    update: project_likesUpdateInput
  }


  /**
   * project_likes delete
   */
  export type project_likesDeleteArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
    /**
     * Filter which project_likes to delete.
    **/
    where: project_likesWhereUniqueInput
  }


  /**
   * project_likes deleteMany
   */
  export type project_likesDeleteManyArgs = {
    where?: project_likesWhereInput
  }


  /**
   * project_likes without action
   */
  export type project_likesArgs = {
    /**
     * Select specific fields to fetch from the project_likes
    **/
    select?: project_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: project_likesInclude | null
  }



  /**
   * Model projects
   */


  export type AggregateProjects = {
    count: number | null
    avg: ProjectsAvgAggregateOutputType | null
    sum: ProjectsSumAggregateOutputType | null
    min: ProjectsMinAggregateOutputType | null
    max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    id: number
    host: number | null
    sector_id: number | null
    is_opened: number
    hit: number
  }

  export type ProjectsSumAggregateOutputType = {
    id: number
    host: number | null
    sector_id: number | null
    is_opened: number
    hit: number
  }

  export type ProjectsMinAggregateOutputType = {
    id: number
    name: string | null
    introduction: string | null
    host: number | null
    due_date: Date | null
    sector_id: number | null
    eligibility: string | null
    outline: string | null
    detail: string | null
    application_method: string | null
    caution: string | null
    contact: string | null
    is_opened: number
    hit: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: number
    name: string | null
    introduction: string | null
    host: number | null
    due_date: Date | null
    sector_id: number | null
    eligibility: string | null
    outline: string | null
    detail: string | null
    application_method: string | null
    caution: string | null
    contact: string | null
    is_opened: number
    hit: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    name: number | null
    introduction: number | null
    host: number | null
    due_date: number | null
    sector_id: number | null
    eligibility: number | null
    outline: number | null
    detail: number | null
    application_method: number | null
    caution: number | null
    contact: number | null
    is_opened: number
    hit: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    id?: true
    host?: true
    sector_id?: true
    is_opened?: true
    hit?: true
  }

  export type ProjectsSumAggregateInputType = {
    id?: true
    host?: true
    sector_id?: true
    is_opened?: true
    hit?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    name?: true
    introduction?: true
    host?: true
    due_date?: true
    sector_id?: true
    eligibility?: true
    outline?: true
    detail?: true
    application_method?: true
    caution?: true
    contact?: true
    is_opened?: true
    hit?: true
    created_at?: true
    updated_at?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    name?: true
    introduction?: true
    host?: true
    due_date?: true
    sector_id?: true
    eligibility?: true
    outline?: true
    detail?: true
    application_method?: true
    caution?: true
    contact?: true
    is_opened?: true
    hit?: true
    created_at?: true
    updated_at?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    name?: true
    introduction?: true
    host?: true
    due_date?: true
    sector_id?: true
    eligibility?: true
    outline?: true
    detail?: true
    application_method?: true
    caution?: true
    contact?: true
    is_opened?: true
    hit?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateProjectsArgs = {
    /**
     * Filter which projects to aggregate.
    **/
    where?: projectsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of projects to fetch.
    **/
    orderBy?: Enumerable<projectsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projects
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends AggregateProjectsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProjectsAggregateScalarType<T[P]>
  }

  export type GetProjectsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProjectsAvgAggregateOutputType ? ProjectsAvgAggregateOutputType[P] : never
  }

    



  export type projectsSelect = {
    id?: boolean
    name?: boolean
    introduction?: boolean
    host?: boolean
    due_date?: boolean
    sector_id?: boolean
    eligibility?: boolean
    outline?: boolean
    detail?: boolean
    application_method?: boolean
    caution?: boolean
    contact?: boolean
    is_opened?: boolean
    hit?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | companiesArgs
    sectors?: boolean | sectorsArgs
    applicants?: boolean | FindManyapplicantsArgs
    project_images?: boolean | FindManyproject_imagesArgs
    project_likes?: boolean | FindManyproject_likesArgs
    recent_views_project?: boolean | FindManyrecent_views_projectArgs
    required_documents?: boolean | FindManyrequired_documentsArgs
  }

  export type projectsInclude = {
    companies?: boolean | companiesArgs
    sectors?: boolean | sectorsArgs
    applicants?: boolean | FindManyapplicantsArgs
    project_images?: boolean | FindManyproject_imagesArgs
    project_likes?: boolean | FindManyproject_likesArgs
    recent_views_project?: boolean | FindManyrecent_views_projectArgs
    required_documents?: boolean | FindManyrequired_documentsArgs
  }

  export type projectsGetPayload<
    S extends boolean | null | undefined | projectsArgs,
    U = keyof S
      > = S extends true
        ? projects
    : S extends undefined
    ? never
    : S extends projectsArgs | FindManyprojectsArgs
    ?'include' extends U
    ? projects  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> | null :
        P extends 'sectors'
        ? sectorsGetPayload<S['include'][P]> | null :
        P extends 'applicants'
        ? Array < applicantsGetPayload<S['include'][P]>>  :
        P extends 'project_images'
        ? Array < project_imagesGetPayload<S['include'][P]>>  :
        P extends 'project_likes'
        ? Array < project_likesGetPayload<S['include'][P]>>  :
        P extends 'recent_views_project'
        ? Array < recent_views_projectGetPayload<S['include'][P]>>  :
        P extends 'required_documents'
        ? Array < required_documentsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof projects ?projects [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> | null :
        P extends 'sectors'
        ? sectorsGetPayload<S['select'][P]> | null :
        P extends 'applicants'
        ? Array < applicantsGetPayload<S['select'][P]>>  :
        P extends 'project_images'
        ? Array < project_imagesGetPayload<S['select'][P]>>  :
        P extends 'project_likes'
        ? Array < project_likesGetPayload<S['select'][P]>>  :
        P extends 'recent_views_project'
        ? Array < recent_views_projectGetPayload<S['select'][P]>>  :
        P extends 'required_documents'
        ? Array < required_documentsGetPayload<S['select'][P]>>  : never
  } 
    : projects
  : projects


  export interface projectsDelegate {
    /**
     * Find zero or one Projects that matches the filter.
     * @param {FindUniqueprojectsArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueprojectsArgs>(
      args: Subset<T, FindUniqueprojectsArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>

    /**
     * Find the first Projects that matches the filter.
     * @param {FindFirstprojectsArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstprojectsArgs>(
      args?: Subset<T, FindFirstprojectsArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {FindManyprojectsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyprojectsArgs>(
      args?: Subset<T, FindManyprojectsArgs>
    ): CheckSelect<T, Promise<Array<projects>>, Promise<Array<projectsGetPayload<T>>>>

    /**
     * Create a Projects.
     * @param {projectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
    **/
    create<T extends projectsCreateArgs>(
      args: Subset<T, projectsCreateArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects>, Prisma__projectsClient<projectsGetPayload<T>>>

    /**
     * Delete a Projects.
     * @param {projectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
    **/
    delete<T extends projectsDeleteArgs>(
      args: Subset<T, projectsDeleteArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects>, Prisma__projectsClient<projectsGetPayload<T>>>

    /**
     * Update one Projects.
     * @param {projectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends projectsUpdateArgs>(
      args: Subset<T, projectsUpdateArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects>, Prisma__projectsClient<projectsGetPayload<T>>>

    /**
     * Delete zero or more Projects.
     * @param {projectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends projectsDeleteManyArgs>(
      args?: Subset<T, projectsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Projects.
     * @param {projectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends projectsUpdateManyArgs>(
      args: Subset<T, projectsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {projectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
    **/
    upsert<T extends projectsUpsertArgs>(
      args: Subset<T, projectsUpsertArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects>, Prisma__projectsClient<projectsGetPayload<T>>>

    /**
     * Find zero or one Projects that matches the filter.
     * @param {FindUniqueprojectsArgs} args - Arguments to find a Projects
     * @deprecated This will be deprecated please use prisma.projects.findUnique
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueprojectsArgs>(
      args: Subset<T, FindUniqueprojectsArgs>
    ): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>

    /**
     * Count the number of Projects.
     * @param {FindManyprojectsArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyprojectsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Projects.
     * @param {AggregateProjectsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProjectsArgs>(args: Subset<T, AggregateProjectsArgs>): Promise<GetProjectsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__projectsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    sectors<T extends sectorsArgs = {}>(args?: Subset<T, sectorsArgs>): CheckSelect<T, Prisma__sectorsClient<sectors | null>, Prisma__sectorsClient<sectorsGetPayload<T> | null>>;

    applicants<T extends FindManyapplicantsArgs = {}>(args?: Subset<T, FindManyapplicantsArgs>): CheckSelect<T, Promise<Array<applicants>>, Promise<Array<applicantsGetPayload<T>>>>;

    project_images<T extends FindManyproject_imagesArgs = {}>(args?: Subset<T, FindManyproject_imagesArgs>): CheckSelect<T, Promise<Array<project_images>>, Promise<Array<project_imagesGetPayload<T>>>>;

    project_likes<T extends FindManyproject_likesArgs = {}>(args?: Subset<T, FindManyproject_likesArgs>): CheckSelect<T, Promise<Array<project_likes>>, Promise<Array<project_likesGetPayload<T>>>>;

    recent_views_project<T extends FindManyrecent_views_projectArgs = {}>(args?: Subset<T, FindManyrecent_views_projectArgs>): CheckSelect<T, Promise<Array<recent_views_project>>, Promise<Array<recent_views_projectGetPayload<T>>>>;

    required_documents<T extends FindManyrequired_documentsArgs = {}>(args?: Subset<T, FindManyrequired_documentsArgs>): CheckSelect<T, Promise<Array<required_documents>>, Promise<Array<required_documentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * projects findUnique
   */
  export type FindUniqueprojectsArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * Filter, which projects to fetch.
    **/
    where: projectsWhereUniqueInput
  }


  /**
   * projects findFirst
   */
  export type FindFirstprojectsArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * Filter, which projects to fetch.
    **/
    where?: projectsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of projects to fetch.
    **/
    orderBy?: Enumerable<projectsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
    **/
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of projects.
    **/
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }


  /**
   * projects findMany
   */
  export type FindManyprojectsArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * Filter, which projects to fetch.
    **/
    where?: projectsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of projects to fetch.
    **/
    orderBy?: Enumerable<projectsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projects.
    **/
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
    **/
    skip?: number
    distinct?: Enumerable<ProjectsScalarFieldEnum>
  }


  /**
   * projects create
   */
  export type projectsCreateArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * The data needed to create a projects.
    **/
    data: projectsCreateInput
  }


  /**
   * projects update
   */
  export type projectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * The data needed to update a projects.
    **/
    data: projectsUpdateInput
    /**
     * Choose, which projects to update.
    **/
    where: projectsWhereUniqueInput
  }


  /**
   * projects updateMany
   */
  export type projectsUpdateManyArgs = {
    data: projectsUpdateManyMutationInput
    where?: projectsWhereInput
  }


  /**
   * projects upsert
   */
  export type projectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * The filter to search for the projects to update in case it exists.
    **/
    where: projectsWhereUniqueInput
    /**
     * In case the projects found by the `where` argument doesn't exist, create a new projects with this data.
    **/
    create: projectsCreateInput
    /**
     * In case the projects was found with the provided `where` argument, update it with this data.
    **/
    update: projectsUpdateInput
  }


  /**
   * projects delete
   */
  export type projectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
    /**
     * Filter which projects to delete.
    **/
    where: projectsWhereUniqueInput
  }


  /**
   * projects deleteMany
   */
  export type projectsDeleteManyArgs = {
    where?: projectsWhereInput
  }


  /**
   * projects without action
   */
  export type projectsArgs = {
    /**
     * Select specific fields to fetch from the projects
    **/
    select?: projectsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: projectsInclude | null
  }



  /**
   * Model questions
   */


  export type AggregateQuestions = {
    count: number | null
    avg: QuestionsAvgAggregateOutputType | null
    sum: QuestionsSumAggregateOutputType | null
    min: QuestionsMinAggregateOutputType | null
    max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number
    company_id: number
    user_id: number
    demoday_id: number
  }

  export type QuestionsSumAggregateOutputType = {
    id: number
    company_id: number
    user_id: number
    demoday_id: number
  }

  export type QuestionsMinAggregateOutputType = {
    id: number
    content: string | null
    company_id: number
    user_id: number
    created_at: Date | null
    updated_at: Date | null
    demoday_id: number
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number
    content: string | null
    company_id: number
    user_id: number
    created_at: Date | null
    updated_at: Date | null
    demoday_id: number
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    content: number | null
    company_id: number
    user_id: number
    created_at: number | null
    updated_at: number | null
    demoday_id: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
    company_id?: true
    user_id?: true
    demoday_id?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
    company_id?: true
    user_id?: true
    demoday_id?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    content?: true
    company_id?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    demoday_id?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    content?: true
    company_id?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    demoday_id?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    content?: true
    company_id?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    demoday_id?: true
    _all?: true
  }

  export type AggregateQuestionsArgs = {
    /**
     * Filter which questions to aggregate.
    **/
    where?: questionsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of questions to fetch.
    **/
    orderBy?: Enumerable<questionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends AggregateQuestionsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetQuestionsAggregateScalarType<T[P]>
  }

  export type GetQuestionsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof QuestionsAvgAggregateOutputType ? QuestionsAvgAggregateOutputType[P] : never
  }

    



  export type questionsSelect = {
    id?: boolean
    content?: boolean
    company_id?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    demoday_id?: boolean
    companies?: boolean | companiesArgs
    demodays?: boolean | demodaysArgs
    users?: boolean | usersArgs
    answers?: boolean | FindManyanswersArgs
  }

  export type questionsInclude = {
    companies?: boolean | companiesArgs
    demodays?: boolean | demodaysArgs
    users?: boolean | usersArgs
    answers?: boolean | FindManyanswersArgs
  }

  export type questionsGetPayload<
    S extends boolean | null | undefined | questionsArgs,
    U = keyof S
      > = S extends true
        ? questions
    : S extends undefined
    ? never
    : S extends questionsArgs | FindManyquestionsArgs
    ?'include' extends U
    ? questions  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'demodays'
        ? demodaysGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> :
        P extends 'answers'
        ? Array < answersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof questions ?questions [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'demodays'
        ? demodaysGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> :
        P extends 'answers'
        ? Array < answersGetPayload<S['select'][P]>>  : never
  } 
    : questions
  : questions


  export interface questionsDelegate {
    /**
     * Find zero or one Questions that matches the filter.
     * @param {FindUniquequestionsArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquequestionsArgs>(
      args: Subset<T, FindUniquequestionsArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions | null>, Prisma__questionsClient<questionsGetPayload<T> | null>>

    /**
     * Find the first Questions that matches the filter.
     * @param {FindFirstquestionsArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstquestionsArgs>(
      args?: Subset<T, FindFirstquestionsArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions | null>, Prisma__questionsClient<questionsGetPayload<T> | null>>

    /**
     * Find zero or more Questions that matches the filter.
     * @param {FindManyquestionsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyquestionsArgs>(
      args?: Subset<T, FindManyquestionsArgs>
    ): CheckSelect<T, Promise<Array<questions>>, Promise<Array<questionsGetPayload<T>>>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends questionsCreateArgs>(
      args: Subset<T, questionsCreateArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends questionsDeleteArgs>(
      args: Subset<T, questionsDeleteArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionsUpdateArgs>(
      args: Subset<T, questionsUpdateArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionsDeleteManyArgs>(
      args?: Subset<T, questionsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Questions.
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionsUpdateManyArgs>(
      args: Subset<T, questionsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends questionsUpsertArgs>(
      args: Subset<T, questionsUpsertArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Find zero or one Questions that matches the filter.
     * @param {FindUniquequestionsArgs} args - Arguments to find a Questions
     * @deprecated This will be deprecated please use prisma.questions.findUnique
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquequestionsArgs>(
      args: Subset<T, FindUniquequestionsArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions | null>, Prisma__questionsClient<questionsGetPayload<T> | null>>

    /**
     * Count the number of Questions.
     * @param {FindManyquestionsArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyquestionsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Questions.
     * @param {AggregateQuestionsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateQuestionsArgs>(args: Subset<T, AggregateQuestionsArgs>): Promise<GetQuestionsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__questionsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    demodays<T extends demodaysArgs = {}>(args?: Subset<T, demodaysArgs>): CheckSelect<T, Prisma__demodaysClient<demodays | null>, Prisma__demodaysClient<demodaysGetPayload<T> | null>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    answers<T extends FindManyanswersArgs = {}>(args?: Subset<T, FindManyanswersArgs>): CheckSelect<T, Promise<Array<answers>>, Promise<Array<answersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * questions findUnique
   */
  export type FindUniquequestionsArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
    **/
    where: questionsWhereUniqueInput
  }


  /**
   * questions findFirst
   */
  export type FindFirstquestionsArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
    **/
    where?: questionsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of questions to fetch.
    **/
    orderBy?: Enumerable<questionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of questions.
    **/
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }


  /**
   * questions findMany
   */
  export type FindManyquestionsArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
    **/
    where?: questionsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of questions to fetch.
    **/
    orderBy?: Enumerable<questionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
    **/
    skip?: number
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }


  /**
   * questions create
   */
  export type questionsCreateArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * The data needed to create a questions.
    **/
    data: questionsCreateInput
  }


  /**
   * questions update
   */
  export type questionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * The data needed to update a questions.
    **/
    data: questionsUpdateInput
    /**
     * Choose, which questions to update.
    **/
    where: questionsWhereUniqueInput
  }


  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs = {
    data: questionsUpdateManyMutationInput
    where?: questionsWhereInput
  }


  /**
   * questions upsert
   */
  export type questionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * The filter to search for the questions to update in case it exists.
    **/
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
    **/
    create: questionsCreateInput
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
    **/
    update: questionsUpdateInput
  }


  /**
   * questions delete
   */
  export type questionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
    /**
     * Filter which questions to delete.
    **/
    where: questionsWhereUniqueInput
  }


  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs = {
    where?: questionsWhereInput
  }


  /**
   * questions without action
   */
  export type questionsArgs = {
    /**
     * Select specific fields to fetch from the questions
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: questionsInclude | null
  }



  /**
   * Model recent_views_project
   */


  export type AggregateRecent_views_project = {
    count: number | null
    avg: Recent_views_projectAvgAggregateOutputType | null
    sum: Recent_views_projectSumAggregateOutputType | null
    min: Recent_views_projectMinAggregateOutputType | null
    max: Recent_views_projectMaxAggregateOutputType | null
  }

  export type Recent_views_projectAvgAggregateOutputType = {
    id: number
    project_id: number
    company_id: number
  }

  export type Recent_views_projectSumAggregateOutputType = {
    id: number
    project_id: number
    company_id: number
  }

  export type Recent_views_projectMinAggregateOutputType = {
    id: number
    project_id: number
    company_id: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Recent_views_projectMaxAggregateOutputType = {
    id: number
    project_id: number
    company_id: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Recent_views_projectCountAggregateOutputType = {
    id: number
    project_id: number
    company_id: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type Recent_views_projectAvgAggregateInputType = {
    id?: true
    project_id?: true
    company_id?: true
  }

  export type Recent_views_projectSumAggregateInputType = {
    id?: true
    project_id?: true
    company_id?: true
  }

  export type Recent_views_projectMinAggregateInputType = {
    id?: true
    project_id?: true
    company_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Recent_views_projectMaxAggregateInputType = {
    id?: true
    project_id?: true
    company_id?: true
    created_at?: true
    updated_at?: true
  }

  export type Recent_views_projectCountAggregateInputType = {
    id?: true
    project_id?: true
    company_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateRecent_views_projectArgs = {
    /**
     * Filter which recent_views_project to aggregate.
    **/
    where?: recent_views_projectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of recent_views_projects to fetch.
    **/
    orderBy?: Enumerable<recent_views_projectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: recent_views_projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recent_views_projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recent_views_projects.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recent_views_projects
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Recent_views_projectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Recent_views_projectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Recent_views_projectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Recent_views_projectMaxAggregateInputType
  }

  export type GetRecent_views_projectAggregateType<T extends AggregateRecent_views_projectArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRecent_views_projectAggregateScalarType<T[P]>
  }

  export type GetRecent_views_projectAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Recent_views_projectAvgAggregateOutputType ? Recent_views_projectAvgAggregateOutputType[P] : never
  }

    



  export type recent_views_projectSelect = {
    id?: boolean
    project_id?: boolean
    company_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type recent_views_projectInclude = {
    companies?: boolean | companiesArgs
    projects?: boolean | projectsArgs
  }

  export type recent_views_projectGetPayload<
    S extends boolean | null | undefined | recent_views_projectArgs,
    U = keyof S
      > = S extends true
        ? recent_views_project
    : S extends undefined
    ? never
    : S extends recent_views_projectArgs | FindManyrecent_views_projectArgs
    ?'include' extends U
    ? recent_views_project  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof recent_views_project ?recent_views_project [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['select'][P]> : never
  } 
    : recent_views_project
  : recent_views_project


  export interface recent_views_projectDelegate {
    /**
     * Find zero or one Recent_views_project that matches the filter.
     * @param {FindUniquerecent_views_projectArgs} args - Arguments to find a Recent_views_project
     * @example
     * // Get one Recent_views_project
     * const recent_views_project = await prisma.recent_views_project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquerecent_views_projectArgs>(
      args: Subset<T, FindUniquerecent_views_projectArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project | null>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T> | null>>

    /**
     * Find the first Recent_views_project that matches the filter.
     * @param {FindFirstrecent_views_projectArgs} args - Arguments to find a Recent_views_project
     * @example
     * // Get one Recent_views_project
     * const recent_views_project = await prisma.recent_views_project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrecent_views_projectArgs>(
      args?: Subset<T, FindFirstrecent_views_projectArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project | null>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T> | null>>

    /**
     * Find zero or more Recent_views_projects that matches the filter.
     * @param {FindManyrecent_views_projectArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recent_views_projects
     * const recent_views_projects = await prisma.recent_views_project.findMany()
     * 
     * // Get first 10 Recent_views_projects
     * const recent_views_projects = await prisma.recent_views_project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recent_views_projectWithIdOnly = await prisma.recent_views_project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyrecent_views_projectArgs>(
      args?: Subset<T, FindManyrecent_views_projectArgs>
    ): CheckSelect<T, Promise<Array<recent_views_project>>, Promise<Array<recent_views_projectGetPayload<T>>>>

    /**
     * Create a Recent_views_project.
     * @param {recent_views_projectCreateArgs} args - Arguments to create a Recent_views_project.
     * @example
     * // Create one Recent_views_project
     * const Recent_views_project = await prisma.recent_views_project.create({
     *   data: {
     *     // ... data to create a Recent_views_project
     *   }
     * })
     * 
    **/
    create<T extends recent_views_projectCreateArgs>(
      args: Subset<T, recent_views_projectCreateArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T>>>

    /**
     * Delete a Recent_views_project.
     * @param {recent_views_projectDeleteArgs} args - Arguments to delete one Recent_views_project.
     * @example
     * // Delete one Recent_views_project
     * const Recent_views_project = await prisma.recent_views_project.delete({
     *   where: {
     *     // ... filter to delete one Recent_views_project
     *   }
     * })
     * 
    **/
    delete<T extends recent_views_projectDeleteArgs>(
      args: Subset<T, recent_views_projectDeleteArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T>>>

    /**
     * Update one Recent_views_project.
     * @param {recent_views_projectUpdateArgs} args - Arguments to update one Recent_views_project.
     * @example
     * // Update one Recent_views_project
     * const recent_views_project = await prisma.recent_views_project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recent_views_projectUpdateArgs>(
      args: Subset<T, recent_views_projectUpdateArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T>>>

    /**
     * Delete zero or more Recent_views_projects.
     * @param {recent_views_projectDeleteManyArgs} args - Arguments to filter Recent_views_projects to delete.
     * @example
     * // Delete a few Recent_views_projects
     * const { count } = await prisma.recent_views_project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recent_views_projectDeleteManyArgs>(
      args?: Subset<T, recent_views_projectDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Recent_views_projects.
     * @param {recent_views_projectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recent_views_projects
     * const recent_views_project = await prisma.recent_views_project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recent_views_projectUpdateManyArgs>(
      args: Subset<T, recent_views_projectUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Recent_views_project.
     * @param {recent_views_projectUpsertArgs} args - Arguments to update or create a Recent_views_project.
     * @example
     * // Update or create a Recent_views_project
     * const recent_views_project = await prisma.recent_views_project.upsert({
     *   create: {
     *     // ... data to create a Recent_views_project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recent_views_project we want to update
     *   }
     * })
    **/
    upsert<T extends recent_views_projectUpsertArgs>(
      args: Subset<T, recent_views_projectUpsertArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T>>>

    /**
     * Find zero or one Recent_views_project that matches the filter.
     * @param {FindUniquerecent_views_projectArgs} args - Arguments to find a Recent_views_project
     * @deprecated This will be deprecated please use prisma.recent_views_project.findUnique
     * @example
     * // Get one Recent_views_project
     * const recent_views_project = await prisma.recent_views_project.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquerecent_views_projectArgs>(
      args: Subset<T, FindUniquerecent_views_projectArgs>
    ): CheckSelect<T, Prisma__recent_views_projectClient<recent_views_project | null>, Prisma__recent_views_projectClient<recent_views_projectGetPayload<T> | null>>

    /**
     * Count the number of Recent_views_projects.
     * @param {FindManyrecent_views_projectArgs} args - Arguments to filter Recent_views_projects to count.
     * @example
     * // Count the number of Recent_views_projects
     * const count = await prisma.recent_views_project.count({
     *   where: {
     *     // ... the filter for the Recent_views_projects we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyrecent_views_projectArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Recent_views_project.
     * @param {AggregateRecent_views_projectArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateRecent_views_projectArgs>(args: Subset<T, AggregateRecent_views_projectArgs>): Promise<GetRecent_views_projectAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for recent_views_project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__recent_views_projectClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    projects<T extends projectsArgs = {}>(args?: Subset<T, projectsArgs>): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * recent_views_project findUnique
   */
  export type FindUniquerecent_views_projectArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * Filter, which recent_views_project to fetch.
    **/
    where: recent_views_projectWhereUniqueInput
  }


  /**
   * recent_views_project findFirst
   */
  export type FindFirstrecent_views_projectArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * Filter, which recent_views_project to fetch.
    **/
    where?: recent_views_projectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of recent_views_projects to fetch.
    **/
    orderBy?: Enumerable<recent_views_projectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recent_views_projects.
    **/
    cursor?: recent_views_projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recent_views_projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recent_views_projects.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of recent_views_projects.
    **/
    distinct?: Enumerable<Recent_views_projectScalarFieldEnum>
  }


  /**
   * recent_views_project findMany
   */
  export type FindManyrecent_views_projectArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * Filter, which recent_views_projects to fetch.
    **/
    where?: recent_views_projectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of recent_views_projects to fetch.
    **/
    orderBy?: Enumerable<recent_views_projectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recent_views_projects.
    **/
    cursor?: recent_views_projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recent_views_projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recent_views_projects.
    **/
    skip?: number
    distinct?: Enumerable<Recent_views_projectScalarFieldEnum>
  }


  /**
   * recent_views_project create
   */
  export type recent_views_projectCreateArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * The data needed to create a recent_views_project.
    **/
    data: recent_views_projectCreateInput
  }


  /**
   * recent_views_project update
   */
  export type recent_views_projectUpdateArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * The data needed to update a recent_views_project.
    **/
    data: recent_views_projectUpdateInput
    /**
     * Choose, which recent_views_project to update.
    **/
    where: recent_views_projectWhereUniqueInput
  }


  /**
   * recent_views_project updateMany
   */
  export type recent_views_projectUpdateManyArgs = {
    data: recent_views_projectUpdateManyMutationInput
    where?: recent_views_projectWhereInput
  }


  /**
   * recent_views_project upsert
   */
  export type recent_views_projectUpsertArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * The filter to search for the recent_views_project to update in case it exists.
    **/
    where: recent_views_projectWhereUniqueInput
    /**
     * In case the recent_views_project found by the `where` argument doesn't exist, create a new recent_views_project with this data.
    **/
    create: recent_views_projectCreateInput
    /**
     * In case the recent_views_project was found with the provided `where` argument, update it with this data.
    **/
    update: recent_views_projectUpdateInput
  }


  /**
   * recent_views_project delete
   */
  export type recent_views_projectDeleteArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
    /**
     * Filter which recent_views_project to delete.
    **/
    where: recent_views_projectWhereUniqueInput
  }


  /**
   * recent_views_project deleteMany
   */
  export type recent_views_projectDeleteManyArgs = {
    where?: recent_views_projectWhereInput
  }


  /**
   * recent_views_project without action
   */
  export type recent_views_projectArgs = {
    /**
     * Select specific fields to fetch from the recent_views_project
    **/
    select?: recent_views_projectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: recent_views_projectInclude | null
  }



  /**
   * Model required_documents
   */


  export type AggregateRequired_documents = {
    count: number | null
    avg: Required_documentsAvgAggregateOutputType | null
    sum: Required_documentsSumAggregateOutputType | null
    min: Required_documentsMinAggregateOutputType | null
    max: Required_documentsMaxAggregateOutputType | null
  }

  export type Required_documentsAvgAggregateOutputType = {
    id: number
    project_id: number
    document_id: number
  }

  export type Required_documentsSumAggregateOutputType = {
    id: number
    project_id: number
    document_id: number
  }

  export type Required_documentsMinAggregateOutputType = {
    id: number
    project_id: number
    document_id: number
  }

  export type Required_documentsMaxAggregateOutputType = {
    id: number
    project_id: number
    document_id: number
  }

  export type Required_documentsCountAggregateOutputType = {
    id: number
    project_id: number
    document_id: number
    _all: number
  }


  export type Required_documentsAvgAggregateInputType = {
    id?: true
    project_id?: true
    document_id?: true
  }

  export type Required_documentsSumAggregateInputType = {
    id?: true
    project_id?: true
    document_id?: true
  }

  export type Required_documentsMinAggregateInputType = {
    id?: true
    project_id?: true
    document_id?: true
  }

  export type Required_documentsMaxAggregateInputType = {
    id?: true
    project_id?: true
    document_id?: true
  }

  export type Required_documentsCountAggregateInputType = {
    id?: true
    project_id?: true
    document_id?: true
    _all?: true
  }

  export type AggregateRequired_documentsArgs = {
    /**
     * Filter which required_documents to aggregate.
    **/
    where?: required_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of required_documents to fetch.
    **/
    orderBy?: Enumerable<required_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: required_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` required_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` required_documents.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned required_documents
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Required_documentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Required_documentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Required_documentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Required_documentsMaxAggregateInputType
  }

  export type GetRequired_documentsAggregateType<T extends AggregateRequired_documentsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRequired_documentsAggregateScalarType<T[P]>
  }

  export type GetRequired_documentsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Required_documentsAvgAggregateOutputType ? Required_documentsAvgAggregateOutputType[P] : never
  }

    



  export type required_documentsSelect = {
    id?: boolean
    project_id?: boolean
    document_id?: boolean
    document_types?: boolean | document_typesArgs
    projects?: boolean | projectsArgs
  }

  export type required_documentsInclude = {
    document_types?: boolean | document_typesArgs
    projects?: boolean | projectsArgs
  }

  export type required_documentsGetPayload<
    S extends boolean | null | undefined | required_documentsArgs,
    U = keyof S
      > = S extends true
        ? required_documents
    : S extends undefined
    ? never
    : S extends required_documentsArgs | FindManyrequired_documentsArgs
    ?'include' extends U
    ? required_documents  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'document_types'
        ? document_typesGetPayload<S['include'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof required_documents ?required_documents [P]
  : 
          P extends 'document_types'
        ? document_typesGetPayload<S['select'][P]> :
        P extends 'projects'
        ? projectsGetPayload<S['select'][P]> : never
  } 
    : required_documents
  : required_documents


  export interface required_documentsDelegate {
    /**
     * Find zero or one Required_documents that matches the filter.
     * @param {FindUniquerequired_documentsArgs} args - Arguments to find a Required_documents
     * @example
     * // Get one Required_documents
     * const required_documents = await prisma.required_documents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquerequired_documentsArgs>(
      args: Subset<T, FindUniquerequired_documentsArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents | null>, Prisma__required_documentsClient<required_documentsGetPayload<T> | null>>

    /**
     * Find the first Required_documents that matches the filter.
     * @param {FindFirstrequired_documentsArgs} args - Arguments to find a Required_documents
     * @example
     * // Get one Required_documents
     * const required_documents = await prisma.required_documents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrequired_documentsArgs>(
      args?: Subset<T, FindFirstrequired_documentsArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents | null>, Prisma__required_documentsClient<required_documentsGetPayload<T> | null>>

    /**
     * Find zero or more Required_documents that matches the filter.
     * @param {FindManyrequired_documentsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Required_documents
     * const required_documents = await prisma.required_documents.findMany()
     * 
     * // Get first 10 Required_documents
     * const required_documents = await prisma.required_documents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const required_documentsWithIdOnly = await prisma.required_documents.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyrequired_documentsArgs>(
      args?: Subset<T, FindManyrequired_documentsArgs>
    ): CheckSelect<T, Promise<Array<required_documents>>, Promise<Array<required_documentsGetPayload<T>>>>

    /**
     * Create a Required_documents.
     * @param {required_documentsCreateArgs} args - Arguments to create a Required_documents.
     * @example
     * // Create one Required_documents
     * const Required_documents = await prisma.required_documents.create({
     *   data: {
     *     // ... data to create a Required_documents
     *   }
     * })
     * 
    **/
    create<T extends required_documentsCreateArgs>(
      args: Subset<T, required_documentsCreateArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents>, Prisma__required_documentsClient<required_documentsGetPayload<T>>>

    /**
     * Delete a Required_documents.
     * @param {required_documentsDeleteArgs} args - Arguments to delete one Required_documents.
     * @example
     * // Delete one Required_documents
     * const Required_documents = await prisma.required_documents.delete({
     *   where: {
     *     // ... filter to delete one Required_documents
     *   }
     * })
     * 
    **/
    delete<T extends required_documentsDeleteArgs>(
      args: Subset<T, required_documentsDeleteArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents>, Prisma__required_documentsClient<required_documentsGetPayload<T>>>

    /**
     * Update one Required_documents.
     * @param {required_documentsUpdateArgs} args - Arguments to update one Required_documents.
     * @example
     * // Update one Required_documents
     * const required_documents = await prisma.required_documents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends required_documentsUpdateArgs>(
      args: Subset<T, required_documentsUpdateArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents>, Prisma__required_documentsClient<required_documentsGetPayload<T>>>

    /**
     * Delete zero or more Required_documents.
     * @param {required_documentsDeleteManyArgs} args - Arguments to filter Required_documents to delete.
     * @example
     * // Delete a few Required_documents
     * const { count } = await prisma.required_documents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends required_documentsDeleteManyArgs>(
      args?: Subset<T, required_documentsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Required_documents.
     * @param {required_documentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Required_documents
     * const required_documents = await prisma.required_documents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends required_documentsUpdateManyArgs>(
      args: Subset<T, required_documentsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Required_documents.
     * @param {required_documentsUpsertArgs} args - Arguments to update or create a Required_documents.
     * @example
     * // Update or create a Required_documents
     * const required_documents = await prisma.required_documents.upsert({
     *   create: {
     *     // ... data to create a Required_documents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Required_documents we want to update
     *   }
     * })
    **/
    upsert<T extends required_documentsUpsertArgs>(
      args: Subset<T, required_documentsUpsertArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents>, Prisma__required_documentsClient<required_documentsGetPayload<T>>>

    /**
     * Find zero or one Required_documents that matches the filter.
     * @param {FindUniquerequired_documentsArgs} args - Arguments to find a Required_documents
     * @deprecated This will be deprecated please use prisma.required_documents.findUnique
     * @example
     * // Get one Required_documents
     * const required_documents = await prisma.required_documents.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquerequired_documentsArgs>(
      args: Subset<T, FindUniquerequired_documentsArgs>
    ): CheckSelect<T, Prisma__required_documentsClient<required_documents | null>, Prisma__required_documentsClient<required_documentsGetPayload<T> | null>>

    /**
     * Count the number of Required_documents.
     * @param {FindManyrequired_documentsArgs} args - Arguments to filter Required_documents to count.
     * @example
     * // Count the number of Required_documents
     * const count = await prisma.required_documents.count({
     *   where: {
     *     // ... the filter for the Required_documents we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyrequired_documentsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Required_documents.
     * @param {AggregateRequired_documentsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateRequired_documentsArgs>(args: Subset<T, AggregateRequired_documentsArgs>): Promise<GetRequired_documentsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for required_documents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__required_documentsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    document_types<T extends document_typesArgs = {}>(args?: Subset<T, document_typesArgs>): CheckSelect<T, Prisma__document_typesClient<document_types | null>, Prisma__document_typesClient<document_typesGetPayload<T> | null>>;

    projects<T extends projectsArgs = {}>(args?: Subset<T, projectsArgs>): CheckSelect<T, Prisma__projectsClient<projects | null>, Prisma__projectsClient<projectsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * required_documents findUnique
   */
  export type FindUniquerequired_documentsArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * Filter, which required_documents to fetch.
    **/
    where: required_documentsWhereUniqueInput
  }


  /**
   * required_documents findFirst
   */
  export type FindFirstrequired_documentsArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * Filter, which required_documents to fetch.
    **/
    where?: required_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of required_documents to fetch.
    **/
    orderBy?: Enumerable<required_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for required_documents.
    **/
    cursor?: required_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` required_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` required_documents.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of required_documents.
    **/
    distinct?: Enumerable<Required_documentsScalarFieldEnum>
  }


  /**
   * required_documents findMany
   */
  export type FindManyrequired_documentsArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * Filter, which required_documents to fetch.
    **/
    where?: required_documentsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of required_documents to fetch.
    **/
    orderBy?: Enumerable<required_documentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing required_documents.
    **/
    cursor?: required_documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` required_documents from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` required_documents.
    **/
    skip?: number
    distinct?: Enumerable<Required_documentsScalarFieldEnum>
  }


  /**
   * required_documents create
   */
  export type required_documentsCreateArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * The data needed to create a required_documents.
    **/
    data: required_documentsCreateInput
  }


  /**
   * required_documents update
   */
  export type required_documentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * The data needed to update a required_documents.
    **/
    data: required_documentsUpdateInput
    /**
     * Choose, which required_documents to update.
    **/
    where: required_documentsWhereUniqueInput
  }


  /**
   * required_documents updateMany
   */
  export type required_documentsUpdateManyArgs = {
    data: required_documentsUpdateManyMutationInput
    where?: required_documentsWhereInput
  }


  /**
   * required_documents upsert
   */
  export type required_documentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * The filter to search for the required_documents to update in case it exists.
    **/
    where: required_documentsWhereUniqueInput
    /**
     * In case the required_documents found by the `where` argument doesn't exist, create a new required_documents with this data.
    **/
    create: required_documentsCreateInput
    /**
     * In case the required_documents was found with the provided `where` argument, update it with this data.
    **/
    update: required_documentsUpdateInput
  }


  /**
   * required_documents delete
   */
  export type required_documentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
    /**
     * Filter which required_documents to delete.
    **/
    where: required_documentsWhereUniqueInput
  }


  /**
   * required_documents deleteMany
   */
  export type required_documentsDeleteManyArgs = {
    where?: required_documentsWhereInput
  }


  /**
   * required_documents without action
   */
  export type required_documentsArgs = {
    /**
     * Select specific fields to fetch from the required_documents
    **/
    select?: required_documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: required_documentsInclude | null
  }



  /**
   * Model sectors
   */


  export type AggregateSectors = {
    count: number | null
    avg: SectorsAvgAggregateOutputType | null
    sum: SectorsSumAggregateOutputType | null
    min: SectorsMinAggregateOutputType | null
    max: SectorsMaxAggregateOutputType | null
  }

  export type SectorsAvgAggregateOutputType = {
    id: number
  }

  export type SectorsSumAggregateOutputType = {
    id: number
  }

  export type SectorsMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type SectorsMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type SectorsCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type SectorsAvgAggregateInputType = {
    id?: true
  }

  export type SectorsSumAggregateInputType = {
    id?: true
  }

  export type SectorsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SectorsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SectorsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateSectorsArgs = {
    /**
     * Filter which sectors to aggregate.
    **/
    where?: sectorsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of sectors to fetch.
    **/
    orderBy?: Enumerable<sectorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: sectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sectors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sectors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sectors
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SectorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SectorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SectorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SectorsMaxAggregateInputType
  }

  export type GetSectorsAggregateType<T extends AggregateSectorsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSectorsAggregateScalarType<T[P]>
  }

  export type GetSectorsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof SectorsAvgAggregateOutputType ? SectorsAvgAggregateOutputType[P] : never
  }

    



  export type sectorsSelect = {
    id?: boolean
    name?: boolean
    projects?: boolean | FindManyprojectsArgs
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type sectorsInclude = {
    projects?: boolean | FindManyprojectsArgs
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type sectorsGetPayload<
    S extends boolean | null | undefined | sectorsArgs,
    U = keyof S
      > = S extends true
        ? sectors
    : S extends undefined
    ? never
    : S extends sectorsArgs | FindManysectorsArgs
    ?'include' extends U
    ? sectors  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'projects'
        ? Array < projectsGetPayload<S['include'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sectors ?sectors [P]
  : 
          P extends 'projects'
        ? Array < projectsGetPayload<S['select'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['select'][P]>>  : never
  } 
    : sectors
  : sectors


  export interface sectorsDelegate {
    /**
     * Find zero or one Sectors that matches the filter.
     * @param {FindUniquesectorsArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquesectorsArgs>(
      args: Subset<T, FindUniquesectorsArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors | null>, Prisma__sectorsClient<sectorsGetPayload<T> | null>>

    /**
     * Find the first Sectors that matches the filter.
     * @param {FindFirstsectorsArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstsectorsArgs>(
      args?: Subset<T, FindFirstsectorsArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors | null>, Prisma__sectorsClient<sectorsGetPayload<T> | null>>

    /**
     * Find zero or more Sectors that matches the filter.
     * @param {FindManysectorsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sectors
     * const sectors = await prisma.sectors.findMany()
     * 
     * // Get first 10 Sectors
     * const sectors = await prisma.sectors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectorsWithIdOnly = await prisma.sectors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManysectorsArgs>(
      args?: Subset<T, FindManysectorsArgs>
    ): CheckSelect<T, Promise<Array<sectors>>, Promise<Array<sectorsGetPayload<T>>>>

    /**
     * Create a Sectors.
     * @param {sectorsCreateArgs} args - Arguments to create a Sectors.
     * @example
     * // Create one Sectors
     * const Sectors = await prisma.sectors.create({
     *   data: {
     *     // ... data to create a Sectors
     *   }
     * })
     * 
    **/
    create<T extends sectorsCreateArgs>(
      args: Subset<T, sectorsCreateArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors>, Prisma__sectorsClient<sectorsGetPayload<T>>>

    /**
     * Delete a Sectors.
     * @param {sectorsDeleteArgs} args - Arguments to delete one Sectors.
     * @example
     * // Delete one Sectors
     * const Sectors = await prisma.sectors.delete({
     *   where: {
     *     // ... filter to delete one Sectors
     *   }
     * })
     * 
    **/
    delete<T extends sectorsDeleteArgs>(
      args: Subset<T, sectorsDeleteArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors>, Prisma__sectorsClient<sectorsGetPayload<T>>>

    /**
     * Update one Sectors.
     * @param {sectorsUpdateArgs} args - Arguments to update one Sectors.
     * @example
     * // Update one Sectors
     * const sectors = await prisma.sectors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sectorsUpdateArgs>(
      args: Subset<T, sectorsUpdateArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors>, Prisma__sectorsClient<sectorsGetPayload<T>>>

    /**
     * Delete zero or more Sectors.
     * @param {sectorsDeleteManyArgs} args - Arguments to filter Sectors to delete.
     * @example
     * // Delete a few Sectors
     * const { count } = await prisma.sectors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sectorsDeleteManyArgs>(
      args?: Subset<T, sectorsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Sectors.
     * @param {sectorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sectors
     * const sectors = await prisma.sectors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sectorsUpdateManyArgs>(
      args: Subset<T, sectorsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Sectors.
     * @param {sectorsUpsertArgs} args - Arguments to update or create a Sectors.
     * @example
     * // Update or create a Sectors
     * const sectors = await prisma.sectors.upsert({
     *   create: {
     *     // ... data to create a Sectors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sectors we want to update
     *   }
     * })
    **/
    upsert<T extends sectorsUpsertArgs>(
      args: Subset<T, sectorsUpsertArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors>, Prisma__sectorsClient<sectorsGetPayload<T>>>

    /**
     * Find zero or one Sectors that matches the filter.
     * @param {FindUniquesectorsArgs} args - Arguments to find a Sectors
     * @deprecated This will be deprecated please use prisma.sectors.findUnique
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquesectorsArgs>(
      args: Subset<T, FindUniquesectorsArgs>
    ): CheckSelect<T, Prisma__sectorsClient<sectors | null>, Prisma__sectorsClient<sectorsGetPayload<T> | null>>

    /**
     * Count the number of Sectors.
     * @param {FindManysectorsArgs} args - Arguments to filter Sectors to count.
     * @example
     * // Count the number of Sectors
     * const count = await prisma.sectors.count({
     *   where: {
     *     // ... the filter for the Sectors we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManysectorsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Sectors.
     * @param {AggregateSectorsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateSectorsArgs>(args: Subset<T, AggregateSectorsArgs>): Promise<GetSectorsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for sectors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sectorsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projects<T extends FindManyprojectsArgs = {}>(args?: Subset<T, FindManyprojectsArgs>): CheckSelect<T, Promise<Array<projects>>, Promise<Array<projectsGetPayload<T>>>>;

    startup_infos<T extends FindManystartup_infosArgs = {}>(args?: Subset<T, FindManystartup_infosArgs>): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sectors findUnique
   */
  export type FindUniquesectorsArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * Filter, which sectors to fetch.
    **/
    where: sectorsWhereUniqueInput
  }


  /**
   * sectors findFirst
   */
  export type FindFirstsectorsArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * Filter, which sectors to fetch.
    **/
    where?: sectorsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of sectors to fetch.
    **/
    orderBy?: Enumerable<sectorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sectors.
    **/
    cursor?: sectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sectors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sectors.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of sectors.
    **/
    distinct?: Enumerable<SectorsScalarFieldEnum>
  }


  /**
   * sectors findMany
   */
  export type FindManysectorsArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * Filter, which sectors to fetch.
    **/
    where?: sectorsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of sectors to fetch.
    **/
    orderBy?: Enumerable<sectorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sectors.
    **/
    cursor?: sectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sectors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sectors.
    **/
    skip?: number
    distinct?: Enumerable<SectorsScalarFieldEnum>
  }


  /**
   * sectors create
   */
  export type sectorsCreateArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * The data needed to create a sectors.
    **/
    data: sectorsCreateInput
  }


  /**
   * sectors update
   */
  export type sectorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * The data needed to update a sectors.
    **/
    data: sectorsUpdateInput
    /**
     * Choose, which sectors to update.
    **/
    where: sectorsWhereUniqueInput
  }


  /**
   * sectors updateMany
   */
  export type sectorsUpdateManyArgs = {
    data: sectorsUpdateManyMutationInput
    where?: sectorsWhereInput
  }


  /**
   * sectors upsert
   */
  export type sectorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * The filter to search for the sectors to update in case it exists.
    **/
    where: sectorsWhereUniqueInput
    /**
     * In case the sectors found by the `where` argument doesn't exist, create a new sectors with this data.
    **/
    create: sectorsCreateInput
    /**
     * In case the sectors was found with the provided `where` argument, update it with this data.
    **/
    update: sectorsUpdateInput
  }


  /**
   * sectors delete
   */
  export type sectorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
    /**
     * Filter which sectors to delete.
    **/
    where: sectorsWhereUniqueInput
  }


  /**
   * sectors deleteMany
   */
  export type sectorsDeleteManyArgs = {
    where?: sectorsWhereInput
  }


  /**
   * sectors without action
   */
  export type sectorsArgs = {
    /**
     * Select specific fields to fetch from the sectors
    **/
    select?: sectorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sectorsInclude | null
  }



  /**
   * Model service_types
   */


  export type AggregateService_types = {
    count: number | null
    avg: Service_typesAvgAggregateOutputType | null
    sum: Service_typesSumAggregateOutputType | null
    min: Service_typesMinAggregateOutputType | null
    max: Service_typesMaxAggregateOutputType | null
  }

  export type Service_typesAvgAggregateOutputType = {
    id: number
  }

  export type Service_typesSumAggregateOutputType = {
    id: number
  }

  export type Service_typesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Service_typesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Service_typesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Service_typesAvgAggregateInputType = {
    id?: true
  }

  export type Service_typesSumAggregateInputType = {
    id?: true
  }

  export type Service_typesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Service_typesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Service_typesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateService_typesArgs = {
    /**
     * Filter which service_types to aggregate.
    **/
    where?: service_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of service_types to fetch.
    **/
    orderBy?: Enumerable<service_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: service_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_types.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned service_types
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Service_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Service_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Service_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Service_typesMaxAggregateInputType
  }

  export type GetService_typesAggregateType<T extends AggregateService_typesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetService_typesAggregateScalarType<T[P]>
  }

  export type GetService_typesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Service_typesAvgAggregateOutputType ? Service_typesAvgAggregateOutputType[P] : never
  }

    



  export type service_typesSelect = {
    id?: boolean
    name?: boolean
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type service_typesInclude = {
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type service_typesGetPayload<
    S extends boolean | null | undefined | service_typesArgs,
    U = keyof S
      > = S extends true
        ? service_types
    : S extends undefined
    ? never
    : S extends service_typesArgs | FindManyservice_typesArgs
    ?'include' extends U
    ? service_types  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof service_types ?service_types [P]
  : 
          P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['select'][P]>>  : never
  } 
    : service_types
  : service_types


  export interface service_typesDelegate {
    /**
     * Find zero or one Service_types that matches the filter.
     * @param {FindUniqueservice_typesArgs} args - Arguments to find a Service_types
     * @example
     * // Get one Service_types
     * const service_types = await prisma.service_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueservice_typesArgs>(
      args: Subset<T, FindUniqueservice_typesArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types | null>, Prisma__service_typesClient<service_typesGetPayload<T> | null>>

    /**
     * Find the first Service_types that matches the filter.
     * @param {FindFirstservice_typesArgs} args - Arguments to find a Service_types
     * @example
     * // Get one Service_types
     * const service_types = await prisma.service_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstservice_typesArgs>(
      args?: Subset<T, FindFirstservice_typesArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types | null>, Prisma__service_typesClient<service_typesGetPayload<T> | null>>

    /**
     * Find zero or more Service_types that matches the filter.
     * @param {FindManyservice_typesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Service_types
     * const service_types = await prisma.service_types.findMany()
     * 
     * // Get first 10 Service_types
     * const service_types = await prisma.service_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const service_typesWithIdOnly = await prisma.service_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyservice_typesArgs>(
      args?: Subset<T, FindManyservice_typesArgs>
    ): CheckSelect<T, Promise<Array<service_types>>, Promise<Array<service_typesGetPayload<T>>>>

    /**
     * Create a Service_types.
     * @param {service_typesCreateArgs} args - Arguments to create a Service_types.
     * @example
     * // Create one Service_types
     * const Service_types = await prisma.service_types.create({
     *   data: {
     *     // ... data to create a Service_types
     *   }
     * })
     * 
    **/
    create<T extends service_typesCreateArgs>(
      args: Subset<T, service_typesCreateArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types>, Prisma__service_typesClient<service_typesGetPayload<T>>>

    /**
     * Delete a Service_types.
     * @param {service_typesDeleteArgs} args - Arguments to delete one Service_types.
     * @example
     * // Delete one Service_types
     * const Service_types = await prisma.service_types.delete({
     *   where: {
     *     // ... filter to delete one Service_types
     *   }
     * })
     * 
    **/
    delete<T extends service_typesDeleteArgs>(
      args: Subset<T, service_typesDeleteArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types>, Prisma__service_typesClient<service_typesGetPayload<T>>>

    /**
     * Update one Service_types.
     * @param {service_typesUpdateArgs} args - Arguments to update one Service_types.
     * @example
     * // Update one Service_types
     * const service_types = await prisma.service_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends service_typesUpdateArgs>(
      args: Subset<T, service_typesUpdateArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types>, Prisma__service_typesClient<service_typesGetPayload<T>>>

    /**
     * Delete zero or more Service_types.
     * @param {service_typesDeleteManyArgs} args - Arguments to filter Service_types to delete.
     * @example
     * // Delete a few Service_types
     * const { count } = await prisma.service_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends service_typesDeleteManyArgs>(
      args?: Subset<T, service_typesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Service_types.
     * @param {service_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Service_types
     * const service_types = await prisma.service_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends service_typesUpdateManyArgs>(
      args: Subset<T, service_typesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Service_types.
     * @param {service_typesUpsertArgs} args - Arguments to update or create a Service_types.
     * @example
     * // Update or create a Service_types
     * const service_types = await prisma.service_types.upsert({
     *   create: {
     *     // ... data to create a Service_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service_types we want to update
     *   }
     * })
    **/
    upsert<T extends service_typesUpsertArgs>(
      args: Subset<T, service_typesUpsertArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types>, Prisma__service_typesClient<service_typesGetPayload<T>>>

    /**
     * Find zero or one Service_types that matches the filter.
     * @param {FindUniqueservice_typesArgs} args - Arguments to find a Service_types
     * @deprecated This will be deprecated please use prisma.service_types.findUnique
     * @example
     * // Get one Service_types
     * const service_types = await prisma.service_types.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueservice_typesArgs>(
      args: Subset<T, FindUniqueservice_typesArgs>
    ): CheckSelect<T, Prisma__service_typesClient<service_types | null>, Prisma__service_typesClient<service_typesGetPayload<T> | null>>

    /**
     * Count the number of Service_types.
     * @param {FindManyservice_typesArgs} args - Arguments to filter Service_types to count.
     * @example
     * // Count the number of Service_types
     * const count = await prisma.service_types.count({
     *   where: {
     *     // ... the filter for the Service_types we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyservice_typesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Service_types.
     * @param {AggregateService_typesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateService_typesArgs>(args: Subset<T, AggregateService_typesArgs>): Promise<GetService_typesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for service_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__service_typesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    startup_infos<T extends FindManystartup_infosArgs = {}>(args?: Subset<T, FindManystartup_infosArgs>): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * service_types findUnique
   */
  export type FindUniqueservice_typesArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * Filter, which service_types to fetch.
    **/
    where: service_typesWhereUniqueInput
  }


  /**
   * service_types findFirst
   */
  export type FindFirstservice_typesArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * Filter, which service_types to fetch.
    **/
    where?: service_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of service_types to fetch.
    **/
    orderBy?: Enumerable<service_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for service_types.
    **/
    cursor?: service_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_types.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of service_types.
    **/
    distinct?: Enumerable<Service_typesScalarFieldEnum>
  }


  /**
   * service_types findMany
   */
  export type FindManyservice_typesArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * Filter, which service_types to fetch.
    **/
    where?: service_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of service_types to fetch.
    **/
    orderBy?: Enumerable<service_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing service_types.
    **/
    cursor?: service_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_types.
    **/
    skip?: number
    distinct?: Enumerable<Service_typesScalarFieldEnum>
  }


  /**
   * service_types create
   */
  export type service_typesCreateArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * The data needed to create a service_types.
    **/
    data: service_typesCreateInput
  }


  /**
   * service_types update
   */
  export type service_typesUpdateArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * The data needed to update a service_types.
    **/
    data: service_typesUpdateInput
    /**
     * Choose, which service_types to update.
    **/
    where: service_typesWhereUniqueInput
  }


  /**
   * service_types updateMany
   */
  export type service_typesUpdateManyArgs = {
    data: service_typesUpdateManyMutationInput
    where?: service_typesWhereInput
  }


  /**
   * service_types upsert
   */
  export type service_typesUpsertArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * The filter to search for the service_types to update in case it exists.
    **/
    where: service_typesWhereUniqueInput
    /**
     * In case the service_types found by the `where` argument doesn't exist, create a new service_types with this data.
    **/
    create: service_typesCreateInput
    /**
     * In case the service_types was found with the provided `where` argument, update it with this data.
    **/
    update: service_typesUpdateInput
  }


  /**
   * service_types delete
   */
  export type service_typesDeleteArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
    /**
     * Filter which service_types to delete.
    **/
    where: service_typesWhereUniqueInput
  }


  /**
   * service_types deleteMany
   */
  export type service_typesDeleteManyArgs = {
    where?: service_typesWhereInput
  }


  /**
   * service_types without action
   */
  export type service_typesArgs = {
    /**
     * Select specific fields to fetch from the service_types
    **/
    select?: service_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: service_typesInclude | null
  }



  /**
   * Model signup_methods
   */


  export type AggregateSignup_methods = {
    count: number | null
    avg: Signup_methodsAvgAggregateOutputType | null
    sum: Signup_methodsSumAggregateOutputType | null
    min: Signup_methodsMinAggregateOutputType | null
    max: Signup_methodsMaxAggregateOutputType | null
  }

  export type Signup_methodsAvgAggregateOutputType = {
    id: number
  }

  export type Signup_methodsSumAggregateOutputType = {
    id: number
  }

  export type Signup_methodsMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Signup_methodsMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type Signup_methodsCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type Signup_methodsAvgAggregateInputType = {
    id?: true
  }

  export type Signup_methodsSumAggregateInputType = {
    id?: true
  }

  export type Signup_methodsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Signup_methodsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Signup_methodsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateSignup_methodsArgs = {
    /**
     * Filter which signup_methods to aggregate.
    **/
    where?: signup_methodsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of signup_methods to fetch.
    **/
    orderBy?: Enumerable<signup_methodsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: signup_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` signup_methods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` signup_methods.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned signup_methods
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Signup_methodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Signup_methodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Signup_methodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Signup_methodsMaxAggregateInputType
  }

  export type GetSignup_methodsAggregateType<T extends AggregateSignup_methodsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSignup_methodsAggregateScalarType<T[P]>
  }

  export type GetSignup_methodsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Signup_methodsAvgAggregateOutputType ? Signup_methodsAvgAggregateOutputType[P] : never
  }

    



  export type signup_methodsSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | FindManyusersArgs
  }

  export type signup_methodsInclude = {
    users?: boolean | FindManyusersArgs
  }

  export type signup_methodsGetPayload<
    S extends boolean | null | undefined | signup_methodsArgs,
    U = keyof S
      > = S extends true
        ? signup_methods
    : S extends undefined
    ? never
    : S extends signup_methodsArgs | FindManysignup_methodsArgs
    ?'include' extends U
    ? signup_methods  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof signup_methods ?signup_methods [P]
  : 
          P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : signup_methods
  : signup_methods


  export interface signup_methodsDelegate {
    /**
     * Find zero or one Signup_methods that matches the filter.
     * @param {FindUniquesignup_methodsArgs} args - Arguments to find a Signup_methods
     * @example
     * // Get one Signup_methods
     * const signup_methods = await prisma.signup_methods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquesignup_methodsArgs>(
      args: Subset<T, FindUniquesignup_methodsArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods | null>, Prisma__signup_methodsClient<signup_methodsGetPayload<T> | null>>

    /**
     * Find the first Signup_methods that matches the filter.
     * @param {FindFirstsignup_methodsArgs} args - Arguments to find a Signup_methods
     * @example
     * // Get one Signup_methods
     * const signup_methods = await prisma.signup_methods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstsignup_methodsArgs>(
      args?: Subset<T, FindFirstsignup_methodsArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods | null>, Prisma__signup_methodsClient<signup_methodsGetPayload<T> | null>>

    /**
     * Find zero or more Signup_methods that matches the filter.
     * @param {FindManysignup_methodsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Signup_methods
     * const signup_methods = await prisma.signup_methods.findMany()
     * 
     * // Get first 10 Signup_methods
     * const signup_methods = await prisma.signup_methods.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signup_methodsWithIdOnly = await prisma.signup_methods.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManysignup_methodsArgs>(
      args?: Subset<T, FindManysignup_methodsArgs>
    ): CheckSelect<T, Promise<Array<signup_methods>>, Promise<Array<signup_methodsGetPayload<T>>>>

    /**
     * Create a Signup_methods.
     * @param {signup_methodsCreateArgs} args - Arguments to create a Signup_methods.
     * @example
     * // Create one Signup_methods
     * const Signup_methods = await prisma.signup_methods.create({
     *   data: {
     *     // ... data to create a Signup_methods
     *   }
     * })
     * 
    **/
    create<T extends signup_methodsCreateArgs>(
      args: Subset<T, signup_methodsCreateArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods>, Prisma__signup_methodsClient<signup_methodsGetPayload<T>>>

    /**
     * Delete a Signup_methods.
     * @param {signup_methodsDeleteArgs} args - Arguments to delete one Signup_methods.
     * @example
     * // Delete one Signup_methods
     * const Signup_methods = await prisma.signup_methods.delete({
     *   where: {
     *     // ... filter to delete one Signup_methods
     *   }
     * })
     * 
    **/
    delete<T extends signup_methodsDeleteArgs>(
      args: Subset<T, signup_methodsDeleteArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods>, Prisma__signup_methodsClient<signup_methodsGetPayload<T>>>

    /**
     * Update one Signup_methods.
     * @param {signup_methodsUpdateArgs} args - Arguments to update one Signup_methods.
     * @example
     * // Update one Signup_methods
     * const signup_methods = await prisma.signup_methods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends signup_methodsUpdateArgs>(
      args: Subset<T, signup_methodsUpdateArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods>, Prisma__signup_methodsClient<signup_methodsGetPayload<T>>>

    /**
     * Delete zero or more Signup_methods.
     * @param {signup_methodsDeleteManyArgs} args - Arguments to filter Signup_methods to delete.
     * @example
     * // Delete a few Signup_methods
     * const { count } = await prisma.signup_methods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends signup_methodsDeleteManyArgs>(
      args?: Subset<T, signup_methodsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Signup_methods.
     * @param {signup_methodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Signup_methods
     * const signup_methods = await prisma.signup_methods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends signup_methodsUpdateManyArgs>(
      args: Subset<T, signup_methodsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Signup_methods.
     * @param {signup_methodsUpsertArgs} args - Arguments to update or create a Signup_methods.
     * @example
     * // Update or create a Signup_methods
     * const signup_methods = await prisma.signup_methods.upsert({
     *   create: {
     *     // ... data to create a Signup_methods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Signup_methods we want to update
     *   }
     * })
    **/
    upsert<T extends signup_methodsUpsertArgs>(
      args: Subset<T, signup_methodsUpsertArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods>, Prisma__signup_methodsClient<signup_methodsGetPayload<T>>>

    /**
     * Find zero or one Signup_methods that matches the filter.
     * @param {FindUniquesignup_methodsArgs} args - Arguments to find a Signup_methods
     * @deprecated This will be deprecated please use prisma.signup_methods.findUnique
     * @example
     * // Get one Signup_methods
     * const signup_methods = await prisma.signup_methods.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquesignup_methodsArgs>(
      args: Subset<T, FindUniquesignup_methodsArgs>
    ): CheckSelect<T, Prisma__signup_methodsClient<signup_methods | null>, Prisma__signup_methodsClient<signup_methodsGetPayload<T> | null>>

    /**
     * Count the number of Signup_methods.
     * @param {FindManysignup_methodsArgs} args - Arguments to filter Signup_methods to count.
     * @example
     * // Count the number of Signup_methods
     * const count = await prisma.signup_methods.count({
     *   where: {
     *     // ... the filter for the Signup_methods we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManysignup_methodsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Signup_methods.
     * @param {AggregateSignup_methodsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateSignup_methodsArgs>(args: Subset<T, AggregateSignup_methodsArgs>): Promise<GetSignup_methodsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for signup_methods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__signup_methodsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends FindManyusersArgs = {}>(args?: Subset<T, FindManyusersArgs>): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * signup_methods findUnique
   */
  export type FindUniquesignup_methodsArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * Filter, which signup_methods to fetch.
    **/
    where: signup_methodsWhereUniqueInput
  }


  /**
   * signup_methods findFirst
   */
  export type FindFirstsignup_methodsArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * Filter, which signup_methods to fetch.
    **/
    where?: signup_methodsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of signup_methods to fetch.
    **/
    orderBy?: Enumerable<signup_methodsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for signup_methods.
    **/
    cursor?: signup_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` signup_methods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` signup_methods.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of signup_methods.
    **/
    distinct?: Enumerable<Signup_methodsScalarFieldEnum>
  }


  /**
   * signup_methods findMany
   */
  export type FindManysignup_methodsArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * Filter, which signup_methods to fetch.
    **/
    where?: signup_methodsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of signup_methods to fetch.
    **/
    orderBy?: Enumerable<signup_methodsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing signup_methods.
    **/
    cursor?: signup_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` signup_methods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` signup_methods.
    **/
    skip?: number
    distinct?: Enumerable<Signup_methodsScalarFieldEnum>
  }


  /**
   * signup_methods create
   */
  export type signup_methodsCreateArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * The data needed to create a signup_methods.
    **/
    data: signup_methodsCreateInput
  }


  /**
   * signup_methods update
   */
  export type signup_methodsUpdateArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * The data needed to update a signup_methods.
    **/
    data: signup_methodsUpdateInput
    /**
     * Choose, which signup_methods to update.
    **/
    where: signup_methodsWhereUniqueInput
  }


  /**
   * signup_methods updateMany
   */
  export type signup_methodsUpdateManyArgs = {
    data: signup_methodsUpdateManyMutationInput
    where?: signup_methodsWhereInput
  }


  /**
   * signup_methods upsert
   */
  export type signup_methodsUpsertArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * The filter to search for the signup_methods to update in case it exists.
    **/
    where: signup_methodsWhereUniqueInput
    /**
     * In case the signup_methods found by the `where` argument doesn't exist, create a new signup_methods with this data.
    **/
    create: signup_methodsCreateInput
    /**
     * In case the signup_methods was found with the provided `where` argument, update it with this data.
    **/
    update: signup_methodsUpdateInput
  }


  /**
   * signup_methods delete
   */
  export type signup_methodsDeleteArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
    /**
     * Filter which signup_methods to delete.
    **/
    where: signup_methodsWhereUniqueInput
  }


  /**
   * signup_methods deleteMany
   */
  export type signup_methodsDeleteManyArgs = {
    where?: signup_methodsWhereInput
  }


  /**
   * signup_methods without action
   */
  export type signup_methodsArgs = {
    /**
     * Select specific fields to fetch from the signup_methods
    **/
    select?: signup_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: signup_methodsInclude | null
  }



  /**
   * Model startup_images
   */


  export type AggregateStartup_images = {
    count: number | null
    avg: Startup_imagesAvgAggregateOutputType | null
    sum: Startup_imagesSumAggregateOutputType | null
    min: Startup_imagesMinAggregateOutputType | null
    max: Startup_imagesMaxAggregateOutputType | null
  }

  export type Startup_imagesAvgAggregateOutputType = {
    id: number
    company_id: number
  }

  export type Startup_imagesSumAggregateOutputType = {
    id: number
    company_id: number
  }

  export type Startup_imagesMinAggregateOutputType = {
    id: number
    company_id: number
    img_url: string | null
  }

  export type Startup_imagesMaxAggregateOutputType = {
    id: number
    company_id: number
    img_url: string | null
  }

  export type Startup_imagesCountAggregateOutputType = {
    id: number
    company_id: number
    img_url: number | null
    _all: number
  }


  export type Startup_imagesAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Startup_imagesSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type Startup_imagesMinAggregateInputType = {
    id?: true
    company_id?: true
    img_url?: true
  }

  export type Startup_imagesMaxAggregateInputType = {
    id?: true
    company_id?: true
    img_url?: true
  }

  export type Startup_imagesCountAggregateInputType = {
    id?: true
    company_id?: true
    img_url?: true
    _all?: true
  }

  export type AggregateStartup_imagesArgs = {
    /**
     * Filter which startup_images to aggregate.
    **/
    where?: startup_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_images to fetch.
    **/
    orderBy?: Enumerable<startup_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: startup_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned startup_images
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Startup_imagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Startup_imagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Startup_imagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Startup_imagesMaxAggregateInputType
  }

  export type GetStartup_imagesAggregateType<T extends AggregateStartup_imagesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetStartup_imagesAggregateScalarType<T[P]>
  }

  export type GetStartup_imagesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Startup_imagesAvgAggregateOutputType ? Startup_imagesAvgAggregateOutputType[P] : never
  }

    



  export type startup_imagesSelect = {
    id?: boolean
    company_id?: boolean
    img_url?: boolean
    startup_infos?: boolean | startup_infosArgs
  }

  export type startup_imagesInclude = {
    startup_infos?: boolean | startup_infosArgs
  }

  export type startup_imagesGetPayload<
    S extends boolean | null | undefined | startup_imagesArgs,
    U = keyof S
      > = S extends true
        ? startup_images
    : S extends undefined
    ? never
    : S extends startup_imagesArgs | FindManystartup_imagesArgs
    ?'include' extends U
    ? startup_images  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'startup_infos'
        ? startup_infosGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof startup_images ?startup_images [P]
  : 
          P extends 'startup_infos'
        ? startup_infosGetPayload<S['select'][P]> : never
  } 
    : startup_images
  : startup_images


  export interface startup_imagesDelegate {
    /**
     * Find zero or one Startup_images that matches the filter.
     * @param {FindUniquestartup_imagesArgs} args - Arguments to find a Startup_images
     * @example
     * // Get one Startup_images
     * const startup_images = await prisma.startup_images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquestartup_imagesArgs>(
      args: Subset<T, FindUniquestartup_imagesArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images | null>, Prisma__startup_imagesClient<startup_imagesGetPayload<T> | null>>

    /**
     * Find the first Startup_images that matches the filter.
     * @param {FindFirststartup_imagesArgs} args - Arguments to find a Startup_images
     * @example
     * // Get one Startup_images
     * const startup_images = await prisma.startup_images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirststartup_imagesArgs>(
      args?: Subset<T, FindFirststartup_imagesArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images | null>, Prisma__startup_imagesClient<startup_imagesGetPayload<T> | null>>

    /**
     * Find zero or more Startup_images that matches the filter.
     * @param {FindManystartup_imagesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Startup_images
     * const startup_images = await prisma.startup_images.findMany()
     * 
     * // Get first 10 Startup_images
     * const startup_images = await prisma.startup_images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const startup_imagesWithIdOnly = await prisma.startup_images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManystartup_imagesArgs>(
      args?: Subset<T, FindManystartup_imagesArgs>
    ): CheckSelect<T, Promise<Array<startup_images>>, Promise<Array<startup_imagesGetPayload<T>>>>

    /**
     * Create a Startup_images.
     * @param {startup_imagesCreateArgs} args - Arguments to create a Startup_images.
     * @example
     * // Create one Startup_images
     * const Startup_images = await prisma.startup_images.create({
     *   data: {
     *     // ... data to create a Startup_images
     *   }
     * })
     * 
    **/
    create<T extends startup_imagesCreateArgs>(
      args: Subset<T, startup_imagesCreateArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images>, Prisma__startup_imagesClient<startup_imagesGetPayload<T>>>

    /**
     * Delete a Startup_images.
     * @param {startup_imagesDeleteArgs} args - Arguments to delete one Startup_images.
     * @example
     * // Delete one Startup_images
     * const Startup_images = await prisma.startup_images.delete({
     *   where: {
     *     // ... filter to delete one Startup_images
     *   }
     * })
     * 
    **/
    delete<T extends startup_imagesDeleteArgs>(
      args: Subset<T, startup_imagesDeleteArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images>, Prisma__startup_imagesClient<startup_imagesGetPayload<T>>>

    /**
     * Update one Startup_images.
     * @param {startup_imagesUpdateArgs} args - Arguments to update one Startup_images.
     * @example
     * // Update one Startup_images
     * const startup_images = await prisma.startup_images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends startup_imagesUpdateArgs>(
      args: Subset<T, startup_imagesUpdateArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images>, Prisma__startup_imagesClient<startup_imagesGetPayload<T>>>

    /**
     * Delete zero or more Startup_images.
     * @param {startup_imagesDeleteManyArgs} args - Arguments to filter Startup_images to delete.
     * @example
     * // Delete a few Startup_images
     * const { count } = await prisma.startup_images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends startup_imagesDeleteManyArgs>(
      args?: Subset<T, startup_imagesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Startup_images.
     * @param {startup_imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Startup_images
     * const startup_images = await prisma.startup_images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends startup_imagesUpdateManyArgs>(
      args: Subset<T, startup_imagesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Startup_images.
     * @param {startup_imagesUpsertArgs} args - Arguments to update or create a Startup_images.
     * @example
     * // Update or create a Startup_images
     * const startup_images = await prisma.startup_images.upsert({
     *   create: {
     *     // ... data to create a Startup_images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Startup_images we want to update
     *   }
     * })
    **/
    upsert<T extends startup_imagesUpsertArgs>(
      args: Subset<T, startup_imagesUpsertArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images>, Prisma__startup_imagesClient<startup_imagesGetPayload<T>>>

    /**
     * Find zero or one Startup_images that matches the filter.
     * @param {FindUniquestartup_imagesArgs} args - Arguments to find a Startup_images
     * @deprecated This will be deprecated please use prisma.startup_images.findUnique
     * @example
     * // Get one Startup_images
     * const startup_images = await prisma.startup_images.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquestartup_imagesArgs>(
      args: Subset<T, FindUniquestartup_imagesArgs>
    ): CheckSelect<T, Prisma__startup_imagesClient<startup_images | null>, Prisma__startup_imagesClient<startup_imagesGetPayload<T> | null>>

    /**
     * Count the number of Startup_images.
     * @param {FindManystartup_imagesArgs} args - Arguments to filter Startup_images to count.
     * @example
     * // Count the number of Startup_images
     * const count = await prisma.startup_images.count({
     *   where: {
     *     // ... the filter for the Startup_images we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManystartup_imagesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Startup_images.
     * @param {AggregateStartup_imagesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateStartup_imagesArgs>(args: Subset<T, AggregateStartup_imagesArgs>): Promise<GetStartup_imagesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for startup_images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__startup_imagesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    startup_infos<T extends startup_infosArgs = {}>(args?: Subset<T, startup_infosArgs>): CheckSelect<T, Prisma__startup_infosClient<startup_infos | null>, Prisma__startup_infosClient<startup_infosGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * startup_images findUnique
   */
  export type FindUniquestartup_imagesArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * Filter, which startup_images to fetch.
    **/
    where: startup_imagesWhereUniqueInput
  }


  /**
   * startup_images findFirst
   */
  export type FindFirststartup_imagesArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * Filter, which startup_images to fetch.
    **/
    where?: startup_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_images to fetch.
    **/
    orderBy?: Enumerable<startup_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for startup_images.
    **/
    cursor?: startup_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_images.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of startup_images.
    **/
    distinct?: Enumerable<Startup_imagesScalarFieldEnum>
  }


  /**
   * startup_images findMany
   */
  export type FindManystartup_imagesArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * Filter, which startup_images to fetch.
    **/
    where?: startup_imagesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_images to fetch.
    **/
    orderBy?: Enumerable<startup_imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing startup_images.
    **/
    cursor?: startup_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_images.
    **/
    skip?: number
    distinct?: Enumerable<Startup_imagesScalarFieldEnum>
  }


  /**
   * startup_images create
   */
  export type startup_imagesCreateArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * The data needed to create a startup_images.
    **/
    data: startup_imagesCreateInput
  }


  /**
   * startup_images update
   */
  export type startup_imagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * The data needed to update a startup_images.
    **/
    data: startup_imagesUpdateInput
    /**
     * Choose, which startup_images to update.
    **/
    where: startup_imagesWhereUniqueInput
  }


  /**
   * startup_images updateMany
   */
  export type startup_imagesUpdateManyArgs = {
    data: startup_imagesUpdateManyMutationInput
    where?: startup_imagesWhereInput
  }


  /**
   * startup_images upsert
   */
  export type startup_imagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * The filter to search for the startup_images to update in case it exists.
    **/
    where: startup_imagesWhereUniqueInput
    /**
     * In case the startup_images found by the `where` argument doesn't exist, create a new startup_images with this data.
    **/
    create: startup_imagesCreateInput
    /**
     * In case the startup_images was found with the provided `where` argument, update it with this data.
    **/
    update: startup_imagesUpdateInput
  }


  /**
   * startup_images delete
   */
  export type startup_imagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
    /**
     * Filter which startup_images to delete.
    **/
    where: startup_imagesWhereUniqueInput
  }


  /**
   * startup_images deleteMany
   */
  export type startup_imagesDeleteManyArgs = {
    where?: startup_imagesWhereInput
  }


  /**
   * startup_images without action
   */
  export type startup_imagesArgs = {
    /**
     * Select specific fields to fetch from the startup_images
    **/
    select?: startup_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_imagesInclude | null
  }



  /**
   * Model startup_infos
   */


  export type AggregateStartup_infos = {
    count: number | null
    avg: Startup_infosAvgAggregateOutputType | null
    sum: Startup_infosSumAggregateOutputType | null
    min: Startup_infosMinAggregateOutputType | null
    max: Startup_infosMaxAggregateOutputType | null
  }

  export type Startup_infosAvgAggregateOutputType = {
    id: number
    company_id: number
    sector_id: number | null
    core_technology_id: number | null
    service_type_id: number | null
    business_type_id: number | null
  }

  export type Startup_infosSumAggregateOutputType = {
    id: number
    company_id: number
    sector_id: number | null
    core_technology_id: number | null
    service_type_id: number | null
    business_type_id: number | null
  }

  export type Startup_infosMinAggregateOutputType = {
    id: number
    company_id: number
    rep: string | null
    sector_id: number | null
    core_technology_id: number | null
    item_description: string | null
    contact: string | null
    address_road: string | null
    address_detail: string | null
    service_type_id: number | null
    business_type_id: number | null
    business_license_number: string | null
    email: string | null
    instagram_url: string | null
    facebook_url: string | null
    thumbnail: string | null
  }

  export type Startup_infosMaxAggregateOutputType = {
    id: number
    company_id: number
    rep: string | null
    sector_id: number | null
    core_technology_id: number | null
    item_description: string | null
    contact: string | null
    address_road: string | null
    address_detail: string | null
    service_type_id: number | null
    business_type_id: number | null
    business_license_number: string | null
    email: string | null
    instagram_url: string | null
    facebook_url: string | null
    thumbnail: string | null
  }

  export type Startup_infosCountAggregateOutputType = {
    id: number
    company_id: number
    rep: number | null
    sector_id: number | null
    core_technology_id: number | null
    item_description: number | null
    contact: number | null
    address_road: number | null
    address_detail: number | null
    service_type_id: number | null
    business_type_id: number | null
    business_license_number: number | null
    email: number | null
    instagram_url: number | null
    facebook_url: number | null
    thumbnail: number | null
    _all: number
  }


  export type Startup_infosAvgAggregateInputType = {
    id?: true
    company_id?: true
    sector_id?: true
    core_technology_id?: true
    service_type_id?: true
    business_type_id?: true
  }

  export type Startup_infosSumAggregateInputType = {
    id?: true
    company_id?: true
    sector_id?: true
    core_technology_id?: true
    service_type_id?: true
    business_type_id?: true
  }

  export type Startup_infosMinAggregateInputType = {
    id?: true
    company_id?: true
    rep?: true
    sector_id?: true
    core_technology_id?: true
    item_description?: true
    contact?: true
    address_road?: true
    address_detail?: true
    service_type_id?: true
    business_type_id?: true
    business_license_number?: true
    email?: true
    instagram_url?: true
    facebook_url?: true
    thumbnail?: true
  }

  export type Startup_infosMaxAggregateInputType = {
    id?: true
    company_id?: true
    rep?: true
    sector_id?: true
    core_technology_id?: true
    item_description?: true
    contact?: true
    address_road?: true
    address_detail?: true
    service_type_id?: true
    business_type_id?: true
    business_license_number?: true
    email?: true
    instagram_url?: true
    facebook_url?: true
    thumbnail?: true
  }

  export type Startup_infosCountAggregateInputType = {
    id?: true
    company_id?: true
    rep?: true
    sector_id?: true
    core_technology_id?: true
    item_description?: true
    contact?: true
    address_road?: true
    address_detail?: true
    service_type_id?: true
    business_type_id?: true
    business_license_number?: true
    email?: true
    instagram_url?: true
    facebook_url?: true
    thumbnail?: true
    _all?: true
  }

  export type AggregateStartup_infosArgs = {
    /**
     * Filter which startup_infos to aggregate.
    **/
    where?: startup_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_infos to fetch.
    **/
    orderBy?: Enumerable<startup_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: startup_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_infos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned startup_infos
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Startup_infosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Startup_infosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Startup_infosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Startup_infosMaxAggregateInputType
  }

  export type GetStartup_infosAggregateType<T extends AggregateStartup_infosArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetStartup_infosAggregateScalarType<T[P]>
  }

  export type GetStartup_infosAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Startup_infosAvgAggregateOutputType ? Startup_infosAvgAggregateOutputType[P] : never
  }

    



  export type startup_infosSelect = {
    id?: boolean
    company_id?: boolean
    rep?: boolean
    sector_id?: boolean
    core_technology_id?: boolean
    item_description?: boolean
    contact?: boolean
    address_road?: boolean
    address_detail?: boolean
    service_type_id?: boolean
    business_type_id?: boolean
    business_license_number?: boolean
    email?: boolean
    instagram_url?: boolean
    facebook_url?: boolean
    thumbnail?: boolean
    business_types?: boolean | business_typesArgs
    companies?: boolean | companiesArgs
    technologies?: boolean | technologiesArgs
    sectors?: boolean | sectorsArgs
    service_types?: boolean | service_typesArgs
    invested_from?: boolean | FindManyinvested_fromArgs
    startup_images?: boolean | FindManystartup_imagesArgs
  }

  export type startup_infosInclude = {
    business_types?: boolean | business_typesArgs
    companies?: boolean | companiesArgs
    technologies?: boolean | technologiesArgs
    sectors?: boolean | sectorsArgs
    service_types?: boolean | service_typesArgs
    invested_from?: boolean | FindManyinvested_fromArgs
    startup_images?: boolean | FindManystartup_imagesArgs
  }

  export type startup_infosGetPayload<
    S extends boolean | null | undefined | startup_infosArgs,
    U = keyof S
      > = S extends true
        ? startup_infos
    : S extends undefined
    ? never
    : S extends startup_infosArgs | FindManystartup_infosArgs
    ?'include' extends U
    ? startup_infos  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'business_types'
        ? business_typesGetPayload<S['include'][P]> | null :
        P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'technologies'
        ? technologiesGetPayload<S['include'][P]> | null :
        P extends 'sectors'
        ? sectorsGetPayload<S['include'][P]> | null :
        P extends 'service_types'
        ? service_typesGetPayload<S['include'][P]> | null :
        P extends 'invested_from'
        ? Array < invested_fromGetPayload<S['include'][P]>>  :
        P extends 'startup_images'
        ? Array < startup_imagesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof startup_infos ?startup_infos [P]
  : 
          P extends 'business_types'
        ? business_typesGetPayload<S['select'][P]> | null :
        P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'technologies'
        ? technologiesGetPayload<S['select'][P]> | null :
        P extends 'sectors'
        ? sectorsGetPayload<S['select'][P]> | null :
        P extends 'service_types'
        ? service_typesGetPayload<S['select'][P]> | null :
        P extends 'invested_from'
        ? Array < invested_fromGetPayload<S['select'][P]>>  :
        P extends 'startup_images'
        ? Array < startup_imagesGetPayload<S['select'][P]>>  : never
  } 
    : startup_infos
  : startup_infos


  export interface startup_infosDelegate {
    /**
     * Find zero or one Startup_infos that matches the filter.
     * @param {FindUniquestartup_infosArgs} args - Arguments to find a Startup_infos
     * @example
     * // Get one Startup_infos
     * const startup_infos = await prisma.startup_infos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquestartup_infosArgs>(
      args: Subset<T, FindUniquestartup_infosArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos | null>, Prisma__startup_infosClient<startup_infosGetPayload<T> | null>>

    /**
     * Find the first Startup_infos that matches the filter.
     * @param {FindFirststartup_infosArgs} args - Arguments to find a Startup_infos
     * @example
     * // Get one Startup_infos
     * const startup_infos = await prisma.startup_infos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirststartup_infosArgs>(
      args?: Subset<T, FindFirststartup_infosArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos | null>, Prisma__startup_infosClient<startup_infosGetPayload<T> | null>>

    /**
     * Find zero or more Startup_infos that matches the filter.
     * @param {FindManystartup_infosArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Startup_infos
     * const startup_infos = await prisma.startup_infos.findMany()
     * 
     * // Get first 10 Startup_infos
     * const startup_infos = await prisma.startup_infos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const startup_infosWithIdOnly = await prisma.startup_infos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManystartup_infosArgs>(
      args?: Subset<T, FindManystartup_infosArgs>
    ): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>

    /**
     * Create a Startup_infos.
     * @param {startup_infosCreateArgs} args - Arguments to create a Startup_infos.
     * @example
     * // Create one Startup_infos
     * const Startup_infos = await prisma.startup_infos.create({
     *   data: {
     *     // ... data to create a Startup_infos
     *   }
     * })
     * 
    **/
    create<T extends startup_infosCreateArgs>(
      args: Subset<T, startup_infosCreateArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos>, Prisma__startup_infosClient<startup_infosGetPayload<T>>>

    /**
     * Delete a Startup_infos.
     * @param {startup_infosDeleteArgs} args - Arguments to delete one Startup_infos.
     * @example
     * // Delete one Startup_infos
     * const Startup_infos = await prisma.startup_infos.delete({
     *   where: {
     *     // ... filter to delete one Startup_infos
     *   }
     * })
     * 
    **/
    delete<T extends startup_infosDeleteArgs>(
      args: Subset<T, startup_infosDeleteArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos>, Prisma__startup_infosClient<startup_infosGetPayload<T>>>

    /**
     * Update one Startup_infos.
     * @param {startup_infosUpdateArgs} args - Arguments to update one Startup_infos.
     * @example
     * // Update one Startup_infos
     * const startup_infos = await prisma.startup_infos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends startup_infosUpdateArgs>(
      args: Subset<T, startup_infosUpdateArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos>, Prisma__startup_infosClient<startup_infosGetPayload<T>>>

    /**
     * Delete zero or more Startup_infos.
     * @param {startup_infosDeleteManyArgs} args - Arguments to filter Startup_infos to delete.
     * @example
     * // Delete a few Startup_infos
     * const { count } = await prisma.startup_infos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends startup_infosDeleteManyArgs>(
      args?: Subset<T, startup_infosDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Startup_infos.
     * @param {startup_infosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Startup_infos
     * const startup_infos = await prisma.startup_infos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends startup_infosUpdateManyArgs>(
      args: Subset<T, startup_infosUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Startup_infos.
     * @param {startup_infosUpsertArgs} args - Arguments to update or create a Startup_infos.
     * @example
     * // Update or create a Startup_infos
     * const startup_infos = await prisma.startup_infos.upsert({
     *   create: {
     *     // ... data to create a Startup_infos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Startup_infos we want to update
     *   }
     * })
    **/
    upsert<T extends startup_infosUpsertArgs>(
      args: Subset<T, startup_infosUpsertArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos>, Prisma__startup_infosClient<startup_infosGetPayload<T>>>

    /**
     * Find zero or one Startup_infos that matches the filter.
     * @param {FindUniquestartup_infosArgs} args - Arguments to find a Startup_infos
     * @deprecated This will be deprecated please use prisma.startup_infos.findUnique
     * @example
     * // Get one Startup_infos
     * const startup_infos = await prisma.startup_infos.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquestartup_infosArgs>(
      args: Subset<T, FindUniquestartup_infosArgs>
    ): CheckSelect<T, Prisma__startup_infosClient<startup_infos | null>, Prisma__startup_infosClient<startup_infosGetPayload<T> | null>>

    /**
     * Count the number of Startup_infos.
     * @param {FindManystartup_infosArgs} args - Arguments to filter Startup_infos to count.
     * @example
     * // Count the number of Startup_infos
     * const count = await prisma.startup_infos.count({
     *   where: {
     *     // ... the filter for the Startup_infos we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManystartup_infosArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Startup_infos.
     * @param {AggregateStartup_infosArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateStartup_infosArgs>(args: Subset<T, AggregateStartup_infosArgs>): Promise<GetStartup_infosAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for startup_infos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__startup_infosClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    business_types<T extends business_typesArgs = {}>(args?: Subset<T, business_typesArgs>): CheckSelect<T, Prisma__business_typesClient<business_types | null>, Prisma__business_typesClient<business_typesGetPayload<T> | null>>;

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    technologies<T extends technologiesArgs = {}>(args?: Subset<T, technologiesArgs>): CheckSelect<T, Prisma__technologiesClient<technologies | null>, Prisma__technologiesClient<technologiesGetPayload<T> | null>>;

    sectors<T extends sectorsArgs = {}>(args?: Subset<T, sectorsArgs>): CheckSelect<T, Prisma__sectorsClient<sectors | null>, Prisma__sectorsClient<sectorsGetPayload<T> | null>>;

    service_types<T extends service_typesArgs = {}>(args?: Subset<T, service_typesArgs>): CheckSelect<T, Prisma__service_typesClient<service_types | null>, Prisma__service_typesClient<service_typesGetPayload<T> | null>>;

    invested_from<T extends FindManyinvested_fromArgs = {}>(args?: Subset<T, FindManyinvested_fromArgs>): CheckSelect<T, Promise<Array<invested_from>>, Promise<Array<invested_fromGetPayload<T>>>>;

    startup_images<T extends FindManystartup_imagesArgs = {}>(args?: Subset<T, FindManystartup_imagesArgs>): CheckSelect<T, Promise<Array<startup_images>>, Promise<Array<startup_imagesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * startup_infos findUnique
   */
  export type FindUniquestartup_infosArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * Filter, which startup_infos to fetch.
    **/
    where: startup_infosWhereUniqueInput
  }


  /**
   * startup_infos findFirst
   */
  export type FindFirststartup_infosArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * Filter, which startup_infos to fetch.
    **/
    where?: startup_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_infos to fetch.
    **/
    orderBy?: Enumerable<startup_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for startup_infos.
    **/
    cursor?: startup_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_infos.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of startup_infos.
    **/
    distinct?: Enumerable<Startup_infosScalarFieldEnum>
  }


  /**
   * startup_infos findMany
   */
  export type FindManystartup_infosArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * Filter, which startup_infos to fetch.
    **/
    where?: startup_infosWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_infos to fetch.
    **/
    orderBy?: Enumerable<startup_infosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing startup_infos.
    **/
    cursor?: startup_infosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_infos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_infos.
    **/
    skip?: number
    distinct?: Enumerable<Startup_infosScalarFieldEnum>
  }


  /**
   * startup_infos create
   */
  export type startup_infosCreateArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * The data needed to create a startup_infos.
    **/
    data: startup_infosCreateInput
  }


  /**
   * startup_infos update
   */
  export type startup_infosUpdateArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * The data needed to update a startup_infos.
    **/
    data: startup_infosUpdateInput
    /**
     * Choose, which startup_infos to update.
    **/
    where: startup_infosWhereUniqueInput
  }


  /**
   * startup_infos updateMany
   */
  export type startup_infosUpdateManyArgs = {
    data: startup_infosUpdateManyMutationInput
    where?: startup_infosWhereInput
  }


  /**
   * startup_infos upsert
   */
  export type startup_infosUpsertArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * The filter to search for the startup_infos to update in case it exists.
    **/
    where: startup_infosWhereUniqueInput
    /**
     * In case the startup_infos found by the `where` argument doesn't exist, create a new startup_infos with this data.
    **/
    create: startup_infosCreateInput
    /**
     * In case the startup_infos was found with the provided `where` argument, update it with this data.
    **/
    update: startup_infosUpdateInput
  }


  /**
   * startup_infos delete
   */
  export type startup_infosDeleteArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
    /**
     * Filter which startup_infos to delete.
    **/
    where: startup_infosWhereUniqueInput
  }


  /**
   * startup_infos deleteMany
   */
  export type startup_infosDeleteManyArgs = {
    where?: startup_infosWhereInput
  }


  /**
   * startup_infos without action
   */
  export type startup_infosArgs = {
    /**
     * Select specific fields to fetch from the startup_infos
    **/
    select?: startup_infosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_infosInclude | null
  }



  /**
   * Model startup_likes
   */


  export type AggregateStartup_likes = {
    count: number | null
    avg: Startup_likesAvgAggregateOutputType | null
    sum: Startup_likesSumAggregateOutputType | null
    min: Startup_likesMinAggregateOutputType | null
    max: Startup_likesMaxAggregateOutputType | null
  }

  export type Startup_likesAvgAggregateOutputType = {
    id: number
    user_id: number
    company_id: number
    is_liked: number
  }

  export type Startup_likesSumAggregateOutputType = {
    id: number
    user_id: number
    company_id: number
    is_liked: number
  }

  export type Startup_likesMinAggregateOutputType = {
    id: number
    user_id: number
    company_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Startup_likesMaxAggregateOutputType = {
    id: number
    user_id: number
    company_id: number
    is_liked: number
    created_at: Date | null
    updated_at: Date | null
  }

  export type Startup_likesCountAggregateOutputType = {
    id: number
    user_id: number
    company_id: number
    is_liked: number
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type Startup_likesAvgAggregateInputType = {
    id?: true
    user_id?: true
    company_id?: true
    is_liked?: true
  }

  export type Startup_likesSumAggregateInputType = {
    id?: true
    user_id?: true
    company_id?: true
    is_liked?: true
  }

  export type Startup_likesMinAggregateInputType = {
    id?: true
    user_id?: true
    company_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Startup_likesMaxAggregateInputType = {
    id?: true
    user_id?: true
    company_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
  }

  export type Startup_likesCountAggregateInputType = {
    id?: true
    user_id?: true
    company_id?: true
    is_liked?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateStartup_likesArgs = {
    /**
     * Filter which startup_likes to aggregate.
    **/
    where?: startup_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_likes to fetch.
    **/
    orderBy?: Enumerable<startup_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: startup_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned startup_likes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Startup_likesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Startup_likesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Startup_likesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Startup_likesMaxAggregateInputType
  }

  export type GetStartup_likesAggregateType<T extends AggregateStartup_likesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetStartup_likesAggregateScalarType<T[P]>
  }

  export type GetStartup_likesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Startup_likesAvgAggregateOutputType ? Startup_likesAvgAggregateOutputType[P] : never
  }

    



  export type startup_likesSelect = {
    id?: boolean
    user_id?: boolean
    company_id?: boolean
    is_liked?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | companiesArgs
    users?: boolean | usersArgs
  }

  export type startup_likesInclude = {
    companies?: boolean | companiesArgs
    users?: boolean | usersArgs
  }

  export type startup_likesGetPayload<
    S extends boolean | null | undefined | startup_likesArgs,
    U = keyof S
      > = S extends true
        ? startup_likes
    : S extends undefined
    ? never
    : S extends startup_likesArgs | FindManystartup_likesArgs
    ?'include' extends U
    ? startup_likes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof startup_likes ?startup_likes [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : startup_likes
  : startup_likes


  export interface startup_likesDelegate {
    /**
     * Find zero or one Startup_likes that matches the filter.
     * @param {FindUniquestartup_likesArgs} args - Arguments to find a Startup_likes
     * @example
     * // Get one Startup_likes
     * const startup_likes = await prisma.startup_likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquestartup_likesArgs>(
      args: Subset<T, FindUniquestartup_likesArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes | null>, Prisma__startup_likesClient<startup_likesGetPayload<T> | null>>

    /**
     * Find the first Startup_likes that matches the filter.
     * @param {FindFirststartup_likesArgs} args - Arguments to find a Startup_likes
     * @example
     * // Get one Startup_likes
     * const startup_likes = await prisma.startup_likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirststartup_likesArgs>(
      args?: Subset<T, FindFirststartup_likesArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes | null>, Prisma__startup_likesClient<startup_likesGetPayload<T> | null>>

    /**
     * Find zero or more Startup_likes that matches the filter.
     * @param {FindManystartup_likesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Startup_likes
     * const startup_likes = await prisma.startup_likes.findMany()
     * 
     * // Get first 10 Startup_likes
     * const startup_likes = await prisma.startup_likes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const startup_likesWithIdOnly = await prisma.startup_likes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManystartup_likesArgs>(
      args?: Subset<T, FindManystartup_likesArgs>
    ): CheckSelect<T, Promise<Array<startup_likes>>, Promise<Array<startup_likesGetPayload<T>>>>

    /**
     * Create a Startup_likes.
     * @param {startup_likesCreateArgs} args - Arguments to create a Startup_likes.
     * @example
     * // Create one Startup_likes
     * const Startup_likes = await prisma.startup_likes.create({
     *   data: {
     *     // ... data to create a Startup_likes
     *   }
     * })
     * 
    **/
    create<T extends startup_likesCreateArgs>(
      args: Subset<T, startup_likesCreateArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes>, Prisma__startup_likesClient<startup_likesGetPayload<T>>>

    /**
     * Delete a Startup_likes.
     * @param {startup_likesDeleteArgs} args - Arguments to delete one Startup_likes.
     * @example
     * // Delete one Startup_likes
     * const Startup_likes = await prisma.startup_likes.delete({
     *   where: {
     *     // ... filter to delete one Startup_likes
     *   }
     * })
     * 
    **/
    delete<T extends startup_likesDeleteArgs>(
      args: Subset<T, startup_likesDeleteArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes>, Prisma__startup_likesClient<startup_likesGetPayload<T>>>

    /**
     * Update one Startup_likes.
     * @param {startup_likesUpdateArgs} args - Arguments to update one Startup_likes.
     * @example
     * // Update one Startup_likes
     * const startup_likes = await prisma.startup_likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends startup_likesUpdateArgs>(
      args: Subset<T, startup_likesUpdateArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes>, Prisma__startup_likesClient<startup_likesGetPayload<T>>>

    /**
     * Delete zero or more Startup_likes.
     * @param {startup_likesDeleteManyArgs} args - Arguments to filter Startup_likes to delete.
     * @example
     * // Delete a few Startup_likes
     * const { count } = await prisma.startup_likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends startup_likesDeleteManyArgs>(
      args?: Subset<T, startup_likesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Startup_likes.
     * @param {startup_likesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Startup_likes
     * const startup_likes = await prisma.startup_likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends startup_likesUpdateManyArgs>(
      args: Subset<T, startup_likesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Startup_likes.
     * @param {startup_likesUpsertArgs} args - Arguments to update or create a Startup_likes.
     * @example
     * // Update or create a Startup_likes
     * const startup_likes = await prisma.startup_likes.upsert({
     *   create: {
     *     // ... data to create a Startup_likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Startup_likes we want to update
     *   }
     * })
    **/
    upsert<T extends startup_likesUpsertArgs>(
      args: Subset<T, startup_likesUpsertArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes>, Prisma__startup_likesClient<startup_likesGetPayload<T>>>

    /**
     * Find zero or one Startup_likes that matches the filter.
     * @param {FindUniquestartup_likesArgs} args - Arguments to find a Startup_likes
     * @deprecated This will be deprecated please use prisma.startup_likes.findUnique
     * @example
     * // Get one Startup_likes
     * const startup_likes = await prisma.startup_likes.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquestartup_likesArgs>(
      args: Subset<T, FindUniquestartup_likesArgs>
    ): CheckSelect<T, Prisma__startup_likesClient<startup_likes | null>, Prisma__startup_likesClient<startup_likesGetPayload<T> | null>>

    /**
     * Count the number of Startup_likes.
     * @param {FindManystartup_likesArgs} args - Arguments to filter Startup_likes to count.
     * @example
     * // Count the number of Startup_likes
     * const count = await prisma.startup_likes.count({
     *   where: {
     *     // ... the filter for the Startup_likes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManystartup_likesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Startup_likes.
     * @param {AggregateStartup_likesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateStartup_likesArgs>(args: Subset<T, AggregateStartup_likesArgs>): Promise<GetStartup_likesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for startup_likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__startup_likesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * startup_likes findUnique
   */
  export type FindUniquestartup_likesArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * Filter, which startup_likes to fetch.
    **/
    where: startup_likesWhereUniqueInput
  }


  /**
   * startup_likes findFirst
   */
  export type FindFirststartup_likesArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * Filter, which startup_likes to fetch.
    **/
    where?: startup_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_likes to fetch.
    **/
    orderBy?: Enumerable<startup_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for startup_likes.
    **/
    cursor?: startup_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_likes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of startup_likes.
    **/
    distinct?: Enumerable<Startup_likesScalarFieldEnum>
  }


  /**
   * startup_likes findMany
   */
  export type FindManystartup_likesArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * Filter, which startup_likes to fetch.
    **/
    where?: startup_likesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of startup_likes to fetch.
    **/
    orderBy?: Enumerable<startup_likesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing startup_likes.
    **/
    cursor?: startup_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` startup_likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` startup_likes.
    **/
    skip?: number
    distinct?: Enumerable<Startup_likesScalarFieldEnum>
  }


  /**
   * startup_likes create
   */
  export type startup_likesCreateArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * The data needed to create a startup_likes.
    **/
    data: startup_likesCreateInput
  }


  /**
   * startup_likes update
   */
  export type startup_likesUpdateArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * The data needed to update a startup_likes.
    **/
    data: startup_likesUpdateInput
    /**
     * Choose, which startup_likes to update.
    **/
    where: startup_likesWhereUniqueInput
  }


  /**
   * startup_likes updateMany
   */
  export type startup_likesUpdateManyArgs = {
    data: startup_likesUpdateManyMutationInput
    where?: startup_likesWhereInput
  }


  /**
   * startup_likes upsert
   */
  export type startup_likesUpsertArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * The filter to search for the startup_likes to update in case it exists.
    **/
    where: startup_likesWhereUniqueInput
    /**
     * In case the startup_likes found by the `where` argument doesn't exist, create a new startup_likes with this data.
    **/
    create: startup_likesCreateInput
    /**
     * In case the startup_likes was found with the provided `where` argument, update it with this data.
    **/
    update: startup_likesUpdateInput
  }


  /**
   * startup_likes delete
   */
  export type startup_likesDeleteArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
    /**
     * Filter which startup_likes to delete.
    **/
    where: startup_likesWhereUniqueInput
  }


  /**
   * startup_likes deleteMany
   */
  export type startup_likesDeleteManyArgs = {
    where?: startup_likesWhereInput
  }


  /**
   * startup_likes without action
   */
  export type startup_likesArgs = {
    /**
     * Select specific fields to fetch from the startup_likes
    **/
    select?: startup_likesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: startup_likesInclude | null
  }



  /**
   * Model technologies
   */


  export type AggregateTechnologies = {
    count: number | null
    avg: TechnologiesAvgAggregateOutputType | null
    sum: TechnologiesSumAggregateOutputType | null
    min: TechnologiesMinAggregateOutputType | null
    max: TechnologiesMaxAggregateOutputType | null
  }

  export type TechnologiesAvgAggregateOutputType = {
    id: number
  }

  export type TechnologiesSumAggregateOutputType = {
    id: number
  }

  export type TechnologiesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TechnologiesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TechnologiesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type TechnologiesAvgAggregateInputType = {
    id?: true
  }

  export type TechnologiesSumAggregateInputType = {
    id?: true
  }

  export type TechnologiesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TechnologiesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TechnologiesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateTechnologiesArgs = {
    /**
     * Filter which technologies to aggregate.
    **/
    where?: technologiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of technologies to fetch.
    **/
    orderBy?: Enumerable<technologiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: technologiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` technologies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` technologies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned technologies
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TechnologiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TechnologiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TechnologiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TechnologiesMaxAggregateInputType
  }

  export type GetTechnologiesAggregateType<T extends AggregateTechnologiesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetTechnologiesAggregateScalarType<T[P]>
  }

  export type GetTechnologiesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof TechnologiesAvgAggregateOutputType ? TechnologiesAvgAggregateOutputType[P] : never
  }

    



  export type technologiesSelect = {
    id?: boolean
    name?: boolean
    partner_infos?: boolean | FindManypartner_infosArgs
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type technologiesInclude = {
    partner_infos?: boolean | FindManypartner_infosArgs
    startup_infos?: boolean | FindManystartup_infosArgs
  }

  export type technologiesGetPayload<
    S extends boolean | null | undefined | technologiesArgs,
    U = keyof S
      > = S extends true
        ? technologies
    : S extends undefined
    ? never
    : S extends technologiesArgs | FindManytechnologiesArgs
    ?'include' extends U
    ? technologies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['include'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof technologies ?technologies [P]
  : 
          P extends 'partner_infos'
        ? Array < partner_infosGetPayload<S['select'][P]>>  :
        P extends 'startup_infos'
        ? Array < startup_infosGetPayload<S['select'][P]>>  : never
  } 
    : technologies
  : technologies


  export interface technologiesDelegate {
    /**
     * Find zero or one Technologies that matches the filter.
     * @param {FindUniquetechnologiesArgs} args - Arguments to find a Technologies
     * @example
     * // Get one Technologies
     * const technologies = await prisma.technologies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquetechnologiesArgs>(
      args: Subset<T, FindUniquetechnologiesArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies | null>, Prisma__technologiesClient<technologiesGetPayload<T> | null>>

    /**
     * Find the first Technologies that matches the filter.
     * @param {FindFirsttechnologiesArgs} args - Arguments to find a Technologies
     * @example
     * // Get one Technologies
     * const technologies = await prisma.technologies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirsttechnologiesArgs>(
      args?: Subset<T, FindFirsttechnologiesArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies | null>, Prisma__technologiesClient<technologiesGetPayload<T> | null>>

    /**
     * Find zero or more Technologies that matches the filter.
     * @param {FindManytechnologiesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Technologies
     * const technologies = await prisma.technologies.findMany()
     * 
     * // Get first 10 Technologies
     * const technologies = await prisma.technologies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const technologiesWithIdOnly = await prisma.technologies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManytechnologiesArgs>(
      args?: Subset<T, FindManytechnologiesArgs>
    ): CheckSelect<T, Promise<Array<technologies>>, Promise<Array<technologiesGetPayload<T>>>>

    /**
     * Create a Technologies.
     * @param {technologiesCreateArgs} args - Arguments to create a Technologies.
     * @example
     * // Create one Technologies
     * const Technologies = await prisma.technologies.create({
     *   data: {
     *     // ... data to create a Technologies
     *   }
     * })
     * 
    **/
    create<T extends technologiesCreateArgs>(
      args: Subset<T, technologiesCreateArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies>, Prisma__technologiesClient<technologiesGetPayload<T>>>

    /**
     * Delete a Technologies.
     * @param {technologiesDeleteArgs} args - Arguments to delete one Technologies.
     * @example
     * // Delete one Technologies
     * const Technologies = await prisma.technologies.delete({
     *   where: {
     *     // ... filter to delete one Technologies
     *   }
     * })
     * 
    **/
    delete<T extends technologiesDeleteArgs>(
      args: Subset<T, technologiesDeleteArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies>, Prisma__technologiesClient<technologiesGetPayload<T>>>

    /**
     * Update one Technologies.
     * @param {technologiesUpdateArgs} args - Arguments to update one Technologies.
     * @example
     * // Update one Technologies
     * const technologies = await prisma.technologies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends technologiesUpdateArgs>(
      args: Subset<T, technologiesUpdateArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies>, Prisma__technologiesClient<technologiesGetPayload<T>>>

    /**
     * Delete zero or more Technologies.
     * @param {technologiesDeleteManyArgs} args - Arguments to filter Technologies to delete.
     * @example
     * // Delete a few Technologies
     * const { count } = await prisma.technologies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends technologiesDeleteManyArgs>(
      args?: Subset<T, technologiesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Technologies.
     * @param {technologiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Technologies
     * const technologies = await prisma.technologies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends technologiesUpdateManyArgs>(
      args: Subset<T, technologiesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Technologies.
     * @param {technologiesUpsertArgs} args - Arguments to update or create a Technologies.
     * @example
     * // Update or create a Technologies
     * const technologies = await prisma.technologies.upsert({
     *   create: {
     *     // ... data to create a Technologies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Technologies we want to update
     *   }
     * })
    **/
    upsert<T extends technologiesUpsertArgs>(
      args: Subset<T, technologiesUpsertArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies>, Prisma__technologiesClient<technologiesGetPayload<T>>>

    /**
     * Find zero or one Technologies that matches the filter.
     * @param {FindUniquetechnologiesArgs} args - Arguments to find a Technologies
     * @deprecated This will be deprecated please use prisma.technologies.findUnique
     * @example
     * // Get one Technologies
     * const technologies = await prisma.technologies.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquetechnologiesArgs>(
      args: Subset<T, FindUniquetechnologiesArgs>
    ): CheckSelect<T, Prisma__technologiesClient<technologies | null>, Prisma__technologiesClient<technologiesGetPayload<T> | null>>

    /**
     * Count the number of Technologies.
     * @param {FindManytechnologiesArgs} args - Arguments to filter Technologies to count.
     * @example
     * // Count the number of Technologies
     * const count = await prisma.technologies.count({
     *   where: {
     *     // ... the filter for the Technologies we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManytechnologiesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Technologies.
     * @param {AggregateTechnologiesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateTechnologiesArgs>(args: Subset<T, AggregateTechnologiesArgs>): Promise<GetTechnologiesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for technologies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__technologiesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    partner_infos<T extends FindManypartner_infosArgs = {}>(args?: Subset<T, FindManypartner_infosArgs>): CheckSelect<T, Promise<Array<partner_infos>>, Promise<Array<partner_infosGetPayload<T>>>>;

    startup_infos<T extends FindManystartup_infosArgs = {}>(args?: Subset<T, FindManystartup_infosArgs>): CheckSelect<T, Promise<Array<startup_infos>>, Promise<Array<startup_infosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * technologies findUnique
   */
  export type FindUniquetechnologiesArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * Filter, which technologies to fetch.
    **/
    where: technologiesWhereUniqueInput
  }


  /**
   * technologies findFirst
   */
  export type FindFirsttechnologiesArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * Filter, which technologies to fetch.
    **/
    where?: technologiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of technologies to fetch.
    **/
    orderBy?: Enumerable<technologiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for technologies.
    **/
    cursor?: technologiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` technologies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` technologies.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of technologies.
    **/
    distinct?: Enumerable<TechnologiesScalarFieldEnum>
  }


  /**
   * technologies findMany
   */
  export type FindManytechnologiesArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * Filter, which technologies to fetch.
    **/
    where?: technologiesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of technologies to fetch.
    **/
    orderBy?: Enumerable<technologiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing technologies.
    **/
    cursor?: technologiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` technologies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` technologies.
    **/
    skip?: number
    distinct?: Enumerable<TechnologiesScalarFieldEnum>
  }


  /**
   * technologies create
   */
  export type technologiesCreateArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * The data needed to create a technologies.
    **/
    data: technologiesCreateInput
  }


  /**
   * technologies update
   */
  export type technologiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * The data needed to update a technologies.
    **/
    data: technologiesUpdateInput
    /**
     * Choose, which technologies to update.
    **/
    where: technologiesWhereUniqueInput
  }


  /**
   * technologies updateMany
   */
  export type technologiesUpdateManyArgs = {
    data: technologiesUpdateManyMutationInput
    where?: technologiesWhereInput
  }


  /**
   * technologies upsert
   */
  export type technologiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * The filter to search for the technologies to update in case it exists.
    **/
    where: technologiesWhereUniqueInput
    /**
     * In case the technologies found by the `where` argument doesn't exist, create a new technologies with this data.
    **/
    create: technologiesCreateInput
    /**
     * In case the technologies was found with the provided `where` argument, update it with this data.
    **/
    update: technologiesUpdateInput
  }


  /**
   * technologies delete
   */
  export type technologiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
    /**
     * Filter which technologies to delete.
    **/
    where: technologiesWhereUniqueInput
  }


  /**
   * technologies deleteMany
   */
  export type technologiesDeleteManyArgs = {
    where?: technologiesWhereInput
  }


  /**
   * technologies without action
   */
  export type technologiesArgs = {
    /**
     * Select specific fields to fetch from the technologies
    **/
    select?: technologiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: technologiesInclude | null
  }



  /**
   * Model terms
   */


  export type AggregateTerms = {
    count: number | null
    avg: TermsAvgAggregateOutputType | null
    sum: TermsSumAggregateOutputType | null
    min: TermsMinAggregateOutputType | null
    max: TermsMaxAggregateOutputType | null
  }

  export type TermsAvgAggregateOutputType = {
    id: number
  }

  export type TermsSumAggregateOutputType = {
    id: number
  }

  export type TermsMinAggregateOutputType = {
    id: number
    name: string | null
    content: string | null
  }

  export type TermsMaxAggregateOutputType = {
    id: number
    name: string | null
    content: string | null
  }

  export type TermsCountAggregateOutputType = {
    id: number
    name: number | null
    content: number | null
    _all: number
  }


  export type TermsAvgAggregateInputType = {
    id?: true
  }

  export type TermsSumAggregateInputType = {
    id?: true
  }

  export type TermsMinAggregateInputType = {
    id?: true
    name?: true
    content?: true
  }

  export type TermsMaxAggregateInputType = {
    id?: true
    name?: true
    content?: true
  }

  export type TermsCountAggregateInputType = {
    id?: true
    name?: true
    content?: true
    _all?: true
  }

  export type AggregateTermsArgs = {
    /**
     * Filter which terms to aggregate.
    **/
    where?: termsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of terms to fetch.
    **/
    orderBy?: Enumerable<termsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: termsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` terms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` terms.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned terms
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TermsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TermsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TermsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TermsMaxAggregateInputType
  }

  export type GetTermsAggregateType<T extends AggregateTermsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetTermsAggregateScalarType<T[P]>
  }

  export type GetTermsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof TermsAvgAggregateOutputType ? TermsAvgAggregateOutputType[P] : never
  }

    



  export type termsSelect = {
    id?: boolean
    name?: boolean
    content?: boolean
    user_agreements?: boolean | FindManyuser_agreementsArgs
  }

  export type termsInclude = {
    user_agreements?: boolean | FindManyuser_agreementsArgs
  }

  export type termsGetPayload<
    S extends boolean | null | undefined | termsArgs,
    U = keyof S
      > = S extends true
        ? terms
    : S extends undefined
    ? never
    : S extends termsArgs | FindManytermsArgs
    ?'include' extends U
    ? terms  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user_agreements'
        ? Array < user_agreementsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof terms ?terms [P]
  : 
          P extends 'user_agreements'
        ? Array < user_agreementsGetPayload<S['select'][P]>>  : never
  } 
    : terms
  : terms


  export interface termsDelegate {
    /**
     * Find zero or one Terms that matches the filter.
     * @param {FindUniquetermsArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquetermsArgs>(
      args: Subset<T, FindUniquetermsArgs>
    ): CheckSelect<T, Prisma__termsClient<terms | null>, Prisma__termsClient<termsGetPayload<T> | null>>

    /**
     * Find the first Terms that matches the filter.
     * @param {FindFirsttermsArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirsttermsArgs>(
      args?: Subset<T, FindFirsttermsArgs>
    ): CheckSelect<T, Prisma__termsClient<terms | null>, Prisma__termsClient<termsGetPayload<T> | null>>

    /**
     * Find zero or more Terms that matches the filter.
     * @param {FindManytermsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.terms.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.terms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termsWithIdOnly = await prisma.terms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManytermsArgs>(
      args?: Subset<T, FindManytermsArgs>
    ): CheckSelect<T, Promise<Array<terms>>, Promise<Array<termsGetPayload<T>>>>

    /**
     * Create a Terms.
     * @param {termsCreateArgs} args - Arguments to create a Terms.
     * @example
     * // Create one Terms
     * const Terms = await prisma.terms.create({
     *   data: {
     *     // ... data to create a Terms
     *   }
     * })
     * 
    **/
    create<T extends termsCreateArgs>(
      args: Subset<T, termsCreateArgs>
    ): CheckSelect<T, Prisma__termsClient<terms>, Prisma__termsClient<termsGetPayload<T>>>

    /**
     * Delete a Terms.
     * @param {termsDeleteArgs} args - Arguments to delete one Terms.
     * @example
     * // Delete one Terms
     * const Terms = await prisma.terms.delete({
     *   where: {
     *     // ... filter to delete one Terms
     *   }
     * })
     * 
    **/
    delete<T extends termsDeleteArgs>(
      args: Subset<T, termsDeleteArgs>
    ): CheckSelect<T, Prisma__termsClient<terms>, Prisma__termsClient<termsGetPayload<T>>>

    /**
     * Update one Terms.
     * @param {termsUpdateArgs} args - Arguments to update one Terms.
     * @example
     * // Update one Terms
     * const terms = await prisma.terms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends termsUpdateArgs>(
      args: Subset<T, termsUpdateArgs>
    ): CheckSelect<T, Prisma__termsClient<terms>, Prisma__termsClient<termsGetPayload<T>>>

    /**
     * Delete zero or more Terms.
     * @param {termsDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.terms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends termsDeleteManyArgs>(
      args?: Subset<T, termsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Terms.
     * @param {termsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const terms = await prisma.terms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends termsUpdateManyArgs>(
      args: Subset<T, termsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Terms.
     * @param {termsUpsertArgs} args - Arguments to update or create a Terms.
     * @example
     * // Update or create a Terms
     * const terms = await prisma.terms.upsert({
     *   create: {
     *     // ... data to create a Terms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Terms we want to update
     *   }
     * })
    **/
    upsert<T extends termsUpsertArgs>(
      args: Subset<T, termsUpsertArgs>
    ): CheckSelect<T, Prisma__termsClient<terms>, Prisma__termsClient<termsGetPayload<T>>>

    /**
     * Find zero or one Terms that matches the filter.
     * @param {FindUniquetermsArgs} args - Arguments to find a Terms
     * @deprecated This will be deprecated please use prisma.terms.findUnique
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquetermsArgs>(
      args: Subset<T, FindUniquetermsArgs>
    ): CheckSelect<T, Prisma__termsClient<terms | null>, Prisma__termsClient<termsGetPayload<T> | null>>

    /**
     * Count the number of Terms.
     * @param {FindManytermsArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.terms.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManytermsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Terms.
     * @param {AggregateTermsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateTermsArgs>(args: Subset<T, AggregateTermsArgs>): Promise<GetTermsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for terms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__termsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_agreements<T extends FindManyuser_agreementsArgs = {}>(args?: Subset<T, FindManyuser_agreementsArgs>): CheckSelect<T, Promise<Array<user_agreements>>, Promise<Array<user_agreementsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * terms findUnique
   */
  export type FindUniquetermsArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * Filter, which terms to fetch.
    **/
    where: termsWhereUniqueInput
  }


  /**
   * terms findFirst
   */
  export type FindFirsttermsArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * Filter, which terms to fetch.
    **/
    where?: termsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of terms to fetch.
    **/
    orderBy?: Enumerable<termsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for terms.
    **/
    cursor?: termsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` terms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` terms.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of terms.
    **/
    distinct?: Enumerable<TermsScalarFieldEnum>
  }


  /**
   * terms findMany
   */
  export type FindManytermsArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * Filter, which terms to fetch.
    **/
    where?: termsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of terms to fetch.
    **/
    orderBy?: Enumerable<termsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing terms.
    **/
    cursor?: termsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` terms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` terms.
    **/
    skip?: number
    distinct?: Enumerable<TermsScalarFieldEnum>
  }


  /**
   * terms create
   */
  export type termsCreateArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * The data needed to create a terms.
    **/
    data: termsCreateInput
  }


  /**
   * terms update
   */
  export type termsUpdateArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * The data needed to update a terms.
    **/
    data: termsUpdateInput
    /**
     * Choose, which terms to update.
    **/
    where: termsWhereUniqueInput
  }


  /**
   * terms updateMany
   */
  export type termsUpdateManyArgs = {
    data: termsUpdateManyMutationInput
    where?: termsWhereInput
  }


  /**
   * terms upsert
   */
  export type termsUpsertArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * The filter to search for the terms to update in case it exists.
    **/
    where: termsWhereUniqueInput
    /**
     * In case the terms found by the `where` argument doesn't exist, create a new terms with this data.
    **/
    create: termsCreateInput
    /**
     * In case the terms was found with the provided `where` argument, update it with this data.
    **/
    update: termsUpdateInput
  }


  /**
   * terms delete
   */
  export type termsDeleteArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
    /**
     * Filter which terms to delete.
    **/
    where: termsWhereUniqueInput
  }


  /**
   * terms deleteMany
   */
  export type termsDeleteManyArgs = {
    where?: termsWhereInput
  }


  /**
   * terms without action
   */
  export type termsArgs = {
    /**
     * Select specific fields to fetch from the terms
    **/
    select?: termsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: termsInclude | null
  }



  /**
   * Model user_agreements
   */


  export type AggregateUser_agreements = {
    count: number | null
    avg: User_agreementsAvgAggregateOutputType | null
    sum: User_agreementsSumAggregateOutputType | null
    min: User_agreementsMinAggregateOutputType | null
    max: User_agreementsMaxAggregateOutputType | null
  }

  export type User_agreementsAvgAggregateOutputType = {
    id: number
    user_id: number
    term_id: number
  }

  export type User_agreementsSumAggregateOutputType = {
    id: number
    user_id: number
    term_id: number
  }

  export type User_agreementsMinAggregateOutputType = {
    id: number
    user_id: number
    term_id: number
  }

  export type User_agreementsMaxAggregateOutputType = {
    id: number
    user_id: number
    term_id: number
  }

  export type User_agreementsCountAggregateOutputType = {
    id: number
    user_id: number
    term_id: number
    _all: number
  }


  export type User_agreementsAvgAggregateInputType = {
    id?: true
    user_id?: true
    term_id?: true
  }

  export type User_agreementsSumAggregateInputType = {
    id?: true
    user_id?: true
    term_id?: true
  }

  export type User_agreementsMinAggregateInputType = {
    id?: true
    user_id?: true
    term_id?: true
  }

  export type User_agreementsMaxAggregateInputType = {
    id?: true
    user_id?: true
    term_id?: true
  }

  export type User_agreementsCountAggregateInputType = {
    id?: true
    user_id?: true
    term_id?: true
    _all?: true
  }

  export type AggregateUser_agreementsArgs = {
    /**
     * Filter which user_agreements to aggregate.
    **/
    where?: user_agreementsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_agreements to fetch.
    **/
    orderBy?: Enumerable<user_agreementsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: user_agreementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_agreements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_agreements.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_agreements
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: User_agreementsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: User_agreementsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: User_agreementsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: User_agreementsMaxAggregateInputType
  }

  export type GetUser_agreementsAggregateType<T extends AggregateUser_agreementsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUser_agreementsAggregateScalarType<T[P]>
  }

  export type GetUser_agreementsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof User_agreementsAvgAggregateOutputType ? User_agreementsAvgAggregateOutputType[P] : never
  }

    



  export type user_agreementsSelect = {
    id?: boolean
    user_id?: boolean
    term_id?: boolean
    terms?: boolean | termsArgs
    users?: boolean | usersArgs
  }

  export type user_agreementsInclude = {
    terms?: boolean | termsArgs
    users?: boolean | usersArgs
  }

  export type user_agreementsGetPayload<
    S extends boolean | null | undefined | user_agreementsArgs,
    U = keyof S
      > = S extends true
        ? user_agreements
    : S extends undefined
    ? never
    : S extends user_agreementsArgs | FindManyuser_agreementsArgs
    ?'include' extends U
    ? user_agreements  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'terms'
        ? termsGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user_agreements ?user_agreements [P]
  : 
          P extends 'terms'
        ? termsGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : user_agreements
  : user_agreements


  export interface user_agreementsDelegate {
    /**
     * Find zero or one User_agreements that matches the filter.
     * @param {FindUniqueuser_agreementsArgs} args - Arguments to find a User_agreements
     * @example
     * // Get one User_agreements
     * const user_agreements = await prisma.user_agreements.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueuser_agreementsArgs>(
      args: Subset<T, FindUniqueuser_agreementsArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements | null>, Prisma__user_agreementsClient<user_agreementsGetPayload<T> | null>>

    /**
     * Find the first User_agreements that matches the filter.
     * @param {FindFirstuser_agreementsArgs} args - Arguments to find a User_agreements
     * @example
     * // Get one User_agreements
     * const user_agreements = await prisma.user_agreements.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstuser_agreementsArgs>(
      args?: Subset<T, FindFirstuser_agreementsArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements | null>, Prisma__user_agreementsClient<user_agreementsGetPayload<T> | null>>

    /**
     * Find zero or more User_agreements that matches the filter.
     * @param {FindManyuser_agreementsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_agreements
     * const user_agreements = await prisma.user_agreements.findMany()
     * 
     * // Get first 10 User_agreements
     * const user_agreements = await prisma.user_agreements.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_agreementsWithIdOnly = await prisma.user_agreements.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyuser_agreementsArgs>(
      args?: Subset<T, FindManyuser_agreementsArgs>
    ): CheckSelect<T, Promise<Array<user_agreements>>, Promise<Array<user_agreementsGetPayload<T>>>>

    /**
     * Create a User_agreements.
     * @param {user_agreementsCreateArgs} args - Arguments to create a User_agreements.
     * @example
     * // Create one User_agreements
     * const User_agreements = await prisma.user_agreements.create({
     *   data: {
     *     // ... data to create a User_agreements
     *   }
     * })
     * 
    **/
    create<T extends user_agreementsCreateArgs>(
      args: Subset<T, user_agreementsCreateArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements>, Prisma__user_agreementsClient<user_agreementsGetPayload<T>>>

    /**
     * Delete a User_agreements.
     * @param {user_agreementsDeleteArgs} args - Arguments to delete one User_agreements.
     * @example
     * // Delete one User_agreements
     * const User_agreements = await prisma.user_agreements.delete({
     *   where: {
     *     // ... filter to delete one User_agreements
     *   }
     * })
     * 
    **/
    delete<T extends user_agreementsDeleteArgs>(
      args: Subset<T, user_agreementsDeleteArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements>, Prisma__user_agreementsClient<user_agreementsGetPayload<T>>>

    /**
     * Update one User_agreements.
     * @param {user_agreementsUpdateArgs} args - Arguments to update one User_agreements.
     * @example
     * // Update one User_agreements
     * const user_agreements = await prisma.user_agreements.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_agreementsUpdateArgs>(
      args: Subset<T, user_agreementsUpdateArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements>, Prisma__user_agreementsClient<user_agreementsGetPayload<T>>>

    /**
     * Delete zero or more User_agreements.
     * @param {user_agreementsDeleteManyArgs} args - Arguments to filter User_agreements to delete.
     * @example
     * // Delete a few User_agreements
     * const { count } = await prisma.user_agreements.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_agreementsDeleteManyArgs>(
      args?: Subset<T, user_agreementsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more User_agreements.
     * @param {user_agreementsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_agreements
     * const user_agreements = await prisma.user_agreements.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_agreementsUpdateManyArgs>(
      args: Subset<T, user_agreementsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User_agreements.
     * @param {user_agreementsUpsertArgs} args - Arguments to update or create a User_agreements.
     * @example
     * // Update or create a User_agreements
     * const user_agreements = await prisma.user_agreements.upsert({
     *   create: {
     *     // ... data to create a User_agreements
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_agreements we want to update
     *   }
     * })
    **/
    upsert<T extends user_agreementsUpsertArgs>(
      args: Subset<T, user_agreementsUpsertArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements>, Prisma__user_agreementsClient<user_agreementsGetPayload<T>>>

    /**
     * Find zero or one User_agreements that matches the filter.
     * @param {FindUniqueuser_agreementsArgs} args - Arguments to find a User_agreements
     * @deprecated This will be deprecated please use prisma.user_agreements.findUnique
     * @example
     * // Get one User_agreements
     * const user_agreements = await prisma.user_agreements.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueuser_agreementsArgs>(
      args: Subset<T, FindUniqueuser_agreementsArgs>
    ): CheckSelect<T, Prisma__user_agreementsClient<user_agreements | null>, Prisma__user_agreementsClient<user_agreementsGetPayload<T> | null>>

    /**
     * Count the number of User_agreements.
     * @param {FindManyuser_agreementsArgs} args - Arguments to filter User_agreements to count.
     * @example
     * // Count the number of User_agreements
     * const count = await prisma.user_agreements.count({
     *   where: {
     *     // ... the filter for the User_agreements we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyuser_agreementsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User_agreements.
     * @param {AggregateUser_agreementsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUser_agreementsArgs>(args: Subset<T, AggregateUser_agreementsArgs>): Promise<GetUser_agreementsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user_agreements.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_agreementsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    terms<T extends termsArgs = {}>(args?: Subset<T, termsArgs>): CheckSelect<T, Prisma__termsClient<terms | null>, Prisma__termsClient<termsGetPayload<T> | null>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_agreements findUnique
   */
  export type FindUniqueuser_agreementsArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * Filter, which user_agreements to fetch.
    **/
    where: user_agreementsWhereUniqueInput
  }


  /**
   * user_agreements findFirst
   */
  export type FindFirstuser_agreementsArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * Filter, which user_agreements to fetch.
    **/
    where?: user_agreementsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_agreements to fetch.
    **/
    orderBy?: Enumerable<user_agreementsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_agreements.
    **/
    cursor?: user_agreementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_agreements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_agreements.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of user_agreements.
    **/
    distinct?: Enumerable<User_agreementsScalarFieldEnum>
  }


  /**
   * user_agreements findMany
   */
  export type FindManyuser_agreementsArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * Filter, which user_agreements to fetch.
    **/
    where?: user_agreementsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_agreements to fetch.
    **/
    orderBy?: Enumerable<user_agreementsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_agreements.
    **/
    cursor?: user_agreementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_agreements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_agreements.
    **/
    skip?: number
    distinct?: Enumerable<User_agreementsScalarFieldEnum>
  }


  /**
   * user_agreements create
   */
  export type user_agreementsCreateArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * The data needed to create a user_agreements.
    **/
    data: user_agreementsCreateInput
  }


  /**
   * user_agreements update
   */
  export type user_agreementsUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * The data needed to update a user_agreements.
    **/
    data: user_agreementsUpdateInput
    /**
     * Choose, which user_agreements to update.
    **/
    where: user_agreementsWhereUniqueInput
  }


  /**
   * user_agreements updateMany
   */
  export type user_agreementsUpdateManyArgs = {
    data: user_agreementsUpdateManyMutationInput
    where?: user_agreementsWhereInput
  }


  /**
   * user_agreements upsert
   */
  export type user_agreementsUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * The filter to search for the user_agreements to update in case it exists.
    **/
    where: user_agreementsWhereUniqueInput
    /**
     * In case the user_agreements found by the `where` argument doesn't exist, create a new user_agreements with this data.
    **/
    create: user_agreementsCreateInput
    /**
     * In case the user_agreements was found with the provided `where` argument, update it with this data.
    **/
    update: user_agreementsUpdateInput
  }


  /**
   * user_agreements delete
   */
  export type user_agreementsDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
    /**
     * Filter which user_agreements to delete.
    **/
    where: user_agreementsWhereUniqueInput
  }


  /**
   * user_agreements deleteMany
   */
  export type user_agreementsDeleteManyArgs = {
    where?: user_agreementsWhereInput
  }


  /**
   * user_agreements without action
   */
  export type user_agreementsArgs = {
    /**
     * Select specific fields to fetch from the user_agreements
    **/
    select?: user_agreementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_agreementsInclude | null
  }



  /**
   * Model user_types
   */


  export type AggregateUser_types = {
    count: number | null
    avg: User_typesAvgAggregateOutputType | null
    sum: User_typesSumAggregateOutputType | null
    min: User_typesMinAggregateOutputType | null
    max: User_typesMaxAggregateOutputType | null
  }

  export type User_typesAvgAggregateOutputType = {
    id: number
  }

  export type User_typesSumAggregateOutputType = {
    id: number
  }

  export type User_typesMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type User_typesMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type User_typesCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type User_typesAvgAggregateInputType = {
    id?: true
  }

  export type User_typesSumAggregateInputType = {
    id?: true
  }

  export type User_typesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type User_typesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type User_typesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateUser_typesArgs = {
    /**
     * Filter which user_types to aggregate.
    **/
    where?: user_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_types to fetch.
    **/
    orderBy?: Enumerable<user_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: user_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_types.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_types
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: User_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: User_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: User_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: User_typesMaxAggregateInputType
  }

  export type GetUser_typesAggregateType<T extends AggregateUser_typesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUser_typesAggregateScalarType<T[P]>
  }

  export type GetUser_typesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof User_typesAvgAggregateOutputType ? User_typesAvgAggregateOutputType[P] : never
  }

    



  export type user_typesSelect = {
    id?: boolean
    name?: boolean
    companies?: boolean | FindManycompaniesArgs
    users?: boolean | FindManyusersArgs
  }

  export type user_typesInclude = {
    companies?: boolean | FindManycompaniesArgs
    users?: boolean | FindManyusersArgs
  }

  export type user_typesGetPayload<
    S extends boolean | null | undefined | user_typesArgs,
    U = keyof S
      > = S extends true
        ? user_types
    : S extends undefined
    ? never
    : S extends user_typesArgs | FindManyuser_typesArgs
    ?'include' extends U
    ? user_types  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? Array < companiesGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user_types ?user_types [P]
  : 
          P extends 'companies'
        ? Array < companiesGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  : never
  } 
    : user_types
  : user_types


  export interface user_typesDelegate {
    /**
     * Find zero or one User_types that matches the filter.
     * @param {FindUniqueuser_typesArgs} args - Arguments to find a User_types
     * @example
     * // Get one User_types
     * const user_types = await prisma.user_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueuser_typesArgs>(
      args: Subset<T, FindUniqueuser_typesArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types | null>, Prisma__user_typesClient<user_typesGetPayload<T> | null>>

    /**
     * Find the first User_types that matches the filter.
     * @param {FindFirstuser_typesArgs} args - Arguments to find a User_types
     * @example
     * // Get one User_types
     * const user_types = await prisma.user_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstuser_typesArgs>(
      args?: Subset<T, FindFirstuser_typesArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types | null>, Prisma__user_typesClient<user_typesGetPayload<T> | null>>

    /**
     * Find zero or more User_types that matches the filter.
     * @param {FindManyuser_typesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_types
     * const user_types = await prisma.user_types.findMany()
     * 
     * // Get first 10 User_types
     * const user_types = await prisma.user_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_typesWithIdOnly = await prisma.user_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyuser_typesArgs>(
      args?: Subset<T, FindManyuser_typesArgs>
    ): CheckSelect<T, Promise<Array<user_types>>, Promise<Array<user_typesGetPayload<T>>>>

    /**
     * Create a User_types.
     * @param {user_typesCreateArgs} args - Arguments to create a User_types.
     * @example
     * // Create one User_types
     * const User_types = await prisma.user_types.create({
     *   data: {
     *     // ... data to create a User_types
     *   }
     * })
     * 
    **/
    create<T extends user_typesCreateArgs>(
      args: Subset<T, user_typesCreateArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types>, Prisma__user_typesClient<user_typesGetPayload<T>>>

    /**
     * Delete a User_types.
     * @param {user_typesDeleteArgs} args - Arguments to delete one User_types.
     * @example
     * // Delete one User_types
     * const User_types = await prisma.user_types.delete({
     *   where: {
     *     // ... filter to delete one User_types
     *   }
     * })
     * 
    **/
    delete<T extends user_typesDeleteArgs>(
      args: Subset<T, user_typesDeleteArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types>, Prisma__user_typesClient<user_typesGetPayload<T>>>

    /**
     * Update one User_types.
     * @param {user_typesUpdateArgs} args - Arguments to update one User_types.
     * @example
     * // Update one User_types
     * const user_types = await prisma.user_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_typesUpdateArgs>(
      args: Subset<T, user_typesUpdateArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types>, Prisma__user_typesClient<user_typesGetPayload<T>>>

    /**
     * Delete zero or more User_types.
     * @param {user_typesDeleteManyArgs} args - Arguments to filter User_types to delete.
     * @example
     * // Delete a few User_types
     * const { count } = await prisma.user_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_typesDeleteManyArgs>(
      args?: Subset<T, user_typesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more User_types.
     * @param {user_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_types
     * const user_types = await prisma.user_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_typesUpdateManyArgs>(
      args: Subset<T, user_typesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User_types.
     * @param {user_typesUpsertArgs} args - Arguments to update or create a User_types.
     * @example
     * // Update or create a User_types
     * const user_types = await prisma.user_types.upsert({
     *   create: {
     *     // ... data to create a User_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_types we want to update
     *   }
     * })
    **/
    upsert<T extends user_typesUpsertArgs>(
      args: Subset<T, user_typesUpsertArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types>, Prisma__user_typesClient<user_typesGetPayload<T>>>

    /**
     * Find zero or one User_types that matches the filter.
     * @param {FindUniqueuser_typesArgs} args - Arguments to find a User_types
     * @deprecated This will be deprecated please use prisma.user_types.findUnique
     * @example
     * // Get one User_types
     * const user_types = await prisma.user_types.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueuser_typesArgs>(
      args: Subset<T, FindUniqueuser_typesArgs>
    ): CheckSelect<T, Prisma__user_typesClient<user_types | null>, Prisma__user_typesClient<user_typesGetPayload<T> | null>>

    /**
     * Count the number of User_types.
     * @param {FindManyuser_typesArgs} args - Arguments to filter User_types to count.
     * @example
     * // Count the number of User_types
     * const count = await prisma.user_types.count({
     *   where: {
     *     // ... the filter for the User_types we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyuser_typesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User_types.
     * @param {AggregateUser_typesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUser_typesArgs>(args: Subset<T, AggregateUser_typesArgs>): Promise<GetUser_typesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_typesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends FindManycompaniesArgs = {}>(args?: Subset<T, FindManycompaniesArgs>): CheckSelect<T, Promise<Array<companies>>, Promise<Array<companiesGetPayload<T>>>>;

    users<T extends FindManyusersArgs = {}>(args?: Subset<T, FindManyusersArgs>): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_types findUnique
   */
  export type FindUniqueuser_typesArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * Filter, which user_types to fetch.
    **/
    where: user_typesWhereUniqueInput
  }


  /**
   * user_types findFirst
   */
  export type FindFirstuser_typesArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * Filter, which user_types to fetch.
    **/
    where?: user_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_types to fetch.
    **/
    orderBy?: Enumerable<user_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_types.
    **/
    cursor?: user_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_types.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of user_types.
    **/
    distinct?: Enumerable<User_typesScalarFieldEnum>
  }


  /**
   * user_types findMany
   */
  export type FindManyuser_typesArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * Filter, which user_types to fetch.
    **/
    where?: user_typesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of user_types to fetch.
    **/
    orderBy?: Enumerable<user_typesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_types.
    **/
    cursor?: user_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_types from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_types.
    **/
    skip?: number
    distinct?: Enumerable<User_typesScalarFieldEnum>
  }


  /**
   * user_types create
   */
  export type user_typesCreateArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * The data needed to create a user_types.
    **/
    data: user_typesCreateInput
  }


  /**
   * user_types update
   */
  export type user_typesUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * The data needed to update a user_types.
    **/
    data: user_typesUpdateInput
    /**
     * Choose, which user_types to update.
    **/
    where: user_typesWhereUniqueInput
  }


  /**
   * user_types updateMany
   */
  export type user_typesUpdateManyArgs = {
    data: user_typesUpdateManyMutationInput
    where?: user_typesWhereInput
  }


  /**
   * user_types upsert
   */
  export type user_typesUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * The filter to search for the user_types to update in case it exists.
    **/
    where: user_typesWhereUniqueInput
    /**
     * In case the user_types found by the `where` argument doesn't exist, create a new user_types with this data.
    **/
    create: user_typesCreateInput
    /**
     * In case the user_types was found with the provided `where` argument, update it with this data.
    **/
    update: user_typesUpdateInput
  }


  /**
   * user_types delete
   */
  export type user_typesDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
    /**
     * Filter which user_types to delete.
    **/
    where: user_typesWhereUniqueInput
  }


  /**
   * user_types deleteMany
   */
  export type user_typesDeleteManyArgs = {
    where?: user_typesWhereInput
  }


  /**
   * user_types without action
   */
  export type user_typesArgs = {
    /**
     * Select specific fields to fetch from the user_types
    **/
    select?: user_typesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_typesInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: number | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number
    type_id: number | null
    signup_method_id: number
    company_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number
    type_id: number | null
    signup_method_id: number
    company_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number
    sns_id: string | null
    name: string | null
    type_id: number | null
    profile_picture: string | null
    email: string | null
    password: string | null
    signup_method_id: number
    company_id: number | null
    phone_number: string | null
    is_verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number
    sns_id: string | null
    name: string | null
    type_id: number | null
    profile_picture: string | null
    email: string | null
    password: string | null
    signup_method_id: number
    company_id: number | null
    phone_number: string | null
    is_verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    sns_id: number | null
    name: number | null
    type_id: number | null
    profile_picture: number | null
    email: number | null
    password: number | null
    signup_method_id: number
    company_id: number | null
    phone_number: number | null
    is_verified: number | null
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    type_id?: true
    signup_method_id?: true
    company_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    type_id?: true
    signup_method_id?: true
    company_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    sns_id?: true
    name?: true
    type_id?: true
    profile_picture?: true
    email?: true
    password?: true
    signup_method_id?: true
    company_id?: true
    phone_number?: true
    is_verified?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    sns_id?: true
    name?: true
    type_id?: true
    profile_picture?: true
    email?: true
    password?: true
    signup_method_id?: true
    company_id?: true
    phone_number?: true
    is_verified?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    sns_id?: true
    name?: true
    type_id?: true
    profile_picture?: true
    email?: true
    password?: true
    signup_method_id?: true
    company_id?: true
    phone_number?: true
    is_verified?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AggregateUsersArgs = {
    /**
     * Filter which users to aggregate.
    **/
    where?: usersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends AggregateUsersArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUsersAggregateScalarType<T[P]>
  }

  export type GetUsersAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UsersAvgAggregateOutputType ? UsersAvgAggregateOutputType[P] : never
  }

    



  export type usersSelect = {
    id?: boolean
    sns_id?: boolean
    name?: boolean
    type_id?: boolean
    profile_picture?: boolean
    email?: boolean
    password?: boolean
    signup_method_id?: boolean
    company_id?: boolean
    phone_number?: boolean
    is_verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | companiesArgs
    signup_methods?: boolean | signup_methodsArgs
    user_types?: boolean | user_typesArgs
    questions?: boolean | FindManyquestionsArgs
    startup_likes?: boolean | FindManystartup_likesArgs
    user_agreements?: boolean | FindManyuser_agreementsArgs
    votes?: boolean | FindManyvotesArgs
  }

  export type usersInclude = {
    companies?: boolean | companiesArgs
    signup_methods?: boolean | signup_methodsArgs
    user_types?: boolean | user_typesArgs
    questions?: boolean | FindManyquestionsArgs
    startup_likes?: boolean | FindManystartup_likesArgs
    user_agreements?: boolean | FindManyuser_agreementsArgs
    votes?: boolean | FindManyvotesArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | FindManyusersArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'companies'
        ? companiesGetPayload<S['include'][P]> | null :
        P extends 'signup_methods'
        ? signup_methodsGetPayload<S['include'][P]> :
        P extends 'user_types'
        ? user_typesGetPayload<S['include'][P]> | null :
        P extends 'questions'
        ? Array < questionsGetPayload<S['include'][P]>>  :
        P extends 'startup_likes'
        ? Array < startup_likesGetPayload<S['include'][P]>>  :
        P extends 'user_agreements'
        ? Array < user_agreementsGetPayload<S['include'][P]>>  :
        P extends 'votes'
        ? Array < votesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'companies'
        ? companiesGetPayload<S['select'][P]> | null :
        P extends 'signup_methods'
        ? signup_methodsGetPayload<S['select'][P]> :
        P extends 'user_types'
        ? user_typesGetPayload<S['select'][P]> | null :
        P extends 'questions'
        ? Array < questionsGetPayload<S['select'][P]>>  :
        P extends 'startup_likes'
        ? Array < startup_likesGetPayload<S['select'][P]>>  :
        P extends 'user_agreements'
        ? Array < user_agreementsGetPayload<S['select'][P]>>  :
        P extends 'votes'
        ? Array < votesGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  export interface usersDelegate {
    /**
     * Find zero or one Users that matches the filter.
     * @param {FindUniqueusersArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueusersArgs>(
      args: Subset<T, FindUniqueusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>

    /**
     * Find the first Users that matches the filter.
     * @param {FindFirstusersArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstusersArgs>(
      args?: Subset<T, FindFirstusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyusersArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyusersArgs>(
      args?: Subset<T, FindManyusersArgs>
    ): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: Subset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: Subset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: Subset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: Subset<T, usersDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: Subset<T, usersUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: Subset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find zero or one Users that matches the filter.
     * @param {FindUniqueusersArgs} args - Arguments to find a Users
     * @deprecated This will be deprecated please use prisma.users.findUnique
     * @example
     * // Get one Users
     * const users = await prisma.users.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueusersArgs>(
      args: Subset<T, FindUniqueusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>

    /**
     * Count the number of Users.
     * @param {FindManyusersArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyusersArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Users.
     * @param {AggregateUsersArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUsersArgs>(args: Subset<T, AggregateUsersArgs>): Promise<GetUsersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    companies<T extends companiesArgs = {}>(args?: Subset<T, companiesArgs>): CheckSelect<T, Prisma__companiesClient<companies | null>, Prisma__companiesClient<companiesGetPayload<T> | null>>;

    signup_methods<T extends signup_methodsArgs = {}>(args?: Subset<T, signup_methodsArgs>): CheckSelect<T, Prisma__signup_methodsClient<signup_methods | null>, Prisma__signup_methodsClient<signup_methodsGetPayload<T> | null>>;

    user_types<T extends user_typesArgs = {}>(args?: Subset<T, user_typesArgs>): CheckSelect<T, Prisma__user_typesClient<user_types | null>, Prisma__user_typesClient<user_typesGetPayload<T> | null>>;

    questions<T extends FindManyquestionsArgs = {}>(args?: Subset<T, FindManyquestionsArgs>): CheckSelect<T, Promise<Array<questions>>, Promise<Array<questionsGetPayload<T>>>>;

    startup_likes<T extends FindManystartup_likesArgs = {}>(args?: Subset<T, FindManystartup_likesArgs>): CheckSelect<T, Promise<Array<startup_likes>>, Promise<Array<startup_likesGetPayload<T>>>>;

    user_agreements<T extends FindManyuser_agreementsArgs = {}>(args?: Subset<T, FindManyuser_agreementsArgs>): CheckSelect<T, Promise<Array<user_agreements>>, Promise<Array<user_agreementsGetPayload<T>>>>;

    votes<T extends FindManyvotesArgs = {}>(args?: Subset<T, FindManyvotesArgs>): CheckSelect<T, Promise<Array<votes>>, Promise<Array<votesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type FindUniqueusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type FindFirstusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type FindManyusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: usersCreateInput
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: usersUpdateInput
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: usersUpdateManyMutationInput
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: usersCreateInput
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: usersUpdateInput
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Model votes
   */


  export type AggregateVotes = {
    count: number | null
    avg: VotesAvgAggregateOutputType | null
    sum: VotesSumAggregateOutputType | null
    min: VotesMinAggregateOutputType | null
    max: VotesMaxAggregateOutputType | null
  }

  export type VotesAvgAggregateOutputType = {
    id: number
    user_id: number
    participants_id: number
  }

  export type VotesSumAggregateOutputType = {
    id: number
    user_id: number
    participants_id: number
  }

  export type VotesMinAggregateOutputType = {
    id: number
    user_id: number
    participants_id: number
    created_at: Date | null
  }

  export type VotesMaxAggregateOutputType = {
    id: number
    user_id: number
    participants_id: number
    created_at: Date | null
  }

  export type VotesCountAggregateOutputType = {
    id: number
    user_id: number
    participants_id: number
    created_at: number | null
    _all: number
  }


  export type VotesAvgAggregateInputType = {
    id?: true
    user_id?: true
    participants_id?: true
  }

  export type VotesSumAggregateInputType = {
    id?: true
    user_id?: true
    participants_id?: true
  }

  export type VotesMinAggregateInputType = {
    id?: true
    user_id?: true
    participants_id?: true
    created_at?: true
  }

  export type VotesMaxAggregateInputType = {
    id?: true
    user_id?: true
    participants_id?: true
    created_at?: true
  }

  export type VotesCountAggregateInputType = {
    id?: true
    user_id?: true
    participants_id?: true
    created_at?: true
    _all?: true
  }

  export type AggregateVotesArgs = {
    /**
     * Filter which votes to aggregate.
    **/
    where?: votesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of votes to fetch.
    **/
    orderBy?: Enumerable<votesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned votes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: VotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: VotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: VotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: VotesMaxAggregateInputType
  }

  export type GetVotesAggregateType<T extends AggregateVotesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetVotesAggregateScalarType<T[P]>
  }

  export type GetVotesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof VotesAvgAggregateOutputType ? VotesAvgAggregateOutputType[P] : never
  }

    



  export type votesSelect = {
    id?: boolean
    user_id?: boolean
    participants_id?: boolean
    created_at?: boolean
    participants?: boolean | participantsArgs
    users?: boolean | usersArgs
  }

  export type votesInclude = {
    participants?: boolean | participantsArgs
    users?: boolean | usersArgs
  }

  export type votesGetPayload<
    S extends boolean | null | undefined | votesArgs,
    U = keyof S
      > = S extends true
        ? votes
    : S extends undefined
    ? never
    : S extends votesArgs | FindManyvotesArgs
    ?'include' extends U
    ? votes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'participants'
        ? participantsGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof votes ?votes [P]
  : 
          P extends 'participants'
        ? participantsGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : votes
  : votes


  export interface votesDelegate {
    /**
     * Find zero or one Votes that matches the filter.
     * @param {FindUniquevotesArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquevotesArgs>(
      args: Subset<T, FindUniquevotesArgs>
    ): CheckSelect<T, Prisma__votesClient<votes | null>, Prisma__votesClient<votesGetPayload<T> | null>>

    /**
     * Find the first Votes that matches the filter.
     * @param {FindFirstvotesArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstvotesArgs>(
      args?: Subset<T, FindFirstvotesArgs>
    ): CheckSelect<T, Prisma__votesClient<votes | null>, Prisma__votesClient<votesGetPayload<T> | null>>

    /**
     * Find zero or more Votes that matches the filter.
     * @param {FindManyvotesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.votes.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.votes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const votesWithIdOnly = await prisma.votes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyvotesArgs>(
      args?: Subset<T, FindManyvotesArgs>
    ): CheckSelect<T, Promise<Array<votes>>, Promise<Array<votesGetPayload<T>>>>

    /**
     * Create a Votes.
     * @param {votesCreateArgs} args - Arguments to create a Votes.
     * @example
     * // Create one Votes
     * const Votes = await prisma.votes.create({
     *   data: {
     *     // ... data to create a Votes
     *   }
     * })
     * 
    **/
    create<T extends votesCreateArgs>(
      args: Subset<T, votesCreateArgs>
    ): CheckSelect<T, Prisma__votesClient<votes>, Prisma__votesClient<votesGetPayload<T>>>

    /**
     * Delete a Votes.
     * @param {votesDeleteArgs} args - Arguments to delete one Votes.
     * @example
     * // Delete one Votes
     * const Votes = await prisma.votes.delete({
     *   where: {
     *     // ... filter to delete one Votes
     *   }
     * })
     * 
    **/
    delete<T extends votesDeleteArgs>(
      args: Subset<T, votesDeleteArgs>
    ): CheckSelect<T, Prisma__votesClient<votes>, Prisma__votesClient<votesGetPayload<T>>>

    /**
     * Update one Votes.
     * @param {votesUpdateArgs} args - Arguments to update one Votes.
     * @example
     * // Update one Votes
     * const votes = await prisma.votes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends votesUpdateArgs>(
      args: Subset<T, votesUpdateArgs>
    ): CheckSelect<T, Prisma__votesClient<votes>, Prisma__votesClient<votesGetPayload<T>>>

    /**
     * Delete zero or more Votes.
     * @param {votesDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.votes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends votesDeleteManyArgs>(
      args?: Subset<T, votesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Votes.
     * @param {votesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const votes = await prisma.votes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends votesUpdateManyArgs>(
      args: Subset<T, votesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Votes.
     * @param {votesUpsertArgs} args - Arguments to update or create a Votes.
     * @example
     * // Update or create a Votes
     * const votes = await prisma.votes.upsert({
     *   create: {
     *     // ... data to create a Votes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Votes we want to update
     *   }
     * })
    **/
    upsert<T extends votesUpsertArgs>(
      args: Subset<T, votesUpsertArgs>
    ): CheckSelect<T, Prisma__votesClient<votes>, Prisma__votesClient<votesGetPayload<T>>>

    /**
     * Find zero or one Votes that matches the filter.
     * @param {FindUniquevotesArgs} args - Arguments to find a Votes
     * @deprecated This will be deprecated please use prisma.votes.findUnique
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquevotesArgs>(
      args: Subset<T, FindUniquevotesArgs>
    ): CheckSelect<T, Prisma__votesClient<votes | null>, Prisma__votesClient<votesGetPayload<T> | null>>

    /**
     * Count the number of Votes.
     * @param {FindManyvotesArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.votes.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyvotesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Votes.
     * @param {AggregateVotesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateVotesArgs>(args: Subset<T, AggregateVotesArgs>): Promise<GetVotesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for votes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__votesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    participants<T extends participantsArgs = {}>(args?: Subset<T, participantsArgs>): CheckSelect<T, Prisma__participantsClient<participants | null>, Prisma__participantsClient<participantsGetPayload<T> | null>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * votes findUnique
   */
  export type FindUniquevotesArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * Filter, which votes to fetch.
    **/
    where: votesWhereUniqueInput
  }


  /**
   * votes findFirst
   */
  export type FindFirstvotesArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * Filter, which votes to fetch.
    **/
    where?: votesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of votes to fetch.
    **/
    orderBy?: Enumerable<votesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votes.
    **/
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of votes.
    **/
    distinct?: Enumerable<VotesScalarFieldEnum>
  }


  /**
   * votes findMany
   */
  export type FindManyvotesArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * Filter, which votes to fetch.
    **/
    where?: votesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of votes to fetch.
    **/
    orderBy?: Enumerable<votesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing votes.
    **/
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
    **/
    skip?: number
    distinct?: Enumerable<VotesScalarFieldEnum>
  }


  /**
   * votes create
   */
  export type votesCreateArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * The data needed to create a votes.
    **/
    data: votesCreateInput
  }


  /**
   * votes update
   */
  export type votesUpdateArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * The data needed to update a votes.
    **/
    data: votesUpdateInput
    /**
     * Choose, which votes to update.
    **/
    where: votesWhereUniqueInput
  }


  /**
   * votes updateMany
   */
  export type votesUpdateManyArgs = {
    data: votesUpdateManyMutationInput
    where?: votesWhereInput
  }


  /**
   * votes upsert
   */
  export type votesUpsertArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * The filter to search for the votes to update in case it exists.
    **/
    where: votesWhereUniqueInput
    /**
     * In case the votes found by the `where` argument doesn't exist, create a new votes with this data.
    **/
    create: votesCreateInput
    /**
     * In case the votes was found with the provided `where` argument, update it with this data.
    **/
    update: votesUpdateInput
  }


  /**
   * votes delete
   */
  export type votesDeleteArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
    /**
     * Filter which votes to delete.
    **/
    where: votesWhereUniqueInput
  }


  /**
   * votes deleteMany
   */
  export type votesDeleteManyArgs = {
    where?: votesWhereInput
  }


  /**
   * votes without action
   */
  export type votesArgs = {
    /**
     * Select specific fields to fetch from the votes
    **/
    select?: votesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: votesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnswersScalarFieldEnum: {
    id: 'id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at',
    question_id: 'question_id'
  };

  export type AnswersScalarFieldEnum = (typeof AnswersScalarFieldEnum)[keyof typeof AnswersScalarFieldEnum]


  export const ApplicantsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    project_id: 'project_id',
    created_at: 'created_at'
  };

  export type ApplicantsScalarFieldEnum = (typeof ApplicantsScalarFieldEnum)[keyof typeof ApplicantsScalarFieldEnum]


  export const Business_typesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Business_typesScalarFieldEnum = (typeof Business_typesScalarFieldEnum)[keyof typeof Business_typesScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    id: 'id',
    type_id: 'type_id',
    name: 'name',
    logo_img: 'logo_img',
    established_date: 'established_date',
    hompage: 'hompage',
    description: 'description',
    team_intro: 'team_intro',
    member_count: 'member_count'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const Company_documentsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    doc_url: 'doc_url',
    type_id: 'type_id'
  };

  export type Company_documentsScalarFieldEnum = (typeof Company_documentsScalarFieldEnum)[keyof typeof Company_documentsScalarFieldEnum]


  export const Company_membersScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    name: 'name',
    img: 'img',
    position: 'position'
  };

  export type Company_membersScalarFieldEnum = (typeof Company_membersScalarFieldEnum)[keyof typeof Company_membersScalarFieldEnum]


  export const Company_newsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    URL: 'URL'
  };

  export type Company_newsScalarFieldEnum = (typeof Company_newsScalarFieldEnum)[keyof typeof Company_newsScalarFieldEnum]


  export const Company_typesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Company_typesScalarFieldEnum = (typeof Company_typesScalarFieldEnum)[keyof typeof Company_typesScalarFieldEnum]


  export const DemodaysScalarFieldEnum: {
    id: 'id',
    name: 'name',
    company_id: 'company_id',
    streaming_url: 'streaming_url'
  };

  export type DemodaysScalarFieldEnum = (typeof DemodaysScalarFieldEnum)[keyof typeof DemodaysScalarFieldEnum]


  export const Document_typesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Document_typesScalarFieldEnum = (typeof Document_typesScalarFieldEnum)[keyof typeof Document_typesScalarFieldEnum]


  export const Email_authScalarFieldEnum: {
    id: 'id',
    email: 'email',
    auth_number: 'auth_number'
  };

  export type Email_authScalarFieldEnum = (typeof Email_authScalarFieldEnum)[keyof typeof Email_authScalarFieldEnum]


  export const Invested_fromScalarFieldEnum: {
    id: 'id',
    startup_id: 'startup_id',
    date: 'date',
    invested_institution: 'invested_institution',
    invested_fund: 'invested_fund',
    corporate_value: 'corporate_value',
    series_id: 'series_id'
  };

  export type Invested_fromScalarFieldEnum = (typeof Invested_fromScalarFieldEnum)[keyof typeof Invested_fromScalarFieldEnum]


  export const Invested_toScalarFieldEnum: {
    id: 'id',
    partner_id: 'partner_id',
    date: 'date',
    startup_name: 'startup_name',
    invested_fund: 'invested_fund',
    corporate_value: 'corporate_value',
    series_id: 'series_id'
  };

  export type Invested_toScalarFieldEnum = (typeof Invested_toScalarFieldEnum)[keyof typeof Invested_toScalarFieldEnum]


  export const Investment_fundsScalarFieldEnum: {
    id: 'id',
    range: 'range'
  };

  export type Investment_fundsScalarFieldEnum = (typeof Investment_fundsScalarFieldEnum)[keyof typeof Investment_fundsScalarFieldEnum]


  export const Investment_portfolioScalarFieldEnum: {
    id: 'id',
    partner_id: 'partner_id',
    img_url: 'img_url'
  };

  export type Investment_portfolioScalarFieldEnum = (typeof Investment_portfolioScalarFieldEnum)[keyof typeof Investment_portfolioScalarFieldEnum]


  export const Investment_seriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Investment_seriesScalarFieldEnum = (typeof Investment_seriesScalarFieldEnum)[keyof typeof Investment_seriesScalarFieldEnum]


  export const IR_requestsScalarFieldEnum: {
    id: 'id',
    startup_id: 'startup_id',
    partner_id: 'partner_id',
    document_id: 'document_id',
    is_checked: 'is_checked',
    from_partner: 'from_partner',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type IR_requestsScalarFieldEnum = (typeof IR_requestsScalarFieldEnum)[keyof typeof IR_requestsScalarFieldEnum]


  export const ParticipantsScalarFieldEnum: {
    id: 'id',
    demoday_id: 'demoday_id',
    order: 'order',
    company_id: 'company_id'
  };

  export type ParticipantsScalarFieldEnum = (typeof ParticipantsScalarFieldEnum)[keyof typeof ParticipantsScalarFieldEnum]


  export const Partner_infosScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    interst_technology_id: 'interst_technology_id',
    invested_total_id: 'invested_total_id',
    invested_counts: 'invested_counts'
  };

  export type Partner_infosScalarFieldEnum = (typeof Partner_infosScalarFieldEnum)[keyof typeof Partner_infosScalarFieldEnum]


  export const Partner_likesScalarFieldEnum: {
    id: 'id',
    company_likes_id: 'company_likes_id',
    company_liked_id: 'company_liked_id',
    is_liked: 'is_liked',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Partner_likesScalarFieldEnum = (typeof Partner_likesScalarFieldEnum)[keyof typeof Partner_likesScalarFieldEnum]


  export const Phone_authScalarFieldEnum: {
    id: 'id',
    phone_number: 'phone_number',
    auth_number: 'auth_number'
  };

  export type Phone_authScalarFieldEnum = (typeof Phone_authScalarFieldEnum)[keyof typeof Phone_authScalarFieldEnum]


  export const Project_imagesScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    img_url: 'img_url'
  };

  export type Project_imagesScalarFieldEnum = (typeof Project_imagesScalarFieldEnum)[keyof typeof Project_imagesScalarFieldEnum]


  export const Project_likesScalarFieldEnum: {
    id: 'id',
    comapny_id: 'comapny_id',
    project_id: 'project_id',
    is_liked: 'is_liked',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Project_likesScalarFieldEnum = (typeof Project_likesScalarFieldEnum)[keyof typeof Project_likesScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    introduction: 'introduction',
    host: 'host',
    due_date: 'due_date',
    sector_id: 'sector_id',
    eligibility: 'eligibility',
    outline: 'outline',
    detail: 'detail',
    application_method: 'application_method',
    caution: 'caution',
    contact: 'contact',
    is_opened: 'is_opened',
    hit: 'hit',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    content: 'content',
    company_id: 'company_id',
    user_id: 'user_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    demoday_id: 'demoday_id'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const Recent_views_projectScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    company_id: 'company_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Recent_views_projectScalarFieldEnum = (typeof Recent_views_projectScalarFieldEnum)[keyof typeof Recent_views_projectScalarFieldEnum]


  export const Required_documentsScalarFieldEnum: {
    id: 'id',
    project_id: 'project_id',
    document_id: 'document_id'
  };

  export type Required_documentsScalarFieldEnum = (typeof Required_documentsScalarFieldEnum)[keyof typeof Required_documentsScalarFieldEnum]


  export const SectorsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SectorsScalarFieldEnum = (typeof SectorsScalarFieldEnum)[keyof typeof SectorsScalarFieldEnum]


  export const Service_typesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Service_typesScalarFieldEnum = (typeof Service_typesScalarFieldEnum)[keyof typeof Service_typesScalarFieldEnum]


  export const Signup_methodsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Signup_methodsScalarFieldEnum = (typeof Signup_methodsScalarFieldEnum)[keyof typeof Signup_methodsScalarFieldEnum]


  export const Startup_imagesScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    img_url: 'img_url'
  };

  export type Startup_imagesScalarFieldEnum = (typeof Startup_imagesScalarFieldEnum)[keyof typeof Startup_imagesScalarFieldEnum]


  export const Startup_infosScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    rep: 'rep',
    sector_id: 'sector_id',
    core_technology_id: 'core_technology_id',
    item_description: 'item_description',
    contact: 'contact',
    address_road: 'address_road',
    address_detail: 'address_detail',
    service_type_id: 'service_type_id',
    business_type_id: 'business_type_id',
    business_license_number: 'business_license_number',
    email: 'email',
    instagram_url: 'instagram_url',
    facebook_url: 'facebook_url',
    thumbnail: 'thumbnail'
  };

  export type Startup_infosScalarFieldEnum = (typeof Startup_infosScalarFieldEnum)[keyof typeof Startup_infosScalarFieldEnum]


  export const Startup_likesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    company_id: 'company_id',
    is_liked: 'is_liked',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Startup_likesScalarFieldEnum = (typeof Startup_likesScalarFieldEnum)[keyof typeof Startup_likesScalarFieldEnum]


  export const TechnologiesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TechnologiesScalarFieldEnum = (typeof TechnologiesScalarFieldEnum)[keyof typeof TechnologiesScalarFieldEnum]


  export const TermsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    content: 'content'
  };

  export type TermsScalarFieldEnum = (typeof TermsScalarFieldEnum)[keyof typeof TermsScalarFieldEnum]


  export const User_agreementsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    term_id: 'term_id'
  };

  export type User_agreementsScalarFieldEnum = (typeof User_agreementsScalarFieldEnum)[keyof typeof User_agreementsScalarFieldEnum]


  export const User_typesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type User_typesScalarFieldEnum = (typeof User_typesScalarFieldEnum)[keyof typeof User_typesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    sns_id: 'sns_id',
    name: 'name',
    type_id: 'type_id',
    profile_picture: 'profile_picture',
    email: 'email',
    password: 'password',
    signup_method_id: 'signup_method_id',
    company_id: 'company_id',
    phone_number: 'phone_number',
    is_verified: 'is_verified',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const VotesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    participants_id: 'participants_id',
    created_at: 'created_at'
  };

  export type VotesScalarFieldEnum = (typeof VotesScalarFieldEnum)[keyof typeof VotesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type answersWhereInput = {
    AND?: Enumerable<answersWhereInput>
    OR?: Enumerable<answersWhereInput>
    NOT?: Enumerable<answersWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    question_id?: IntFilter | number
    questions?: XOR<questionsWhereInput, QuestionsRelationFilter>
  }

  export type answersOrderByInput = {
    id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    question_id?: SortOrder
  }

  export type answersWhereUniqueInput = {
    id?: number
  }

  export type applicantsWhereInput = {
    AND?: Enumerable<applicantsWhereInput>
    OR?: Enumerable<applicantsWhereInput>
    NOT?: Enumerable<applicantsWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    project_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    projects?: XOR<projectsWhereInput, ProjectsRelationFilter>
  }

  export type applicantsOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_id?: SortOrder
    created_at?: SortOrder
  }

  export type applicantsWhereUniqueInput = {
    id?: number
  }

  export type business_typesWhereInput = {
    AND?: Enumerable<business_typesWhereInput>
    OR?: Enumerable<business_typesWhereInput>
    NOT?: Enumerable<business_typesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    startup_infos?: Startup_infosListRelationFilter
  }

  export type business_typesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type business_typesWhereUniqueInput = {
    id?: number
  }

  export type companiesWhereInput = {
    AND?: Enumerable<companiesWhereInput>
    OR?: Enumerable<companiesWhereInput>
    NOT?: Enumerable<companiesWhereInput>
    id?: IntFilter | number
    type_id?: IntNullableFilter | number | null
    name?: StringNullableFilter | string | null
    logo_img?: StringNullableFilter | string | null
    established_date?: DateTimeNullableFilter | Date | string | null
    hompage?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    team_intro?: StringNullableFilter | string | null
    member_count?: IntNullableFilter | number | null
    user_types?: XOR<user_typesWhereInput, User_typesRelationFilter> | null
    applicants?: ApplicantsListRelationFilter
    company_documents?: Company_documentsListRelationFilter
    company_members?: Company_membersListRelationFilter
    company_news?: Company_newsListRelationFilter
    demodays?: DemodaysListRelationFilter
    invested_to?: Invested_toListRelationFilter
    IR_requests?: IR_requestsListRelationFilter
    participants?: ParticipantsListRelationFilter
    partner_infos?: Partner_infosListRelationFilter
    partner_likes_companiesTopartner_likes_company_liked_id?: Partner_likesListRelationFilter
    partner_likes_companiesTopartner_likes_company_likes_id?: Partner_likesListRelationFilter
    project_likes?: Project_likesListRelationFilter
    projects?: ProjectsListRelationFilter
    questions?: QuestionsListRelationFilter
    recent_views_project?: Recent_views_projectListRelationFilter
    startup_infos?: Startup_infosListRelationFilter
    startup_likes?: Startup_likesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type companiesOrderByInput = {
    id?: SortOrder
    type_id?: SortOrder
    name?: SortOrder
    logo_img?: SortOrder
    established_date?: SortOrder
    hompage?: SortOrder
    description?: SortOrder
    team_intro?: SortOrder
    member_count?: SortOrder
  }

  export type companiesWhereUniqueInput = {
    id?: number
  }

  export type company_documentsWhereInput = {
    AND?: Enumerable<company_documentsWhereInput>
    OR?: Enumerable<company_documentsWhereInput>
    NOT?: Enumerable<company_documentsWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    doc_url?: StringFilter | string
    type_id?: IntFilter | number
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    document_types?: XOR<document_typesWhereInput, Document_typesRelationFilter>
    IR_requests?: IR_requestsListRelationFilter
  }

  export type company_documentsOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    doc_url?: SortOrder
    type_id?: SortOrder
  }

  export type company_documentsWhereUniqueInput = {
    id?: number
  }

  export type company_membersWhereInput = {
    AND?: Enumerable<company_membersWhereInput>
    OR?: Enumerable<company_membersWhereInput>
    NOT?: Enumerable<company_membersWhereInput>
    id?: IntFilter | number
    company_id?: IntNullableFilter | number | null
    name?: StringNullableFilter | string | null
    img?: StringNullableFilter | string | null
    position?: StringNullableFilter | string | null
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter> | null
  }

  export type company_membersOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    position?: SortOrder
  }

  export type company_membersWhereUniqueInput = {
    id?: number
  }

  export type company_newsWhereInput = {
    AND?: Enumerable<company_newsWhereInput>
    OR?: Enumerable<company_newsWhereInput>
    NOT?: Enumerable<company_newsWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    URL?: StringFilter | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
  }

  export type company_newsOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    URL?: SortOrder
  }

  export type company_newsWhereUniqueInput = {
    id?: number
  }

  export type company_typesWhereInput = {
    AND?: Enumerable<company_typesWhereInput>
    OR?: Enumerable<company_typesWhereInput>
    NOT?: Enumerable<company_typesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type company_typesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type company_typesWhereUniqueInput = {
    id?: number
  }

  export type demodaysWhereInput = {
    AND?: Enumerable<demodaysWhereInput>
    OR?: Enumerable<demodaysWhereInput>
    NOT?: Enumerable<demodaysWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    company_id?: IntNullableFilter | number | null
    streaming_url?: StringNullableFilter | string | null
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter> | null
    participants?: ParticipantsListRelationFilter
    questions?: QuestionsListRelationFilter
  }

  export type demodaysOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    streaming_url?: SortOrder
  }

  export type demodaysWhereUniqueInput = {
    id?: number
  }

  export type document_typesWhereInput = {
    AND?: Enumerable<document_typesWhereInput>
    OR?: Enumerable<document_typesWhereInput>
    NOT?: Enumerable<document_typesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    company_documents?: Company_documentsListRelationFilter
    required_documents?: Required_documentsListRelationFilter
  }

  export type document_typesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type document_typesWhereUniqueInput = {
    id?: number
  }

  export type email_authWhereInput = {
    AND?: Enumerable<email_authWhereInput>
    OR?: Enumerable<email_authWhereInput>
    NOT?: Enumerable<email_authWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    auth_number?: StringFilter | string
  }

  export type email_authOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    auth_number?: SortOrder
  }

  export type email_authWhereUniqueInput = {
    id?: number
  }

  export type invested_fromWhereInput = {
    AND?: Enumerable<invested_fromWhereInput>
    OR?: Enumerable<invested_fromWhereInput>
    NOT?: Enumerable<invested_fromWhereInput>
    id?: IntFilter | number
    startup_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    invested_institution?: StringFilter | string
    invested_fund?: IntFilter | number
    corporate_value?: IntFilter | number
    series_id?: IntFilter | number
    investment_series?: XOR<investment_seriesWhereInput, Investment_seriesRelationFilter>
    startup_infos?: XOR<startup_infosWhereInput, Startup_infosRelationFilter>
  }

  export type invested_fromOrderByInput = {
    id?: SortOrder
    startup_id?: SortOrder
    date?: SortOrder
    invested_institution?: SortOrder
    invested_fund?: SortOrder
    corporate_value?: SortOrder
    series_id?: SortOrder
  }

  export type invested_fromWhereUniqueInput = {
    id?: number
  }

  export type invested_toWhereInput = {
    AND?: Enumerable<invested_toWhereInput>
    OR?: Enumerable<invested_toWhereInput>
    NOT?: Enumerable<invested_toWhereInput>
    id?: IntFilter | number
    partner_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    startup_name?: StringFilter | string
    invested_fund?: IntFilter | number
    corporate_value?: IntFilter | number
    series_id?: IntFilter | number
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    investment_series?: XOR<investment_seriesWhereInput, Investment_seriesRelationFilter>
  }

  export type invested_toOrderByInput = {
    id?: SortOrder
    partner_id?: SortOrder
    date?: SortOrder
    startup_name?: SortOrder
    invested_fund?: SortOrder
    corporate_value?: SortOrder
    series_id?: SortOrder
  }

  export type invested_toWhereUniqueInput = {
    id?: number
  }

  export type investment_fundsWhereInput = {
    AND?: Enumerable<investment_fundsWhereInput>
    OR?: Enumerable<investment_fundsWhereInput>
    NOT?: Enumerable<investment_fundsWhereInput>
    id?: IntFilter | number
    range?: StringFilter | string
    partner_infos?: Partner_infosListRelationFilter
  }

  export type investment_fundsOrderByInput = {
    id?: SortOrder
    range?: SortOrder
  }

  export type investment_fundsWhereUniqueInput = {
    id?: number
  }

  export type investment_portfolioWhereInput = {
    AND?: Enumerable<investment_portfolioWhereInput>
    OR?: Enumerable<investment_portfolioWhereInput>
    NOT?: Enumerable<investment_portfolioWhereInput>
    id?: IntFilter | number
    partner_id?: IntFilter | number
    img_url?: StringFilter | string
    partner_infos?: XOR<partner_infosWhereInput, Partner_infosRelationFilter>
  }

  export type investment_portfolioOrderByInput = {
    id?: SortOrder
    partner_id?: SortOrder
    img_url?: SortOrder
  }

  export type investment_portfolioWhereUniqueInput = {
    id?: number
  }

  export type investment_seriesWhereInput = {
    AND?: Enumerable<investment_seriesWhereInput>
    OR?: Enumerable<investment_seriesWhereInput>
    NOT?: Enumerable<investment_seriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    invested_from?: Invested_fromListRelationFilter
    invested_to?: Invested_toListRelationFilter
  }

  export type investment_seriesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type investment_seriesWhereUniqueInput = {
    id?: number
  }

  export type IR_requestsWhereInput = {
    AND?: Enumerable<IR_requestsWhereInput>
    OR?: Enumerable<IR_requestsWhereInput>
    NOT?: Enumerable<IR_requestsWhereInput>
    id?: IntFilter | number
    startup_id?: IntFilter | number
    partner_id?: IntFilter | number
    document_id?: IntNullableFilter | number | null
    is_checked?: IntFilter | number
    from_partner?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    company_documents?: XOR<company_documentsWhereInput, Company_documentsRelationFilter> | null
    partner_infos?: XOR<partner_infosWhereInput, Partner_infosRelationFilter>
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
  }

  export type IR_requestsOrderByInput = {
    id?: SortOrder
    startup_id?: SortOrder
    partner_id?: SortOrder
    document_id?: SortOrder
    is_checked?: SortOrder
    from_partner?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type IR_requestsWhereUniqueInput = {
    id?: number
  }

  export type participantsWhereInput = {
    AND?: Enumerable<participantsWhereInput>
    OR?: Enumerable<participantsWhereInput>
    NOT?: Enumerable<participantsWhereInput>
    id?: IntFilter | number
    demoday_id?: IntFilter | number
    order?: IntFilter | number
    company_id?: IntFilter | number
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    demodays?: XOR<demodaysWhereInput, DemodaysRelationFilter>
    votes?: VotesListRelationFilter
  }

  export type participantsOrderByInput = {
    id?: SortOrder
    demoday_id?: SortOrder
    order?: SortOrder
    company_id?: SortOrder
  }

  export type participantsWhereUniqueInput = {
    id?: number
  }

  export type partner_infosWhereInput = {
    AND?: Enumerable<partner_infosWhereInput>
    OR?: Enumerable<partner_infosWhereInput>
    NOT?: Enumerable<partner_infosWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    interst_technology_id?: IntNullableFilter | number | null
    invested_total_id?: IntNullableFilter | number | null
    invested_counts?: IntNullableFilter | number | null
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    technologies?: XOR<technologiesWhereInput, TechnologiesRelationFilter> | null
    investment_funds?: XOR<investment_fundsWhereInput, Investment_fundsRelationFilter> | null
    investment_portfolio?: Investment_portfolioListRelationFilter
    IR_requests?: IR_requestsListRelationFilter
  }

  export type partner_infosOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    interst_technology_id?: SortOrder
    invested_total_id?: SortOrder
    invested_counts?: SortOrder
  }

  export type partner_infosWhereUniqueInput = {
    id?: number
  }

  export type partner_likesWhereInput = {
    AND?: Enumerable<partner_likesWhereInput>
    OR?: Enumerable<partner_likesWhereInput>
    NOT?: Enumerable<partner_likesWhereInput>
    id?: IntFilter | number
    company_likes_id?: IntFilter | number
    company_liked_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    companies_companiesTopartner_likes_company_liked_id?: XOR<companiesWhereInput, CompaniesRelationFilter>
    companies_companiesTopartner_likes_company_likes_id?: XOR<companiesWhereInput, CompaniesRelationFilter>
  }

  export type partner_likesOrderByInput = {
    id?: SortOrder
    company_likes_id?: SortOrder
    company_liked_id?: SortOrder
    is_liked?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type partner_likesWhereUniqueInput = {
    id?: number
  }

  export type phone_authWhereInput = {
    AND?: Enumerable<phone_authWhereInput>
    OR?: Enumerable<phone_authWhereInput>
    NOT?: Enumerable<phone_authWhereInput>
    id?: IntFilter | number
    phone_number?: StringFilter | string
    auth_number?: StringFilter | string
  }

  export type phone_authOrderByInput = {
    id?: SortOrder
    phone_number?: SortOrder
    auth_number?: SortOrder
  }

  export type phone_authWhereUniqueInput = {
    id?: number
  }

  export type project_imagesWhereInput = {
    AND?: Enumerable<project_imagesWhereInput>
    OR?: Enumerable<project_imagesWhereInput>
    NOT?: Enumerable<project_imagesWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    img_url?: StringFilter | string
    projects?: XOR<projectsWhereInput, ProjectsRelationFilter>
  }

  export type project_imagesOrderByInput = {
    id?: SortOrder
    project_id?: SortOrder
    img_url?: SortOrder
  }

  export type project_imagesWhereUniqueInput = {
    id?: number
  }

  export type project_likesWhereInput = {
    AND?: Enumerable<project_likesWhereInput>
    OR?: Enumerable<project_likesWhereInput>
    NOT?: Enumerable<project_likesWhereInput>
    id?: IntFilter | number
    comapny_id?: IntFilter | number
    project_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    projects?: XOR<projectsWhereInput, ProjectsRelationFilter>
  }

  export type project_likesOrderByInput = {
    id?: SortOrder
    comapny_id?: SortOrder
    project_id?: SortOrder
    is_liked?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type project_likesWhereUniqueInput = {
    id?: number
  }

  export type projectsWhereInput = {
    AND?: Enumerable<projectsWhereInput>
    OR?: Enumerable<projectsWhereInput>
    NOT?: Enumerable<projectsWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    introduction?: StringNullableFilter | string | null
    host?: IntNullableFilter | number | null
    due_date?: DateTimeNullableFilter | Date | string | null
    sector_id?: IntNullableFilter | number | null
    eligibility?: StringNullableFilter | string | null
    outline?: StringNullableFilter | string | null
    detail?: StringNullableFilter | string | null
    application_method?: StringNullableFilter | string | null
    caution?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    is_opened?: IntFilter | number
    hit?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter> | null
    sectors?: XOR<sectorsWhereInput, SectorsRelationFilter> | null
    applicants?: ApplicantsListRelationFilter
    project_images?: Project_imagesListRelationFilter
    project_likes?: Project_likesListRelationFilter
    recent_views_project?: Recent_views_projectListRelationFilter
    required_documents?: Required_documentsListRelationFilter
  }

  export type projectsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    introduction?: SortOrder
    host?: SortOrder
    due_date?: SortOrder
    sector_id?: SortOrder
    eligibility?: SortOrder
    outline?: SortOrder
    detail?: SortOrder
    application_method?: SortOrder
    caution?: SortOrder
    contact?: SortOrder
    is_opened?: SortOrder
    hit?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type projectsWhereUniqueInput = {
    id?: number
  }

  export type questionsWhereInput = {
    AND?: Enumerable<questionsWhereInput>
    OR?: Enumerable<questionsWhereInput>
    NOT?: Enumerable<questionsWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    company_id?: IntFilter | number
    user_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    demoday_id?: IntFilter | number
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    demodays?: XOR<demodaysWhereInput, DemodaysRelationFilter>
    users?: XOR<usersWhereInput, UsersRelationFilter>
    answers?: AnswersListRelationFilter
  }

  export type questionsOrderByInput = {
    id?: SortOrder
    content?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    demoday_id?: SortOrder
  }

  export type questionsWhereUniqueInput = {
    id?: number
  }

  export type recent_views_projectWhereInput = {
    AND?: Enumerable<recent_views_projectWhereInput>
    OR?: Enumerable<recent_views_projectWhereInput>
    NOT?: Enumerable<recent_views_projectWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    company_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    projects?: XOR<projectsWhereInput, ProjectsRelationFilter>
  }

  export type recent_views_projectOrderByInput = {
    id?: SortOrder
    project_id?: SortOrder
    company_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type recent_views_projectWhereUniqueInput = {
    id?: number
  }

  export type required_documentsWhereInput = {
    AND?: Enumerable<required_documentsWhereInput>
    OR?: Enumerable<required_documentsWhereInput>
    NOT?: Enumerable<required_documentsWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    document_id?: IntFilter | number
    document_types?: XOR<document_typesWhereInput, Document_typesRelationFilter>
    projects?: XOR<projectsWhereInput, ProjectsRelationFilter>
  }

  export type required_documentsOrderByInput = {
    id?: SortOrder
    project_id?: SortOrder
    document_id?: SortOrder
  }

  export type required_documentsWhereUniqueInput = {
    id?: number
  }

  export type sectorsWhereInput = {
    AND?: Enumerable<sectorsWhereInput>
    OR?: Enumerable<sectorsWhereInput>
    NOT?: Enumerable<sectorsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    projects?: ProjectsListRelationFilter
    startup_infos?: Startup_infosListRelationFilter
  }

  export type sectorsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type sectorsWhereUniqueInput = {
    id?: number
  }

  export type service_typesWhereInput = {
    AND?: Enumerable<service_typesWhereInput>
    OR?: Enumerable<service_typesWhereInput>
    NOT?: Enumerable<service_typesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    startup_infos?: Startup_infosListRelationFilter
  }

  export type service_typesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type service_typesWhereUniqueInput = {
    id?: number
  }

  export type signup_methodsWhereInput = {
    AND?: Enumerable<signup_methodsWhereInput>
    OR?: Enumerable<signup_methodsWhereInput>
    NOT?: Enumerable<signup_methodsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    users?: UsersListRelationFilter
  }

  export type signup_methodsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type signup_methodsWhereUniqueInput = {
    id?: number
  }

  export type startup_imagesWhereInput = {
    AND?: Enumerable<startup_imagesWhereInput>
    OR?: Enumerable<startup_imagesWhereInput>
    NOT?: Enumerable<startup_imagesWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    img_url?: StringFilter | string
    startup_infos?: XOR<startup_infosWhereInput, Startup_infosRelationFilter>
  }

  export type startup_imagesOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    img_url?: SortOrder
  }

  export type startup_imagesWhereUniqueInput = {
    id?: number
  }

  export type startup_infosWhereInput = {
    AND?: Enumerable<startup_infosWhereInput>
    OR?: Enumerable<startup_infosWhereInput>
    NOT?: Enumerable<startup_infosWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    rep?: StringNullableFilter | string | null
    sector_id?: IntNullableFilter | number | null
    core_technology_id?: IntNullableFilter | number | null
    item_description?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    address_road?: StringNullableFilter | string | null
    address_detail?: StringNullableFilter | string | null
    service_type_id?: IntNullableFilter | number | null
    business_type_id?: IntNullableFilter | number | null
    business_license_number?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    instagram_url?: StringNullableFilter | string | null
    facebook_url?: StringNullableFilter | string | null
    thumbnail?: StringNullableFilter | string | null
    business_types?: XOR<business_typesWhereInput, Business_typesRelationFilter> | null
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    technologies?: XOR<technologiesWhereInput, TechnologiesRelationFilter> | null
    sectors?: XOR<sectorsWhereInput, SectorsRelationFilter> | null
    service_types?: XOR<service_typesWhereInput, Service_typesRelationFilter> | null
    invested_from?: Invested_fromListRelationFilter
    startup_images?: Startup_imagesListRelationFilter
  }

  export type startup_infosOrderByInput = {
    id?: SortOrder
    company_id?: SortOrder
    rep?: SortOrder
    sector_id?: SortOrder
    core_technology_id?: SortOrder
    item_description?: SortOrder
    contact?: SortOrder
    address_road?: SortOrder
    address_detail?: SortOrder
    service_type_id?: SortOrder
    business_type_id?: SortOrder
    business_license_number?: SortOrder
    email?: SortOrder
    instagram_url?: SortOrder
    facebook_url?: SortOrder
    thumbnail?: SortOrder
  }

  export type startup_infosWhereUniqueInput = {
    id?: number
  }

  export type startup_likesWhereInput = {
    AND?: Enumerable<startup_likesWhereInput>
    OR?: Enumerable<startup_likesWhereInput>
    NOT?: Enumerable<startup_likesWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    company_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter>
    users?: XOR<usersWhereInput, UsersRelationFilter>
  }

  export type startup_likesOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    company_id?: SortOrder
    is_liked?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type startup_likesWhereUniqueInput = {
    id?: number
  }

  export type technologiesWhereInput = {
    AND?: Enumerable<technologiesWhereInput>
    OR?: Enumerable<technologiesWhereInput>
    NOT?: Enumerable<technologiesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    partner_infos?: Partner_infosListRelationFilter
    startup_infos?: Startup_infosListRelationFilter
  }

  export type technologiesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type technologiesWhereUniqueInput = {
    id?: number
  }

  export type termsWhereInput = {
    AND?: Enumerable<termsWhereInput>
    OR?: Enumerable<termsWhereInput>
    NOT?: Enumerable<termsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    content?: StringFilter | string
    user_agreements?: User_agreementsListRelationFilter
  }

  export type termsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    content?: SortOrder
  }

  export type termsWhereUniqueInput = {
    id?: number
  }

  export type user_agreementsWhereInput = {
    AND?: Enumerable<user_agreementsWhereInput>
    OR?: Enumerable<user_agreementsWhereInput>
    NOT?: Enumerable<user_agreementsWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    term_id?: IntFilter | number
    terms?: XOR<termsWhereInput, TermsRelationFilter>
    users?: XOR<usersWhereInput, UsersRelationFilter>
  }

  export type user_agreementsOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    term_id?: SortOrder
  }

  export type user_agreementsWhereUniqueInput = {
    id?: number
  }

  export type user_typesWhereInput = {
    AND?: Enumerable<user_typesWhereInput>
    OR?: Enumerable<user_typesWhereInput>
    NOT?: Enumerable<user_typesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    companies?: CompaniesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type user_typesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type user_typesWhereUniqueInput = {
    id?: number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    sns_id?: StringNullableFilter | string | null
    name?: StringFilter | string
    type_id?: IntNullableFilter | number | null
    profile_picture?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    signup_method_id?: IntFilter | number
    company_id?: IntNullableFilter | number | null
    phone_number?: StringNullableFilter | string | null
    is_verified?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    companies?: XOR<companiesWhereInput, CompaniesRelationFilter> | null
    signup_methods?: XOR<signup_methodsWhereInput, Signup_methodsRelationFilter>
    user_types?: XOR<user_typesWhereInput, User_typesRelationFilter> | null
    questions?: QuestionsListRelationFilter
    startup_likes?: Startup_likesListRelationFilter
    user_agreements?: User_agreementsListRelationFilter
    votes?: VotesListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    sns_id?: SortOrder
    name?: SortOrder
    type_id?: SortOrder
    profile_picture?: SortOrder
    email?: SortOrder
    password?: SortOrder
    signup_method_id?: SortOrder
    company_id?: SortOrder
    phone_number?: SortOrder
    is_verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    sns_id?: string
    email?: string
  }

  export type votesWhereInput = {
    AND?: Enumerable<votesWhereInput>
    OR?: Enumerable<votesWhereInput>
    NOT?: Enumerable<votesWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    participants_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    participants?: XOR<participantsWhereInput, ParticipantsRelationFilter>
    users?: XOR<usersWhereInput, UsersRelationFilter>
  }

  export type votesOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    participants_id?: SortOrder
    created_at?: SortOrder
  }

  export type votesWhereUniqueInput = {
    id?: number
  }

  export type answersCreateInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    questions: questionsCreateOneWithoutAnswersInput
  }

  export type answersUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionsUpdateOneRequiredWithoutAnswersInput
  }

  export type answersUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicantsCreateInput = {
    created_at: Date | string
    companies: companiesCreateOneWithoutApplicantsInput
    projects: projectsCreateOneWithoutApplicantsInput
  }

  export type applicantsUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutApplicantsInput
    projects?: projectsUpdateOneRequiredWithoutApplicantsInput
  }

  export type applicantsUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type business_typesCreateInput = {
    name: string
    startup_infos?: startup_infosCreateManyWithoutBusiness_typesInput
  }

  export type business_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    startup_infos?: startup_infosUpdateManyWithoutBusiness_typesInput
  }

  export type business_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type companiesCreateInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type company_documentsCreateInput = {
    doc_url: string
    companies: companiesCreateOneWithoutCompany_documentsInput
    document_types: document_typesCreateOneWithoutCompany_documentsInput
    IR_requests?: IR_requestsCreateManyWithoutCompany_documentsInput
  }

  export type company_documentsUpdateInput = {
    doc_url?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateOneRequiredWithoutCompany_documentsInput
    document_types?: document_typesUpdateOneRequiredWithoutCompany_documentsInput
    IR_requests?: IR_requestsUpdateManyWithoutCompany_documentsInput
  }

  export type company_documentsUpdateManyMutationInput = {
    doc_url?: StringFieldUpdateOperationsInput | string
  }

  export type company_membersCreateInput = {
    name?: string | null
    img?: string | null
    position?: string | null
    companies?: companiesCreateOneWithoutCompany_membersInput
  }

  export type company_membersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: companiesUpdateOneWithoutCompany_membersInput
  }

  export type company_membersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type company_newsCreateInput = {
    URL: string
    companies: companiesCreateOneWithoutCompany_newsInput
  }

  export type company_newsUpdateInput = {
    URL?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateOneRequiredWithoutCompany_newsInput
  }

  export type company_newsUpdateManyMutationInput = {
    URL?: StringFieldUpdateOperationsInput | string
  }

  export type company_typesCreateInput = {
    name: string
  }

  export type company_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type company_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type demodaysCreateInput = {
    name?: string | null
    streaming_url?: string | null
    companies?: companiesCreateOneWithoutDemodaysInput
    participants?: participantsCreateManyWithoutDemodaysInput
    questions?: questionsCreateManyWithoutDemodaysInput
  }

  export type demodaysUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    streaming_url?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: companiesUpdateOneWithoutDemodaysInput
    participants?: participantsUpdateManyWithoutDemodaysInput
    questions?: questionsUpdateManyWithoutDemodaysInput
  }

  export type demodaysUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    streaming_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type document_typesCreateInput = {
    name: string
    company_documents?: company_documentsCreateManyWithoutDocument_typesInput
    required_documents?: required_documentsCreateManyWithoutDocument_typesInput
  }

  export type document_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company_documents?: company_documentsUpdateManyWithoutDocument_typesInput
    required_documents?: required_documentsUpdateManyWithoutDocument_typesInput
  }

  export type document_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type email_authCreateInput = {
    email: string
    auth_number: string
  }

  export type email_authUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    auth_number?: StringFieldUpdateOperationsInput | string
  }

  export type email_authUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    auth_number?: StringFieldUpdateOperationsInput | string
  }

  export type invested_fromCreateInput = {
    date: Date | string
    invested_institution: string
    invested_fund: number
    corporate_value: number
    investment_series: investment_seriesCreateOneWithoutInvested_fromInput
    startup_infos: startup_infosCreateOneWithoutInvested_fromInput
  }

  export type invested_fromUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    invested_institution?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    investment_series?: investment_seriesUpdateOneRequiredWithoutInvested_fromInput
    startup_infos?: startup_infosUpdateOneRequiredWithoutInvested_fromInput
  }

  export type invested_fromUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    invested_institution?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
  }

  export type invested_toCreateInput = {
    date: Date | string
    startup_name: string
    invested_fund: number
    corporate_value: number
    companies: companiesCreateOneWithoutInvested_toInput
    investment_series: investment_seriesCreateOneWithoutInvested_toInput
  }

  export type invested_toUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startup_name?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    companies?: companiesUpdateOneRequiredWithoutInvested_toInput
    investment_series?: investment_seriesUpdateOneRequiredWithoutInvested_toInput
  }

  export type invested_toUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startup_name?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
  }

  export type investment_fundsCreateInput = {
    range: string
    partner_infos?: partner_infosCreateManyWithoutInvestment_fundsInput
  }

  export type investment_fundsUpdateInput = {
    range?: StringFieldUpdateOperationsInput | string
    partner_infos?: partner_infosUpdateManyWithoutInvestment_fundsInput
  }

  export type investment_fundsUpdateManyMutationInput = {
    range?: StringFieldUpdateOperationsInput | string
  }

  export type investment_portfolioCreateInput = {
    img_url: string
    partner_infos: partner_infosCreateOneWithoutInvestment_portfolioInput
  }

  export type investment_portfolioUpdateInput = {
    img_url?: StringFieldUpdateOperationsInput | string
    partner_infos?: partner_infosUpdateOneRequiredWithoutInvestment_portfolioInput
  }

  export type investment_portfolioUpdateManyMutationInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type investment_seriesCreateInput = {
    name: string
    invested_from?: invested_fromCreateManyWithoutInvestment_seriesInput
    invested_to?: invested_toCreateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    invested_from?: invested_fromUpdateManyWithoutInvestment_seriesInput
    invested_to?: invested_toUpdateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IR_requestsCreateInput = {
    is_checked: number
    from_partner: number
    created_at: Date | string
    updated_at: Date | string
    company_documents?: company_documentsCreateOneWithoutIR_requestsInput
    partner_infos: partner_infosCreateOneWithoutIR_requestsInput
    companies: companiesCreateOneWithoutIR_requestsInput
  }

  export type IR_requestsUpdateInput = {
    is_checked?: IntFieldUpdateOperationsInput | number
    from_partner?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company_documents?: company_documentsUpdateOneWithoutIR_requestsInput
    partner_infos?: partner_infosUpdateOneRequiredWithoutIR_requestsInput
    companies?: companiesUpdateOneRequiredWithoutIR_requestsInput
  }

  export type IR_requestsUpdateManyMutationInput = {
    is_checked?: IntFieldUpdateOperationsInput | number
    from_partner?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type participantsCreateInput = {
    order: number
    companies: companiesCreateOneWithoutParticipantsInput
    demodays: demodaysCreateOneWithoutParticipantsInput
    votes?: votesCreateManyWithoutParticipantsInput
  }

  export type participantsUpdateInput = {
    order?: IntFieldUpdateOperationsInput | number
    companies?: companiesUpdateOneRequiredWithoutParticipantsInput
    demodays?: demodaysUpdateOneRequiredWithoutParticipantsInput
    votes?: votesUpdateManyWithoutParticipantsInput
  }

  export type participantsUpdateManyMutationInput = {
    order?: IntFieldUpdateOperationsInput | number
  }

  export type partner_infosCreateInput = {
    invested_counts?: number | null
    companies: companiesCreateOneWithoutPartner_infosInput
    technologies?: technologiesCreateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsCreateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioCreateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsCreateManyWithoutPartner_infosInput
  }

  export type partner_infosUpdateInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    companies?: companiesUpdateOneRequiredWithoutPartner_infosInput
    technologies?: technologiesUpdateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsUpdateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioUpdateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsUpdateManyWithoutPartner_infosInput
  }

  export type partner_infosUpdateManyMutationInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type partner_likesCreateInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies_companiesTopartner_likes_company_liked_id: companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    companies_companiesTopartner_likes_company_likes_id: companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type partner_likesUpdateInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies_companiesTopartner_likes_company_liked_id?: companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    companies_companiesTopartner_likes_company_likes_id?: companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type partner_likesUpdateManyMutationInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type phone_authCreateInput = {
    phone_number: string
    auth_number: string
  }

  export type phone_authUpdateInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
    auth_number?: StringFieldUpdateOperationsInput | string
  }

  export type phone_authUpdateManyMutationInput = {
    phone_number?: StringFieldUpdateOperationsInput | string
    auth_number?: StringFieldUpdateOperationsInput | string
  }

  export type project_imagesCreateInput = {
    img_url: string
    projects: projectsCreateOneWithoutProject_imagesInput
  }

  export type project_imagesUpdateInput = {
    img_url?: StringFieldUpdateOperationsInput | string
    projects?: projectsUpdateOneRequiredWithoutProject_imagesInput
  }

  export type project_imagesUpdateManyMutationInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type project_likesCreateInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutProject_likesInput
    projects: projectsCreateOneWithoutProject_likesInput
  }

  export type project_likesUpdateInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutProject_likesInput
    projects?: projectsUpdateOneRequiredWithoutProject_likesInput
  }

  export type project_likesUpdateManyMutationInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectsCreateInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type projectsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type questionsCreateInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutQuestionsInput
    demodays: demodaysCreateOneWithoutQuestionsInput
    users: usersCreateOneWithoutQuestionsInput
    answers?: answersCreateManyWithoutQuestionsInput
  }

  export type questionsUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutQuestionsInput
    demodays?: demodaysUpdateOneRequiredWithoutQuestionsInput
    users?: usersUpdateOneRequiredWithoutQuestionsInput
    answers?: answersUpdateManyWithoutQuestionsInput
  }

  export type questionsUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type recent_views_projectCreateInput = {
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutRecent_views_projectInput
    projects: projectsCreateOneWithoutRecent_views_projectInput
  }

  export type recent_views_projectUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutRecent_views_projectInput
    projects?: projectsUpdateOneRequiredWithoutRecent_views_projectInput
  }

  export type recent_views_projectUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type required_documentsCreateInput = {
    document_types: document_typesCreateOneWithoutRequired_documentsInput
    projects: projectsCreateOneWithoutRequired_documentsInput
  }

  export type required_documentsUpdateInput = {
    document_types?: document_typesUpdateOneRequiredWithoutRequired_documentsInput
    projects?: projectsUpdateOneRequiredWithoutRequired_documentsInput
  }

  export type required_documentsUpdateManyMutationInput = {

  }

  export type sectorsCreateInput = {
    name: string
    projects?: projectsCreateManyWithoutSectorsInput
    startup_infos?: startup_infosCreateManyWithoutSectorsInput
  }

  export type sectorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    projects?: projectsUpdateManyWithoutSectorsInput
    startup_infos?: startup_infosUpdateManyWithoutSectorsInput
  }

  export type sectorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type service_typesCreateInput = {
    name: string
    startup_infos?: startup_infosCreateManyWithoutService_typesInput
  }

  export type service_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    startup_infos?: startup_infosUpdateManyWithoutService_typesInput
  }

  export type service_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type signup_methodsCreateInput = {
    name: string
    users?: usersCreateManyWithoutSignup_methodsInput
  }

  export type signup_methodsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutSignup_methodsInput
  }

  export type signup_methodsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type startup_imagesCreateInput = {
    img_url: string
    startup_infos: startup_infosCreateOneWithoutStartup_imagesInput
  }

  export type startup_imagesUpdateInput = {
    img_url?: StringFieldUpdateOperationsInput | string
    startup_infos?: startup_infosUpdateOneRequiredWithoutStartup_imagesInput
  }

  export type startup_imagesUpdateManyMutationInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type startup_infosCreateInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosUpdateInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type startup_infosUpdateManyMutationInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type startup_likesCreateInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutStartup_likesInput
    users: usersCreateOneWithoutStartup_likesInput
  }

  export type startup_likesUpdateInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutStartup_likesInput
    users?: usersUpdateOneRequiredWithoutStartup_likesInput
  }

  export type startup_likesUpdateManyMutationInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type technologiesCreateInput = {
    name: string
    partner_infos?: partner_infosCreateManyWithoutTechnologiesInput
    startup_infos?: startup_infosCreateManyWithoutTechnologiesInput
  }

  export type technologiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    partner_infos?: partner_infosUpdateManyWithoutTechnologiesInput
    startup_infos?: startup_infosUpdateManyWithoutTechnologiesInput
  }

  export type technologiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type termsCreateInput = {
    name: string
    content: string
    user_agreements?: user_agreementsCreateManyWithoutTermsInput
  }

  export type termsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    user_agreements?: user_agreementsUpdateManyWithoutTermsInput
  }

  export type termsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type user_agreementsCreateInput = {
    terms: termsCreateOneWithoutUser_agreementsInput
    users: usersCreateOneWithoutUser_agreementsInput
  }

  export type user_agreementsUpdateInput = {
    terms?: termsUpdateOneRequiredWithoutUser_agreementsInput
    users?: usersUpdateOneRequiredWithoutUser_agreementsInput
  }

  export type user_agreementsUpdateManyMutationInput = {

  }

  export type user_typesCreateInput = {
    name: string
    companies?: companiesCreateManyWithoutUser_typesInput
    users?: usersCreateManyWithoutUser_typesInput
  }

  export type user_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateManyWithoutUser_typesInput
    users?: usersUpdateManyWithoutUser_typesInput
  }

  export type user_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type usersUpdateManyMutationInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type votesCreateInput = {
    created_at: Date | string
    participants: participantsCreateOneWithoutVotesInput
    users: usersCreateOneWithoutVotesInput
  }

  export type votesUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: participantsUpdateOneRequiredWithoutVotesInput
    users?: usersUpdateOneRequiredWithoutVotesInput
  }

  export type votesUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type QuestionsRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type CompaniesRelationFilter = {
    is?: companiesWhereInput | null
    isNot?: companiesWhereInput | null
  }

  export type ProjectsRelationFilter = {
    is?: projectsWhereInput
    isNot?: projectsWhereInput
  }

  export type Startup_infosListRelationFilter = {
    every?: startup_infosWhereInput
    some?: startup_infosWhereInput
    none?: startup_infosWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type User_typesRelationFilter = {
    is?: user_typesWhereInput | null
    isNot?: user_typesWhereInput | null
  }

  export type ApplicantsListRelationFilter = {
    every?: applicantsWhereInput
    some?: applicantsWhereInput
    none?: applicantsWhereInput
  }

  export type Company_documentsListRelationFilter = {
    every?: company_documentsWhereInput
    some?: company_documentsWhereInput
    none?: company_documentsWhereInput
  }

  export type Company_membersListRelationFilter = {
    every?: company_membersWhereInput
    some?: company_membersWhereInput
    none?: company_membersWhereInput
  }

  export type Company_newsListRelationFilter = {
    every?: company_newsWhereInput
    some?: company_newsWhereInput
    none?: company_newsWhereInput
  }

  export type DemodaysListRelationFilter = {
    every?: demodaysWhereInput
    some?: demodaysWhereInput
    none?: demodaysWhereInput
  }

  export type Invested_toListRelationFilter = {
    every?: invested_toWhereInput
    some?: invested_toWhereInput
    none?: invested_toWhereInput
  }

  export type IR_requestsListRelationFilter = {
    every?: IR_requestsWhereInput
    some?: IR_requestsWhereInput
    none?: IR_requestsWhereInput
  }

  export type ParticipantsListRelationFilter = {
    every?: participantsWhereInput
    some?: participantsWhereInput
    none?: participantsWhereInput
  }

  export type Partner_infosListRelationFilter = {
    every?: partner_infosWhereInput
    some?: partner_infosWhereInput
    none?: partner_infosWhereInput
  }

  export type Partner_likesListRelationFilter = {
    every?: partner_likesWhereInput
    some?: partner_likesWhereInput
    none?: partner_likesWhereInput
  }

  export type Project_likesListRelationFilter = {
    every?: project_likesWhereInput
    some?: project_likesWhereInput
    none?: project_likesWhereInput
  }

  export type ProjectsListRelationFilter = {
    every?: projectsWhereInput
    some?: projectsWhereInput
    none?: projectsWhereInput
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type Recent_views_projectListRelationFilter = {
    every?: recent_views_projectWhereInput
    some?: recent_views_projectWhereInput
    none?: recent_views_projectWhereInput
  }

  export type Startup_likesListRelationFilter = {
    every?: startup_likesWhereInput
    some?: startup_likesWhereInput
    none?: startup_likesWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type Document_typesRelationFilter = {
    is?: document_typesWhereInput
    isNot?: document_typesWhereInput
  }

  export type Required_documentsListRelationFilter = {
    every?: required_documentsWhereInput
    some?: required_documentsWhereInput
    none?: required_documentsWhereInput
  }

  export type Investment_seriesRelationFilter = {
    is?: investment_seriesWhereInput
    isNot?: investment_seriesWhereInput
  }

  export type Startup_infosRelationFilter = {
    is?: startup_infosWhereInput
    isNot?: startup_infosWhereInput
  }

  export type Partner_infosRelationFilter = {
    is?: partner_infosWhereInput
    isNot?: partner_infosWhereInput
  }

  export type Invested_fromListRelationFilter = {
    every?: invested_fromWhereInput
    some?: invested_fromWhereInput
    none?: invested_fromWhereInput
  }

  export type Company_documentsRelationFilter = {
    is?: company_documentsWhereInput | null
    isNot?: company_documentsWhereInput | null
  }

  export type DemodaysRelationFilter = {
    is?: demodaysWhereInput
    isNot?: demodaysWhereInput
  }

  export type VotesListRelationFilter = {
    every?: votesWhereInput
    some?: votesWhereInput
    none?: votesWhereInput
  }

  export type TechnologiesRelationFilter = {
    is?: technologiesWhereInput | null
    isNot?: technologiesWhereInput | null
  }

  export type Investment_fundsRelationFilter = {
    is?: investment_fundsWhereInput | null
    isNot?: investment_fundsWhereInput | null
  }

  export type Investment_portfolioListRelationFilter = {
    every?: investment_portfolioWhereInput
    some?: investment_portfolioWhereInput
    none?: investment_portfolioWhereInput
  }

  export type SectorsRelationFilter = {
    is?: sectorsWhereInput | null
    isNot?: sectorsWhereInput | null
  }

  export type Project_imagesListRelationFilter = {
    every?: project_imagesWhereInput
    some?: project_imagesWhereInput
    none?: project_imagesWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type AnswersListRelationFilter = {
    every?: answersWhereInput
    some?: answersWhereInput
    none?: answersWhereInput
  }

  export type Business_typesRelationFilter = {
    is?: business_typesWhereInput | null
    isNot?: business_typesWhereInput | null
  }

  export type Service_typesRelationFilter = {
    is?: service_typesWhereInput | null
    isNot?: service_typesWhereInput | null
  }

  export type Startup_imagesListRelationFilter = {
    every?: startup_imagesWhereInput
    some?: startup_imagesWhereInput
    none?: startup_imagesWhereInput
  }

  export type User_agreementsListRelationFilter = {
    every?: user_agreementsWhereInput
    some?: user_agreementsWhereInput
    none?: user_agreementsWhereInput
  }

  export type TermsRelationFilter = {
    is?: termsWhereInput
    isNot?: termsWhereInput
  }

  export type CompaniesListRelationFilter = {
    every?: companiesWhereInput
    some?: companiesWhereInput
    none?: companiesWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type Signup_methodsRelationFilter = {
    is?: signup_methodsWhereInput
    isNot?: signup_methodsWhereInput
  }

  export type ParticipantsRelationFilter = {
    is?: participantsWhereInput
    isNot?: participantsWhereInput
  }

  export type questionsCreateOneWithoutAnswersInput = {
    create?: questionsCreateWithoutAnswersInput
    connect?: questionsWhereUniqueInput
    connectOrCreate?: questionsCreateOrConnectWithoutanswersInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type questionsUpdateOneRequiredWithoutAnswersInput = {
    create?: questionsCreateWithoutAnswersInput
    connect?: questionsWhereUniqueInput
    update?: questionsUpdateWithoutAnswersInput
    upsert?: questionsUpsertWithoutAnswersInput
    connectOrCreate?: questionsCreateOrConnectWithoutanswersInput
  }

  export type companiesCreateOneWithoutApplicantsInput = {
    create?: companiesCreateWithoutApplicantsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutapplicantsInput
  }

  export type projectsCreateOneWithoutApplicantsInput = {
    create?: projectsCreateWithoutApplicantsInput
    connect?: projectsWhereUniqueInput
    connectOrCreate?: projectsCreateOrConnectWithoutapplicantsInput
  }

  export type companiesUpdateOneRequiredWithoutApplicantsInput = {
    create?: companiesCreateWithoutApplicantsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutApplicantsInput
    upsert?: companiesUpsertWithoutApplicantsInput
    connectOrCreate?: companiesCreateOrConnectWithoutapplicantsInput
  }

  export type projectsUpdateOneRequiredWithoutApplicantsInput = {
    create?: projectsCreateWithoutApplicantsInput
    connect?: projectsWhereUniqueInput
    update?: projectsUpdateWithoutApplicantsInput
    upsert?: projectsUpsertWithoutApplicantsInput
    connectOrCreate?: projectsCreateOrConnectWithoutapplicantsInput
  }

  export type startup_infosCreateManyWithoutBusiness_typesInput = {
    create?: Enumerable<startup_infosCreateWithoutBusiness_typesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutbusiness_typesInput>
  }

  export type startup_infosUpdateManyWithoutBusiness_typesInput = {
    create?: Enumerable<startup_infosCreateWithoutBusiness_typesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    set?: Enumerable<startup_infosWhereUniqueInput>
    disconnect?: Enumerable<startup_infosWhereUniqueInput>
    delete?: Enumerable<startup_infosWhereUniqueInput>
    update?: Enumerable<startup_infosUpdateWithWhereUniqueWithoutBusiness_typesInput>
    updateMany?: Enumerable<startup_infosUpdateManyWithWhereWithoutBusiness_typesInput>
    deleteMany?: Enumerable<startup_infosScalarWhereInput>
    upsert?: Enumerable<startup_infosUpsertWithWhereUniqueWithoutBusiness_typesInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutbusiness_typesInput>
  }

  export type user_typesCreateOneWithoutCompaniesInput = {
    create?: user_typesCreateWithoutCompaniesInput
    connect?: user_typesWhereUniqueInput
    connectOrCreate?: user_typesCreateOrConnectWithoutcompaniesInput
  }

  export type applicantsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<applicantsCreateWithoutCompaniesInput>
    connect?: Enumerable<applicantsWhereUniqueInput>
    connectOrCreate?: Enumerable<applicantsCreateOrConnectWithoutcompaniesInput>
  }

  export type company_documentsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<company_documentsCreateWithoutCompaniesInput>
    connect?: Enumerable<company_documentsWhereUniqueInput>
    connectOrCreate?: Enumerable<company_documentsCreateOrConnectWithoutcompaniesInput>
  }

  export type company_membersCreateManyWithoutCompaniesInput = {
    create?: Enumerable<company_membersCreateWithoutCompaniesInput>
    connect?: Enumerable<company_membersWhereUniqueInput>
    connectOrCreate?: Enumerable<company_membersCreateOrConnectWithoutcompaniesInput>
  }

  export type company_newsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<company_newsCreateWithoutCompaniesInput>
    connect?: Enumerable<company_newsWhereUniqueInput>
    connectOrCreate?: Enumerable<company_newsCreateOrConnectWithoutcompaniesInput>
  }

  export type demodaysCreateManyWithoutCompaniesInput = {
    create?: Enumerable<demodaysCreateWithoutCompaniesInput>
    connect?: Enumerable<demodaysWhereUniqueInput>
    connectOrCreate?: Enumerable<demodaysCreateOrConnectWithoutcompaniesInput>
  }

  export type invested_toCreateManyWithoutCompaniesInput = {
    create?: Enumerable<invested_toCreateWithoutCompaniesInput>
    connect?: Enumerable<invested_toWhereUniqueInput>
    connectOrCreate?: Enumerable<invested_toCreateOrConnectWithoutcompaniesInput>
  }

  export type IR_requestsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<IR_requestsCreateWithoutCompaniesInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutcompaniesInput>
  }

  export type participantsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<participantsCreateWithoutCompaniesInput>
    connect?: Enumerable<participantsWhereUniqueInput>
    connectOrCreate?: Enumerable<participantsCreateOrConnectWithoutcompaniesInput>
  }

  export type partner_infosCreateManyWithoutCompaniesInput = {
    create?: Enumerable<partner_infosCreateWithoutCompaniesInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithoutcompaniesInput>
  }

  export type partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    create?: Enumerable<partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput>
    connect?: Enumerable<partner_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput>
  }

  export type partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    create?: Enumerable<partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput>
    connect?: Enumerable<partner_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput>
  }

  export type project_likesCreateManyWithoutCompaniesInput = {
    create?: Enumerable<project_likesCreateWithoutCompaniesInput>
    connect?: Enumerable<project_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<project_likesCreateOrConnectWithoutcompaniesInput>
  }

  export type projectsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<projectsCreateWithoutCompaniesInput>
    connect?: Enumerable<projectsWhereUniqueInput>
    connectOrCreate?: Enumerable<projectsCreateOrConnectWithoutcompaniesInput>
  }

  export type questionsCreateManyWithoutCompaniesInput = {
    create?: Enumerable<questionsCreateWithoutCompaniesInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutcompaniesInput>
  }

  export type recent_views_projectCreateManyWithoutCompaniesInput = {
    create?: Enumerable<recent_views_projectCreateWithoutCompaniesInput>
    connect?: Enumerable<recent_views_projectWhereUniqueInput>
    connectOrCreate?: Enumerable<recent_views_projectCreateOrConnectWithoutcompaniesInput>
  }

  export type startup_infosCreateManyWithoutCompaniesInput = {
    create?: Enumerable<startup_infosCreateWithoutCompaniesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutcompaniesInput>
  }

  export type startup_likesCreateManyWithoutCompaniesInput = {
    create?: Enumerable<startup_likesCreateWithoutCompaniesInput>
    connect?: Enumerable<startup_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_likesCreateOrConnectWithoutcompaniesInput>
  }

  export type usersCreateManyWithoutCompaniesInput = {
    create?: Enumerable<usersCreateWithoutCompaniesInput>
    connect?: Enumerable<usersWhereUniqueInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutcompaniesInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_typesUpdateOneWithoutCompaniesInput = {
    create?: user_typesCreateWithoutCompaniesInput
    connect?: user_typesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: user_typesUpdateWithoutCompaniesInput
    upsert?: user_typesUpsertWithoutCompaniesInput
    connectOrCreate?: user_typesCreateOrConnectWithoutcompaniesInput
  }

  export type applicantsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<applicantsCreateWithoutCompaniesInput>
    connect?: Enumerable<applicantsWhereUniqueInput>
    set?: Enumerable<applicantsWhereUniqueInput>
    disconnect?: Enumerable<applicantsWhereUniqueInput>
    delete?: Enumerable<applicantsWhereUniqueInput>
    update?: Enumerable<applicantsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<applicantsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<applicantsScalarWhereInput>
    upsert?: Enumerable<applicantsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<applicantsCreateOrConnectWithoutcompaniesInput>
  }

  export type company_documentsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<company_documentsCreateWithoutCompaniesInput>
    connect?: Enumerable<company_documentsWhereUniqueInput>
    set?: Enumerable<company_documentsWhereUniqueInput>
    disconnect?: Enumerable<company_documentsWhereUniqueInput>
    delete?: Enumerable<company_documentsWhereUniqueInput>
    update?: Enumerable<company_documentsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<company_documentsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<company_documentsScalarWhereInput>
    upsert?: Enumerable<company_documentsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<company_documentsCreateOrConnectWithoutcompaniesInput>
  }

  export type company_membersUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<company_membersCreateWithoutCompaniesInput>
    connect?: Enumerable<company_membersWhereUniqueInput>
    set?: Enumerable<company_membersWhereUniqueInput>
    disconnect?: Enumerable<company_membersWhereUniqueInput>
    delete?: Enumerable<company_membersWhereUniqueInput>
    update?: Enumerable<company_membersUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<company_membersUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<company_membersScalarWhereInput>
    upsert?: Enumerable<company_membersUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<company_membersCreateOrConnectWithoutcompaniesInput>
  }

  export type company_newsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<company_newsCreateWithoutCompaniesInput>
    connect?: Enumerable<company_newsWhereUniqueInput>
    set?: Enumerable<company_newsWhereUniqueInput>
    disconnect?: Enumerable<company_newsWhereUniqueInput>
    delete?: Enumerable<company_newsWhereUniqueInput>
    update?: Enumerable<company_newsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<company_newsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<company_newsScalarWhereInput>
    upsert?: Enumerable<company_newsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<company_newsCreateOrConnectWithoutcompaniesInput>
  }

  export type demodaysUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<demodaysCreateWithoutCompaniesInput>
    connect?: Enumerable<demodaysWhereUniqueInput>
    set?: Enumerable<demodaysWhereUniqueInput>
    disconnect?: Enumerable<demodaysWhereUniqueInput>
    delete?: Enumerable<demodaysWhereUniqueInput>
    update?: Enumerable<demodaysUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<demodaysUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<demodaysScalarWhereInput>
    upsert?: Enumerable<demodaysUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<demodaysCreateOrConnectWithoutcompaniesInput>
  }

  export type invested_toUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<invested_toCreateWithoutCompaniesInput>
    connect?: Enumerable<invested_toWhereUniqueInput>
    set?: Enumerable<invested_toWhereUniqueInput>
    disconnect?: Enumerable<invested_toWhereUniqueInput>
    delete?: Enumerable<invested_toWhereUniqueInput>
    update?: Enumerable<invested_toUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<invested_toUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<invested_toScalarWhereInput>
    upsert?: Enumerable<invested_toUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<invested_toCreateOrConnectWithoutcompaniesInput>
  }

  export type IR_requestsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<IR_requestsCreateWithoutCompaniesInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    set?: Enumerable<IR_requestsWhereUniqueInput>
    disconnect?: Enumerable<IR_requestsWhereUniqueInput>
    delete?: Enumerable<IR_requestsWhereUniqueInput>
    update?: Enumerable<IR_requestsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<IR_requestsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<IR_requestsScalarWhereInput>
    upsert?: Enumerable<IR_requestsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutcompaniesInput>
  }

  export type participantsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<participantsCreateWithoutCompaniesInput>
    connect?: Enumerable<participantsWhereUniqueInput>
    set?: Enumerable<participantsWhereUniqueInput>
    disconnect?: Enumerable<participantsWhereUniqueInput>
    delete?: Enumerable<participantsWhereUniqueInput>
    update?: Enumerable<participantsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<participantsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<participantsScalarWhereInput>
    upsert?: Enumerable<participantsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<participantsCreateOrConnectWithoutcompaniesInput>
  }

  export type partner_infosUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<partner_infosCreateWithoutCompaniesInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    set?: Enumerable<partner_infosWhereUniqueInput>
    disconnect?: Enumerable<partner_infosWhereUniqueInput>
    delete?: Enumerable<partner_infosWhereUniqueInput>
    update?: Enumerable<partner_infosUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<partner_infosUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<partner_infosScalarWhereInput>
    upsert?: Enumerable<partner_infosUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithoutcompaniesInput>
  }

  export type partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    create?: Enumerable<partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput>
    connect?: Enumerable<partner_likesWhereUniqueInput>
    set?: Enumerable<partner_likesWhereUniqueInput>
    disconnect?: Enumerable<partner_likesWhereUniqueInput>
    delete?: Enumerable<partner_likesWhereUniqueInput>
    update?: Enumerable<partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput>
    updateMany?: Enumerable<partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_liked_idInput>
    deleteMany?: Enumerable<partner_likesScalarWhereInput>
    upsert?: Enumerable<partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput>
    connectOrCreate?: Enumerable<partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput>
  }

  export type partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    create?: Enumerable<partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput>
    connect?: Enumerable<partner_likesWhereUniqueInput>
    set?: Enumerable<partner_likesWhereUniqueInput>
    disconnect?: Enumerable<partner_likesWhereUniqueInput>
    delete?: Enumerable<partner_likesWhereUniqueInput>
    update?: Enumerable<partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput>
    updateMany?: Enumerable<partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_likes_idInput>
    deleteMany?: Enumerable<partner_likesScalarWhereInput>
    upsert?: Enumerable<partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput>
    connectOrCreate?: Enumerable<partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput>
  }

  export type project_likesUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<project_likesCreateWithoutCompaniesInput>
    connect?: Enumerable<project_likesWhereUniqueInput>
    set?: Enumerable<project_likesWhereUniqueInput>
    disconnect?: Enumerable<project_likesWhereUniqueInput>
    delete?: Enumerable<project_likesWhereUniqueInput>
    update?: Enumerable<project_likesUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<project_likesUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<project_likesScalarWhereInput>
    upsert?: Enumerable<project_likesUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<project_likesCreateOrConnectWithoutcompaniesInput>
  }

  export type projectsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<projectsCreateWithoutCompaniesInput>
    connect?: Enumerable<projectsWhereUniqueInput>
    set?: Enumerable<projectsWhereUniqueInput>
    disconnect?: Enumerable<projectsWhereUniqueInput>
    delete?: Enumerable<projectsWhereUniqueInput>
    update?: Enumerable<projectsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<projectsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<projectsScalarWhereInput>
    upsert?: Enumerable<projectsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<projectsCreateOrConnectWithoutcompaniesInput>
  }

  export type questionsUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<questionsCreateWithoutCompaniesInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    set?: Enumerable<questionsWhereUniqueInput>
    disconnect?: Enumerable<questionsWhereUniqueInput>
    delete?: Enumerable<questionsWhereUniqueInput>
    update?: Enumerable<questionsUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<questionsUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<questionsScalarWhereInput>
    upsert?: Enumerable<questionsUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutcompaniesInput>
  }

  export type recent_views_projectUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<recent_views_projectCreateWithoutCompaniesInput>
    connect?: Enumerable<recent_views_projectWhereUniqueInput>
    set?: Enumerable<recent_views_projectWhereUniqueInput>
    disconnect?: Enumerable<recent_views_projectWhereUniqueInput>
    delete?: Enumerable<recent_views_projectWhereUniqueInput>
    update?: Enumerable<recent_views_projectUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<recent_views_projectUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<recent_views_projectScalarWhereInput>
    upsert?: Enumerable<recent_views_projectUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<recent_views_projectCreateOrConnectWithoutcompaniesInput>
  }

  export type startup_infosUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<startup_infosCreateWithoutCompaniesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    set?: Enumerable<startup_infosWhereUniqueInput>
    disconnect?: Enumerable<startup_infosWhereUniqueInput>
    delete?: Enumerable<startup_infosWhereUniqueInput>
    update?: Enumerable<startup_infosUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<startup_infosUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<startup_infosScalarWhereInput>
    upsert?: Enumerable<startup_infosUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutcompaniesInput>
  }

  export type startup_likesUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<startup_likesCreateWithoutCompaniesInput>
    connect?: Enumerable<startup_likesWhereUniqueInput>
    set?: Enumerable<startup_likesWhereUniqueInput>
    disconnect?: Enumerable<startup_likesWhereUniqueInput>
    delete?: Enumerable<startup_likesWhereUniqueInput>
    update?: Enumerable<startup_likesUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<startup_likesUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<startup_likesScalarWhereInput>
    upsert?: Enumerable<startup_likesUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<startup_likesCreateOrConnectWithoutcompaniesInput>
  }

  export type usersUpdateManyWithoutCompaniesInput = {
    create?: Enumerable<usersCreateWithoutCompaniesInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutCompaniesInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutCompaniesInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutCompaniesInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutcompaniesInput>
  }

  export type companiesCreateOneWithoutCompany_documentsInput = {
    create?: companiesCreateWithoutCompany_documentsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_documentsInput
  }

  export type document_typesCreateOneWithoutCompany_documentsInput = {
    create?: document_typesCreateWithoutCompany_documentsInput
    connect?: document_typesWhereUniqueInput
    connectOrCreate?: document_typesCreateOrConnectWithoutcompany_documentsInput
  }

  export type IR_requestsCreateManyWithoutCompany_documentsInput = {
    create?: Enumerable<IR_requestsCreateWithoutCompany_documentsInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutcompany_documentsInput>
  }

  export type companiesUpdateOneRequiredWithoutCompany_documentsInput = {
    create?: companiesCreateWithoutCompany_documentsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutCompany_documentsInput
    upsert?: companiesUpsertWithoutCompany_documentsInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_documentsInput
  }

  export type document_typesUpdateOneRequiredWithoutCompany_documentsInput = {
    create?: document_typesCreateWithoutCompany_documentsInput
    connect?: document_typesWhereUniqueInput
    update?: document_typesUpdateWithoutCompany_documentsInput
    upsert?: document_typesUpsertWithoutCompany_documentsInput
    connectOrCreate?: document_typesCreateOrConnectWithoutcompany_documentsInput
  }

  export type IR_requestsUpdateManyWithoutCompany_documentsInput = {
    create?: Enumerable<IR_requestsCreateWithoutCompany_documentsInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    set?: Enumerable<IR_requestsWhereUniqueInput>
    disconnect?: Enumerable<IR_requestsWhereUniqueInput>
    delete?: Enumerable<IR_requestsWhereUniqueInput>
    update?: Enumerable<IR_requestsUpdateWithWhereUniqueWithoutCompany_documentsInput>
    updateMany?: Enumerable<IR_requestsUpdateManyWithWhereWithoutCompany_documentsInput>
    deleteMany?: Enumerable<IR_requestsScalarWhereInput>
    upsert?: Enumerable<IR_requestsUpsertWithWhereUniqueWithoutCompany_documentsInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutcompany_documentsInput>
  }

  export type companiesCreateOneWithoutCompany_membersInput = {
    create?: companiesCreateWithoutCompany_membersInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_membersInput
  }

  export type companiesUpdateOneWithoutCompany_membersInput = {
    create?: companiesCreateWithoutCompany_membersInput
    connect?: companiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: companiesUpdateWithoutCompany_membersInput
    upsert?: companiesUpsertWithoutCompany_membersInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_membersInput
  }

  export type companiesCreateOneWithoutCompany_newsInput = {
    create?: companiesCreateWithoutCompany_newsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_newsInput
  }

  export type companiesUpdateOneRequiredWithoutCompany_newsInput = {
    create?: companiesCreateWithoutCompany_newsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutCompany_newsInput
    upsert?: companiesUpsertWithoutCompany_newsInput
    connectOrCreate?: companiesCreateOrConnectWithoutcompany_newsInput
  }

  export type companiesCreateOneWithoutDemodaysInput = {
    create?: companiesCreateWithoutDemodaysInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutdemodaysInput
  }

  export type participantsCreateManyWithoutDemodaysInput = {
    create?: Enumerable<participantsCreateWithoutDemodaysInput>
    connect?: Enumerable<participantsWhereUniqueInput>
    connectOrCreate?: Enumerable<participantsCreateOrConnectWithoutdemodaysInput>
  }

  export type questionsCreateManyWithoutDemodaysInput = {
    create?: Enumerable<questionsCreateWithoutDemodaysInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutdemodaysInput>
  }

  export type companiesUpdateOneWithoutDemodaysInput = {
    create?: companiesCreateWithoutDemodaysInput
    connect?: companiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: companiesUpdateWithoutDemodaysInput
    upsert?: companiesUpsertWithoutDemodaysInput
    connectOrCreate?: companiesCreateOrConnectWithoutdemodaysInput
  }

  export type participantsUpdateManyWithoutDemodaysInput = {
    create?: Enumerable<participantsCreateWithoutDemodaysInput>
    connect?: Enumerable<participantsWhereUniqueInput>
    set?: Enumerable<participantsWhereUniqueInput>
    disconnect?: Enumerable<participantsWhereUniqueInput>
    delete?: Enumerable<participantsWhereUniqueInput>
    update?: Enumerable<participantsUpdateWithWhereUniqueWithoutDemodaysInput>
    updateMany?: Enumerable<participantsUpdateManyWithWhereWithoutDemodaysInput>
    deleteMany?: Enumerable<participantsScalarWhereInput>
    upsert?: Enumerable<participantsUpsertWithWhereUniqueWithoutDemodaysInput>
    connectOrCreate?: Enumerable<participantsCreateOrConnectWithoutdemodaysInput>
  }

  export type questionsUpdateManyWithoutDemodaysInput = {
    create?: Enumerable<questionsCreateWithoutDemodaysInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    set?: Enumerable<questionsWhereUniqueInput>
    disconnect?: Enumerable<questionsWhereUniqueInput>
    delete?: Enumerable<questionsWhereUniqueInput>
    update?: Enumerable<questionsUpdateWithWhereUniqueWithoutDemodaysInput>
    updateMany?: Enumerable<questionsUpdateManyWithWhereWithoutDemodaysInput>
    deleteMany?: Enumerable<questionsScalarWhereInput>
    upsert?: Enumerable<questionsUpsertWithWhereUniqueWithoutDemodaysInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutdemodaysInput>
  }

  export type company_documentsCreateManyWithoutDocument_typesInput = {
    create?: Enumerable<company_documentsCreateWithoutDocument_typesInput>
    connect?: Enumerable<company_documentsWhereUniqueInput>
    connectOrCreate?: Enumerable<company_documentsCreateOrConnectWithoutdocument_typesInput>
  }

  export type required_documentsCreateManyWithoutDocument_typesInput = {
    create?: Enumerable<required_documentsCreateWithoutDocument_typesInput>
    connect?: Enumerable<required_documentsWhereUniqueInput>
    connectOrCreate?: Enumerable<required_documentsCreateOrConnectWithoutdocument_typesInput>
  }

  export type company_documentsUpdateManyWithoutDocument_typesInput = {
    create?: Enumerable<company_documentsCreateWithoutDocument_typesInput>
    connect?: Enumerable<company_documentsWhereUniqueInput>
    set?: Enumerable<company_documentsWhereUniqueInput>
    disconnect?: Enumerable<company_documentsWhereUniqueInput>
    delete?: Enumerable<company_documentsWhereUniqueInput>
    update?: Enumerable<company_documentsUpdateWithWhereUniqueWithoutDocument_typesInput>
    updateMany?: Enumerable<company_documentsUpdateManyWithWhereWithoutDocument_typesInput>
    deleteMany?: Enumerable<company_documentsScalarWhereInput>
    upsert?: Enumerable<company_documentsUpsertWithWhereUniqueWithoutDocument_typesInput>
    connectOrCreate?: Enumerable<company_documentsCreateOrConnectWithoutdocument_typesInput>
  }

  export type required_documentsUpdateManyWithoutDocument_typesInput = {
    create?: Enumerable<required_documentsCreateWithoutDocument_typesInput>
    connect?: Enumerable<required_documentsWhereUniqueInput>
    set?: Enumerable<required_documentsWhereUniqueInput>
    disconnect?: Enumerable<required_documentsWhereUniqueInput>
    delete?: Enumerable<required_documentsWhereUniqueInput>
    update?: Enumerable<required_documentsUpdateWithWhereUniqueWithoutDocument_typesInput>
    updateMany?: Enumerable<required_documentsUpdateManyWithWhereWithoutDocument_typesInput>
    deleteMany?: Enumerable<required_documentsScalarWhereInput>
    upsert?: Enumerable<required_documentsUpsertWithWhereUniqueWithoutDocument_typesInput>
    connectOrCreate?: Enumerable<required_documentsCreateOrConnectWithoutdocument_typesInput>
  }

  export type investment_seriesCreateOneWithoutInvested_fromInput = {
    create?: investment_seriesCreateWithoutInvested_fromInput
    connect?: investment_seriesWhereUniqueInput
    connectOrCreate?: investment_seriesCreateOrConnectWithoutinvested_fromInput
  }

  export type startup_infosCreateOneWithoutInvested_fromInput = {
    create?: startup_infosCreateWithoutInvested_fromInput
    connect?: startup_infosWhereUniqueInput
    connectOrCreate?: startup_infosCreateOrConnectWithoutinvested_fromInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type investment_seriesUpdateOneRequiredWithoutInvested_fromInput = {
    create?: investment_seriesCreateWithoutInvested_fromInput
    connect?: investment_seriesWhereUniqueInput
    update?: investment_seriesUpdateWithoutInvested_fromInput
    upsert?: investment_seriesUpsertWithoutInvested_fromInput
    connectOrCreate?: investment_seriesCreateOrConnectWithoutinvested_fromInput
  }

  export type startup_infosUpdateOneRequiredWithoutInvested_fromInput = {
    create?: startup_infosCreateWithoutInvested_fromInput
    connect?: startup_infosWhereUniqueInput
    update?: startup_infosUpdateWithoutInvested_fromInput
    upsert?: startup_infosUpsertWithoutInvested_fromInput
    connectOrCreate?: startup_infosCreateOrConnectWithoutinvested_fromInput
  }

  export type companiesCreateOneWithoutInvested_toInput = {
    create?: companiesCreateWithoutInvested_toInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutinvested_toInput
  }

  export type investment_seriesCreateOneWithoutInvested_toInput = {
    create?: investment_seriesCreateWithoutInvested_toInput
    connect?: investment_seriesWhereUniqueInput
    connectOrCreate?: investment_seriesCreateOrConnectWithoutinvested_toInput
  }

  export type companiesUpdateOneRequiredWithoutInvested_toInput = {
    create?: companiesCreateWithoutInvested_toInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutInvested_toInput
    upsert?: companiesUpsertWithoutInvested_toInput
    connectOrCreate?: companiesCreateOrConnectWithoutinvested_toInput
  }

  export type investment_seriesUpdateOneRequiredWithoutInvested_toInput = {
    create?: investment_seriesCreateWithoutInvested_toInput
    connect?: investment_seriesWhereUniqueInput
    update?: investment_seriesUpdateWithoutInvested_toInput
    upsert?: investment_seriesUpsertWithoutInvested_toInput
    connectOrCreate?: investment_seriesCreateOrConnectWithoutinvested_toInput
  }

  export type partner_infosCreateManyWithoutInvestment_fundsInput = {
    create?: Enumerable<partner_infosCreateWithoutInvestment_fundsInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithoutinvestment_fundsInput>
  }

  export type partner_infosUpdateManyWithoutInvestment_fundsInput = {
    create?: Enumerable<partner_infosCreateWithoutInvestment_fundsInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    set?: Enumerable<partner_infosWhereUniqueInput>
    disconnect?: Enumerable<partner_infosWhereUniqueInput>
    delete?: Enumerable<partner_infosWhereUniqueInput>
    update?: Enumerable<partner_infosUpdateWithWhereUniqueWithoutInvestment_fundsInput>
    updateMany?: Enumerable<partner_infosUpdateManyWithWhereWithoutInvestment_fundsInput>
    deleteMany?: Enumerable<partner_infosScalarWhereInput>
    upsert?: Enumerable<partner_infosUpsertWithWhereUniqueWithoutInvestment_fundsInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithoutinvestment_fundsInput>
  }

  export type partner_infosCreateOneWithoutInvestment_portfolioInput = {
    create?: partner_infosCreateWithoutInvestment_portfolioInput
    connect?: partner_infosWhereUniqueInput
    connectOrCreate?: partner_infosCreateOrConnectWithoutinvestment_portfolioInput
  }

  export type partner_infosUpdateOneRequiredWithoutInvestment_portfolioInput = {
    create?: partner_infosCreateWithoutInvestment_portfolioInput
    connect?: partner_infosWhereUniqueInput
    update?: partner_infosUpdateWithoutInvestment_portfolioInput
    upsert?: partner_infosUpsertWithoutInvestment_portfolioInput
    connectOrCreate?: partner_infosCreateOrConnectWithoutinvestment_portfolioInput
  }

  export type invested_fromCreateManyWithoutInvestment_seriesInput = {
    create?: Enumerable<invested_fromCreateWithoutInvestment_seriesInput>
    connect?: Enumerable<invested_fromWhereUniqueInput>
    connectOrCreate?: Enumerable<invested_fromCreateOrConnectWithoutinvestment_seriesInput>
  }

  export type invested_toCreateManyWithoutInvestment_seriesInput = {
    create?: Enumerable<invested_toCreateWithoutInvestment_seriesInput>
    connect?: Enumerable<invested_toWhereUniqueInput>
    connectOrCreate?: Enumerable<invested_toCreateOrConnectWithoutinvestment_seriesInput>
  }

  export type invested_fromUpdateManyWithoutInvestment_seriesInput = {
    create?: Enumerable<invested_fromCreateWithoutInvestment_seriesInput>
    connect?: Enumerable<invested_fromWhereUniqueInput>
    set?: Enumerable<invested_fromWhereUniqueInput>
    disconnect?: Enumerable<invested_fromWhereUniqueInput>
    delete?: Enumerable<invested_fromWhereUniqueInput>
    update?: Enumerable<invested_fromUpdateWithWhereUniqueWithoutInvestment_seriesInput>
    updateMany?: Enumerable<invested_fromUpdateManyWithWhereWithoutInvestment_seriesInput>
    deleteMany?: Enumerable<invested_fromScalarWhereInput>
    upsert?: Enumerable<invested_fromUpsertWithWhereUniqueWithoutInvestment_seriesInput>
    connectOrCreate?: Enumerable<invested_fromCreateOrConnectWithoutinvestment_seriesInput>
  }

  export type invested_toUpdateManyWithoutInvestment_seriesInput = {
    create?: Enumerable<invested_toCreateWithoutInvestment_seriesInput>
    connect?: Enumerable<invested_toWhereUniqueInput>
    set?: Enumerable<invested_toWhereUniqueInput>
    disconnect?: Enumerable<invested_toWhereUniqueInput>
    delete?: Enumerable<invested_toWhereUniqueInput>
    update?: Enumerable<invested_toUpdateWithWhereUniqueWithoutInvestment_seriesInput>
    updateMany?: Enumerable<invested_toUpdateManyWithWhereWithoutInvestment_seriesInput>
    deleteMany?: Enumerable<invested_toScalarWhereInput>
    upsert?: Enumerable<invested_toUpsertWithWhereUniqueWithoutInvestment_seriesInput>
    connectOrCreate?: Enumerable<invested_toCreateOrConnectWithoutinvestment_seriesInput>
  }

  export type company_documentsCreateOneWithoutIR_requestsInput = {
    create?: company_documentsCreateWithoutIR_requestsInput
    connect?: company_documentsWhereUniqueInput
    connectOrCreate?: company_documentsCreateOrConnectWithoutIR_requestsInput
  }

  export type partner_infosCreateOneWithoutIR_requestsInput = {
    create?: partner_infosCreateWithoutIR_requestsInput
    connect?: partner_infosWhereUniqueInput
    connectOrCreate?: partner_infosCreateOrConnectWithoutIR_requestsInput
  }

  export type companiesCreateOneWithoutIR_requestsInput = {
    create?: companiesCreateWithoutIR_requestsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutIR_requestsInput
  }

  export type company_documentsUpdateOneWithoutIR_requestsInput = {
    create?: company_documentsCreateWithoutIR_requestsInput
    connect?: company_documentsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: company_documentsUpdateWithoutIR_requestsInput
    upsert?: company_documentsUpsertWithoutIR_requestsInput
    connectOrCreate?: company_documentsCreateOrConnectWithoutIR_requestsInput
  }

  export type partner_infosUpdateOneRequiredWithoutIR_requestsInput = {
    create?: partner_infosCreateWithoutIR_requestsInput
    connect?: partner_infosWhereUniqueInput
    update?: partner_infosUpdateWithoutIR_requestsInput
    upsert?: partner_infosUpsertWithoutIR_requestsInput
    connectOrCreate?: partner_infosCreateOrConnectWithoutIR_requestsInput
  }

  export type companiesUpdateOneRequiredWithoutIR_requestsInput = {
    create?: companiesCreateWithoutIR_requestsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutIR_requestsInput
    upsert?: companiesUpsertWithoutIR_requestsInput
    connectOrCreate?: companiesCreateOrConnectWithoutIR_requestsInput
  }

  export type companiesCreateOneWithoutParticipantsInput = {
    create?: companiesCreateWithoutParticipantsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutparticipantsInput
  }

  export type demodaysCreateOneWithoutParticipantsInput = {
    create?: demodaysCreateWithoutParticipantsInput
    connect?: demodaysWhereUniqueInput
    connectOrCreate?: demodaysCreateOrConnectWithoutparticipantsInput
  }

  export type votesCreateManyWithoutParticipantsInput = {
    create?: Enumerable<votesCreateWithoutParticipantsInput>
    connect?: Enumerable<votesWhereUniqueInput>
    connectOrCreate?: Enumerable<votesCreateOrConnectWithoutparticipantsInput>
  }

  export type companiesUpdateOneRequiredWithoutParticipantsInput = {
    create?: companiesCreateWithoutParticipantsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutParticipantsInput
    upsert?: companiesUpsertWithoutParticipantsInput
    connectOrCreate?: companiesCreateOrConnectWithoutparticipantsInput
  }

  export type demodaysUpdateOneRequiredWithoutParticipantsInput = {
    create?: demodaysCreateWithoutParticipantsInput
    connect?: demodaysWhereUniqueInput
    update?: demodaysUpdateWithoutParticipantsInput
    upsert?: demodaysUpsertWithoutParticipantsInput
    connectOrCreate?: demodaysCreateOrConnectWithoutparticipantsInput
  }

  export type votesUpdateManyWithoutParticipantsInput = {
    create?: Enumerable<votesCreateWithoutParticipantsInput>
    connect?: Enumerable<votesWhereUniqueInput>
    set?: Enumerable<votesWhereUniqueInput>
    disconnect?: Enumerable<votesWhereUniqueInput>
    delete?: Enumerable<votesWhereUniqueInput>
    update?: Enumerable<votesUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<votesUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<votesScalarWhereInput>
    upsert?: Enumerable<votesUpsertWithWhereUniqueWithoutParticipantsInput>
    connectOrCreate?: Enumerable<votesCreateOrConnectWithoutparticipantsInput>
  }

  export type companiesCreateOneWithoutPartner_infosInput = {
    create?: companiesCreateWithoutPartner_infosInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_infosInput
  }

  export type technologiesCreateOneWithoutPartner_infosInput = {
    create?: technologiesCreateWithoutPartner_infosInput
    connect?: technologiesWhereUniqueInput
    connectOrCreate?: technologiesCreateOrConnectWithoutpartner_infosInput
  }

  export type investment_fundsCreateOneWithoutPartner_infosInput = {
    create?: investment_fundsCreateWithoutPartner_infosInput
    connect?: investment_fundsWhereUniqueInput
    connectOrCreate?: investment_fundsCreateOrConnectWithoutpartner_infosInput
  }

  export type investment_portfolioCreateManyWithoutPartner_infosInput = {
    create?: Enumerable<investment_portfolioCreateWithoutPartner_infosInput>
    connect?: Enumerable<investment_portfolioWhereUniqueInput>
    connectOrCreate?: Enumerable<investment_portfolioCreateOrConnectWithoutpartner_infosInput>
  }

  export type IR_requestsCreateManyWithoutPartner_infosInput = {
    create?: Enumerable<IR_requestsCreateWithoutPartner_infosInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutpartner_infosInput>
  }

  export type companiesUpdateOneRequiredWithoutPartner_infosInput = {
    create?: companiesCreateWithoutPartner_infosInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutPartner_infosInput
    upsert?: companiesUpsertWithoutPartner_infosInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_infosInput
  }

  export type technologiesUpdateOneWithoutPartner_infosInput = {
    create?: technologiesCreateWithoutPartner_infosInput
    connect?: technologiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: technologiesUpdateWithoutPartner_infosInput
    upsert?: technologiesUpsertWithoutPartner_infosInput
    connectOrCreate?: technologiesCreateOrConnectWithoutpartner_infosInput
  }

  export type investment_fundsUpdateOneWithoutPartner_infosInput = {
    create?: investment_fundsCreateWithoutPartner_infosInput
    connect?: investment_fundsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: investment_fundsUpdateWithoutPartner_infosInput
    upsert?: investment_fundsUpsertWithoutPartner_infosInput
    connectOrCreate?: investment_fundsCreateOrConnectWithoutpartner_infosInput
  }

  export type investment_portfolioUpdateManyWithoutPartner_infosInput = {
    create?: Enumerable<investment_portfolioCreateWithoutPartner_infosInput>
    connect?: Enumerable<investment_portfolioWhereUniqueInput>
    set?: Enumerable<investment_portfolioWhereUniqueInput>
    disconnect?: Enumerable<investment_portfolioWhereUniqueInput>
    delete?: Enumerable<investment_portfolioWhereUniqueInput>
    update?: Enumerable<investment_portfolioUpdateWithWhereUniqueWithoutPartner_infosInput>
    updateMany?: Enumerable<investment_portfolioUpdateManyWithWhereWithoutPartner_infosInput>
    deleteMany?: Enumerable<investment_portfolioScalarWhereInput>
    upsert?: Enumerable<investment_portfolioUpsertWithWhereUniqueWithoutPartner_infosInput>
    connectOrCreate?: Enumerable<investment_portfolioCreateOrConnectWithoutpartner_infosInput>
  }

  export type IR_requestsUpdateManyWithoutPartner_infosInput = {
    create?: Enumerable<IR_requestsCreateWithoutPartner_infosInput>
    connect?: Enumerable<IR_requestsWhereUniqueInput>
    set?: Enumerable<IR_requestsWhereUniqueInput>
    disconnect?: Enumerable<IR_requestsWhereUniqueInput>
    delete?: Enumerable<IR_requestsWhereUniqueInput>
    update?: Enumerable<IR_requestsUpdateWithWhereUniqueWithoutPartner_infosInput>
    updateMany?: Enumerable<IR_requestsUpdateManyWithWhereWithoutPartner_infosInput>
    deleteMany?: Enumerable<IR_requestsScalarWhereInput>
    upsert?: Enumerable<IR_requestsUpsertWithWhereUniqueWithoutPartner_infosInput>
    connectOrCreate?: Enumerable<IR_requestsCreateOrConnectWithoutpartner_infosInput>
  }

  export type companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = {
    create?: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = {
    create?: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = {
    create?: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    upsert?: companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = {
    create?: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
    upsert?: companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
    connectOrCreate?: companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type projectsCreateOneWithoutProject_imagesInput = {
    create?: projectsCreateWithoutProject_imagesInput
    connect?: projectsWhereUniqueInput
    connectOrCreate?: projectsCreateOrConnectWithoutproject_imagesInput
  }

  export type projectsUpdateOneRequiredWithoutProject_imagesInput = {
    create?: projectsCreateWithoutProject_imagesInput
    connect?: projectsWhereUniqueInput
    update?: projectsUpdateWithoutProject_imagesInput
    upsert?: projectsUpsertWithoutProject_imagesInput
    connectOrCreate?: projectsCreateOrConnectWithoutproject_imagesInput
  }

  export type companiesCreateOneWithoutProject_likesInput = {
    create?: companiesCreateWithoutProject_likesInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutproject_likesInput
  }

  export type projectsCreateOneWithoutProject_likesInput = {
    create?: projectsCreateWithoutProject_likesInput
    connect?: projectsWhereUniqueInput
    connectOrCreate?: projectsCreateOrConnectWithoutproject_likesInput
  }

  export type companiesUpdateOneRequiredWithoutProject_likesInput = {
    create?: companiesCreateWithoutProject_likesInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutProject_likesInput
    upsert?: companiesUpsertWithoutProject_likesInput
    connectOrCreate?: companiesCreateOrConnectWithoutproject_likesInput
  }

  export type projectsUpdateOneRequiredWithoutProject_likesInput = {
    create?: projectsCreateWithoutProject_likesInput
    connect?: projectsWhereUniqueInput
    update?: projectsUpdateWithoutProject_likesInput
    upsert?: projectsUpsertWithoutProject_likesInput
    connectOrCreate?: projectsCreateOrConnectWithoutproject_likesInput
  }

  export type companiesCreateOneWithoutProjectsInput = {
    create?: companiesCreateWithoutProjectsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutprojectsInput
  }

  export type sectorsCreateOneWithoutProjectsInput = {
    create?: sectorsCreateWithoutProjectsInput
    connect?: sectorsWhereUniqueInput
    connectOrCreate?: sectorsCreateOrConnectWithoutprojectsInput
  }

  export type applicantsCreateManyWithoutProjectsInput = {
    create?: Enumerable<applicantsCreateWithoutProjectsInput>
    connect?: Enumerable<applicantsWhereUniqueInput>
    connectOrCreate?: Enumerable<applicantsCreateOrConnectWithoutprojectsInput>
  }

  export type project_imagesCreateManyWithoutProjectsInput = {
    create?: Enumerable<project_imagesCreateWithoutProjectsInput>
    connect?: Enumerable<project_imagesWhereUniqueInput>
    connectOrCreate?: Enumerable<project_imagesCreateOrConnectWithoutprojectsInput>
  }

  export type project_likesCreateManyWithoutProjectsInput = {
    create?: Enumerable<project_likesCreateWithoutProjectsInput>
    connect?: Enumerable<project_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<project_likesCreateOrConnectWithoutprojectsInput>
  }

  export type recent_views_projectCreateManyWithoutProjectsInput = {
    create?: Enumerable<recent_views_projectCreateWithoutProjectsInput>
    connect?: Enumerable<recent_views_projectWhereUniqueInput>
    connectOrCreate?: Enumerable<recent_views_projectCreateOrConnectWithoutprojectsInput>
  }

  export type required_documentsCreateManyWithoutProjectsInput = {
    create?: Enumerable<required_documentsCreateWithoutProjectsInput>
    connect?: Enumerable<required_documentsWhereUniqueInput>
    connectOrCreate?: Enumerable<required_documentsCreateOrConnectWithoutprojectsInput>
  }

  export type companiesUpdateOneWithoutProjectsInput = {
    create?: companiesCreateWithoutProjectsInput
    connect?: companiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: companiesUpdateWithoutProjectsInput
    upsert?: companiesUpsertWithoutProjectsInput
    connectOrCreate?: companiesCreateOrConnectWithoutprojectsInput
  }

  export type sectorsUpdateOneWithoutProjectsInput = {
    create?: sectorsCreateWithoutProjectsInput
    connect?: sectorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: sectorsUpdateWithoutProjectsInput
    upsert?: sectorsUpsertWithoutProjectsInput
    connectOrCreate?: sectorsCreateOrConnectWithoutprojectsInput
  }

  export type applicantsUpdateManyWithoutProjectsInput = {
    create?: Enumerable<applicantsCreateWithoutProjectsInput>
    connect?: Enumerable<applicantsWhereUniqueInput>
    set?: Enumerable<applicantsWhereUniqueInput>
    disconnect?: Enumerable<applicantsWhereUniqueInput>
    delete?: Enumerable<applicantsWhereUniqueInput>
    update?: Enumerable<applicantsUpdateWithWhereUniqueWithoutProjectsInput>
    updateMany?: Enumerable<applicantsUpdateManyWithWhereWithoutProjectsInput>
    deleteMany?: Enumerable<applicantsScalarWhereInput>
    upsert?: Enumerable<applicantsUpsertWithWhereUniqueWithoutProjectsInput>
    connectOrCreate?: Enumerable<applicantsCreateOrConnectWithoutprojectsInput>
  }

  export type project_imagesUpdateManyWithoutProjectsInput = {
    create?: Enumerable<project_imagesCreateWithoutProjectsInput>
    connect?: Enumerable<project_imagesWhereUniqueInput>
    set?: Enumerable<project_imagesWhereUniqueInput>
    disconnect?: Enumerable<project_imagesWhereUniqueInput>
    delete?: Enumerable<project_imagesWhereUniqueInput>
    update?: Enumerable<project_imagesUpdateWithWhereUniqueWithoutProjectsInput>
    updateMany?: Enumerable<project_imagesUpdateManyWithWhereWithoutProjectsInput>
    deleteMany?: Enumerable<project_imagesScalarWhereInput>
    upsert?: Enumerable<project_imagesUpsertWithWhereUniqueWithoutProjectsInput>
    connectOrCreate?: Enumerable<project_imagesCreateOrConnectWithoutprojectsInput>
  }

  export type project_likesUpdateManyWithoutProjectsInput = {
    create?: Enumerable<project_likesCreateWithoutProjectsInput>
    connect?: Enumerable<project_likesWhereUniqueInput>
    set?: Enumerable<project_likesWhereUniqueInput>
    disconnect?: Enumerable<project_likesWhereUniqueInput>
    delete?: Enumerable<project_likesWhereUniqueInput>
    update?: Enumerable<project_likesUpdateWithWhereUniqueWithoutProjectsInput>
    updateMany?: Enumerable<project_likesUpdateManyWithWhereWithoutProjectsInput>
    deleteMany?: Enumerable<project_likesScalarWhereInput>
    upsert?: Enumerable<project_likesUpsertWithWhereUniqueWithoutProjectsInput>
    connectOrCreate?: Enumerable<project_likesCreateOrConnectWithoutprojectsInput>
  }

  export type recent_views_projectUpdateManyWithoutProjectsInput = {
    create?: Enumerable<recent_views_projectCreateWithoutProjectsInput>
    connect?: Enumerable<recent_views_projectWhereUniqueInput>
    set?: Enumerable<recent_views_projectWhereUniqueInput>
    disconnect?: Enumerable<recent_views_projectWhereUniqueInput>
    delete?: Enumerable<recent_views_projectWhereUniqueInput>
    update?: Enumerable<recent_views_projectUpdateWithWhereUniqueWithoutProjectsInput>
    updateMany?: Enumerable<recent_views_projectUpdateManyWithWhereWithoutProjectsInput>
    deleteMany?: Enumerable<recent_views_projectScalarWhereInput>
    upsert?: Enumerable<recent_views_projectUpsertWithWhereUniqueWithoutProjectsInput>
    connectOrCreate?: Enumerable<recent_views_projectCreateOrConnectWithoutprojectsInput>
  }

  export type required_documentsUpdateManyWithoutProjectsInput = {
    create?: Enumerable<required_documentsCreateWithoutProjectsInput>
    connect?: Enumerable<required_documentsWhereUniqueInput>
    set?: Enumerable<required_documentsWhereUniqueInput>
    disconnect?: Enumerable<required_documentsWhereUniqueInput>
    delete?: Enumerable<required_documentsWhereUniqueInput>
    update?: Enumerable<required_documentsUpdateWithWhereUniqueWithoutProjectsInput>
    updateMany?: Enumerable<required_documentsUpdateManyWithWhereWithoutProjectsInput>
    deleteMany?: Enumerable<required_documentsScalarWhereInput>
    upsert?: Enumerable<required_documentsUpsertWithWhereUniqueWithoutProjectsInput>
    connectOrCreate?: Enumerable<required_documentsCreateOrConnectWithoutprojectsInput>
  }

  export type companiesCreateOneWithoutQuestionsInput = {
    create?: companiesCreateWithoutQuestionsInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutquestionsInput
  }

  export type demodaysCreateOneWithoutQuestionsInput = {
    create?: demodaysCreateWithoutQuestionsInput
    connect?: demodaysWhereUniqueInput
    connectOrCreate?: demodaysCreateOrConnectWithoutquestionsInput
  }

  export type usersCreateOneWithoutQuestionsInput = {
    create?: usersCreateWithoutQuestionsInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutquestionsInput
  }

  export type answersCreateManyWithoutQuestionsInput = {
    create?: Enumerable<answersCreateWithoutQuestionsInput>
    connect?: Enumerable<answersWhereUniqueInput>
    connectOrCreate?: Enumerable<answersCreateOrConnectWithoutquestionsInput>
  }

  export type companiesUpdateOneRequiredWithoutQuestionsInput = {
    create?: companiesCreateWithoutQuestionsInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutQuestionsInput
    upsert?: companiesUpsertWithoutQuestionsInput
    connectOrCreate?: companiesCreateOrConnectWithoutquestionsInput
  }

  export type demodaysUpdateOneRequiredWithoutQuestionsInput = {
    create?: demodaysCreateWithoutQuestionsInput
    connect?: demodaysWhereUniqueInput
    update?: demodaysUpdateWithoutQuestionsInput
    upsert?: demodaysUpsertWithoutQuestionsInput
    connectOrCreate?: demodaysCreateOrConnectWithoutquestionsInput
  }

  export type usersUpdateOneRequiredWithoutQuestionsInput = {
    create?: usersCreateWithoutQuestionsInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutQuestionsInput
    upsert?: usersUpsertWithoutQuestionsInput
    connectOrCreate?: usersCreateOrConnectWithoutquestionsInput
  }

  export type answersUpdateManyWithoutQuestionsInput = {
    create?: Enumerable<answersCreateWithoutQuestionsInput>
    connect?: Enumerable<answersWhereUniqueInput>
    set?: Enumerable<answersWhereUniqueInput>
    disconnect?: Enumerable<answersWhereUniqueInput>
    delete?: Enumerable<answersWhereUniqueInput>
    update?: Enumerable<answersUpdateWithWhereUniqueWithoutQuestionsInput>
    updateMany?: Enumerable<answersUpdateManyWithWhereWithoutQuestionsInput>
    deleteMany?: Enumerable<answersScalarWhereInput>
    upsert?: Enumerable<answersUpsertWithWhereUniqueWithoutQuestionsInput>
    connectOrCreate?: Enumerable<answersCreateOrConnectWithoutquestionsInput>
  }

  export type companiesCreateOneWithoutRecent_views_projectInput = {
    create?: companiesCreateWithoutRecent_views_projectInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutrecent_views_projectInput
  }

  export type projectsCreateOneWithoutRecent_views_projectInput = {
    create?: projectsCreateWithoutRecent_views_projectInput
    connect?: projectsWhereUniqueInput
    connectOrCreate?: projectsCreateOrConnectWithoutrecent_views_projectInput
  }

  export type companiesUpdateOneRequiredWithoutRecent_views_projectInput = {
    create?: companiesCreateWithoutRecent_views_projectInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutRecent_views_projectInput
    upsert?: companiesUpsertWithoutRecent_views_projectInput
    connectOrCreate?: companiesCreateOrConnectWithoutrecent_views_projectInput
  }

  export type projectsUpdateOneRequiredWithoutRecent_views_projectInput = {
    create?: projectsCreateWithoutRecent_views_projectInput
    connect?: projectsWhereUniqueInput
    update?: projectsUpdateWithoutRecent_views_projectInput
    upsert?: projectsUpsertWithoutRecent_views_projectInput
    connectOrCreate?: projectsCreateOrConnectWithoutrecent_views_projectInput
  }

  export type document_typesCreateOneWithoutRequired_documentsInput = {
    create?: document_typesCreateWithoutRequired_documentsInput
    connect?: document_typesWhereUniqueInput
    connectOrCreate?: document_typesCreateOrConnectWithoutrequired_documentsInput
  }

  export type projectsCreateOneWithoutRequired_documentsInput = {
    create?: projectsCreateWithoutRequired_documentsInput
    connect?: projectsWhereUniqueInput
    connectOrCreate?: projectsCreateOrConnectWithoutrequired_documentsInput
  }

  export type document_typesUpdateOneRequiredWithoutRequired_documentsInput = {
    create?: document_typesCreateWithoutRequired_documentsInput
    connect?: document_typesWhereUniqueInput
    update?: document_typesUpdateWithoutRequired_documentsInput
    upsert?: document_typesUpsertWithoutRequired_documentsInput
    connectOrCreate?: document_typesCreateOrConnectWithoutrequired_documentsInput
  }

  export type projectsUpdateOneRequiredWithoutRequired_documentsInput = {
    create?: projectsCreateWithoutRequired_documentsInput
    connect?: projectsWhereUniqueInput
    update?: projectsUpdateWithoutRequired_documentsInput
    upsert?: projectsUpsertWithoutRequired_documentsInput
    connectOrCreate?: projectsCreateOrConnectWithoutrequired_documentsInput
  }

  export type projectsCreateManyWithoutSectorsInput = {
    create?: Enumerable<projectsCreateWithoutSectorsInput>
    connect?: Enumerable<projectsWhereUniqueInput>
    connectOrCreate?: Enumerable<projectsCreateOrConnectWithoutsectorsInput>
  }

  export type startup_infosCreateManyWithoutSectorsInput = {
    create?: Enumerable<startup_infosCreateWithoutSectorsInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutsectorsInput>
  }

  export type projectsUpdateManyWithoutSectorsInput = {
    create?: Enumerable<projectsCreateWithoutSectorsInput>
    connect?: Enumerable<projectsWhereUniqueInput>
    set?: Enumerable<projectsWhereUniqueInput>
    disconnect?: Enumerable<projectsWhereUniqueInput>
    delete?: Enumerable<projectsWhereUniqueInput>
    update?: Enumerable<projectsUpdateWithWhereUniqueWithoutSectorsInput>
    updateMany?: Enumerable<projectsUpdateManyWithWhereWithoutSectorsInput>
    deleteMany?: Enumerable<projectsScalarWhereInput>
    upsert?: Enumerable<projectsUpsertWithWhereUniqueWithoutSectorsInput>
    connectOrCreate?: Enumerable<projectsCreateOrConnectWithoutsectorsInput>
  }

  export type startup_infosUpdateManyWithoutSectorsInput = {
    create?: Enumerable<startup_infosCreateWithoutSectorsInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    set?: Enumerable<startup_infosWhereUniqueInput>
    disconnect?: Enumerable<startup_infosWhereUniqueInput>
    delete?: Enumerable<startup_infosWhereUniqueInput>
    update?: Enumerable<startup_infosUpdateWithWhereUniqueWithoutSectorsInput>
    updateMany?: Enumerable<startup_infosUpdateManyWithWhereWithoutSectorsInput>
    deleteMany?: Enumerable<startup_infosScalarWhereInput>
    upsert?: Enumerable<startup_infosUpsertWithWhereUniqueWithoutSectorsInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutsectorsInput>
  }

  export type startup_infosCreateManyWithoutService_typesInput = {
    create?: Enumerable<startup_infosCreateWithoutService_typesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutservice_typesInput>
  }

  export type startup_infosUpdateManyWithoutService_typesInput = {
    create?: Enumerable<startup_infosCreateWithoutService_typesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    set?: Enumerable<startup_infosWhereUniqueInput>
    disconnect?: Enumerable<startup_infosWhereUniqueInput>
    delete?: Enumerable<startup_infosWhereUniqueInput>
    update?: Enumerable<startup_infosUpdateWithWhereUniqueWithoutService_typesInput>
    updateMany?: Enumerable<startup_infosUpdateManyWithWhereWithoutService_typesInput>
    deleteMany?: Enumerable<startup_infosScalarWhereInput>
    upsert?: Enumerable<startup_infosUpsertWithWhereUniqueWithoutService_typesInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithoutservice_typesInput>
  }

  export type usersCreateManyWithoutSignup_methodsInput = {
    create?: Enumerable<usersCreateWithoutSignup_methodsInput>
    connect?: Enumerable<usersWhereUniqueInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutsignup_methodsInput>
  }

  export type usersUpdateManyWithoutSignup_methodsInput = {
    create?: Enumerable<usersCreateWithoutSignup_methodsInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutSignup_methodsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutSignup_methodsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutSignup_methodsInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutsignup_methodsInput>
  }

  export type startup_infosCreateOneWithoutStartup_imagesInput = {
    create?: startup_infosCreateWithoutStartup_imagesInput
    connect?: startup_infosWhereUniqueInput
    connectOrCreate?: startup_infosCreateOrConnectWithoutstartup_imagesInput
  }

  export type startup_infosUpdateOneRequiredWithoutStartup_imagesInput = {
    create?: startup_infosCreateWithoutStartup_imagesInput
    connect?: startup_infosWhereUniqueInput
    update?: startup_infosUpdateWithoutStartup_imagesInput
    upsert?: startup_infosUpsertWithoutStartup_imagesInput
    connectOrCreate?: startup_infosCreateOrConnectWithoutstartup_imagesInput
  }

  export type business_typesCreateOneWithoutStartup_infosInput = {
    create?: business_typesCreateWithoutStartup_infosInput
    connect?: business_typesWhereUniqueInput
    connectOrCreate?: business_typesCreateOrConnectWithoutstartup_infosInput
  }

  export type companiesCreateOneWithoutStartup_infosInput = {
    create?: companiesCreateWithoutStartup_infosInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutstartup_infosInput
  }

  export type technologiesCreateOneWithoutStartup_infosInput = {
    create?: technologiesCreateWithoutStartup_infosInput
    connect?: technologiesWhereUniqueInput
    connectOrCreate?: technologiesCreateOrConnectWithoutstartup_infosInput
  }

  export type sectorsCreateOneWithoutStartup_infosInput = {
    create?: sectorsCreateWithoutStartup_infosInput
    connect?: sectorsWhereUniqueInput
    connectOrCreate?: sectorsCreateOrConnectWithoutstartup_infosInput
  }

  export type service_typesCreateOneWithoutStartup_infosInput = {
    create?: service_typesCreateWithoutStartup_infosInput
    connect?: service_typesWhereUniqueInput
    connectOrCreate?: service_typesCreateOrConnectWithoutstartup_infosInput
  }

  export type invested_fromCreateManyWithoutStartup_infosInput = {
    create?: Enumerable<invested_fromCreateWithoutStartup_infosInput>
    connect?: Enumerable<invested_fromWhereUniqueInput>
    connectOrCreate?: Enumerable<invested_fromCreateOrConnectWithoutstartup_infosInput>
  }

  export type startup_imagesCreateManyWithoutStartup_infosInput = {
    create?: Enumerable<startup_imagesCreateWithoutStartup_infosInput>
    connect?: Enumerable<startup_imagesWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_imagesCreateOrConnectWithoutstartup_infosInput>
  }

  export type business_typesUpdateOneWithoutStartup_infosInput = {
    create?: business_typesCreateWithoutStartup_infosInput
    connect?: business_typesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: business_typesUpdateWithoutStartup_infosInput
    upsert?: business_typesUpsertWithoutStartup_infosInput
    connectOrCreate?: business_typesCreateOrConnectWithoutstartup_infosInput
  }

  export type companiesUpdateOneRequiredWithoutStartup_infosInput = {
    create?: companiesCreateWithoutStartup_infosInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutStartup_infosInput
    upsert?: companiesUpsertWithoutStartup_infosInput
    connectOrCreate?: companiesCreateOrConnectWithoutstartup_infosInput
  }

  export type technologiesUpdateOneWithoutStartup_infosInput = {
    create?: technologiesCreateWithoutStartup_infosInput
    connect?: technologiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: technologiesUpdateWithoutStartup_infosInput
    upsert?: technologiesUpsertWithoutStartup_infosInput
    connectOrCreate?: technologiesCreateOrConnectWithoutstartup_infosInput
  }

  export type sectorsUpdateOneWithoutStartup_infosInput = {
    create?: sectorsCreateWithoutStartup_infosInput
    connect?: sectorsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: sectorsUpdateWithoutStartup_infosInput
    upsert?: sectorsUpsertWithoutStartup_infosInput
    connectOrCreate?: sectorsCreateOrConnectWithoutstartup_infosInput
  }

  export type service_typesUpdateOneWithoutStartup_infosInput = {
    create?: service_typesCreateWithoutStartup_infosInput
    connect?: service_typesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: service_typesUpdateWithoutStartup_infosInput
    upsert?: service_typesUpsertWithoutStartup_infosInput
    connectOrCreate?: service_typesCreateOrConnectWithoutstartup_infosInput
  }

  export type invested_fromUpdateManyWithoutStartup_infosInput = {
    create?: Enumerable<invested_fromCreateWithoutStartup_infosInput>
    connect?: Enumerable<invested_fromWhereUniqueInput>
    set?: Enumerable<invested_fromWhereUniqueInput>
    disconnect?: Enumerable<invested_fromWhereUniqueInput>
    delete?: Enumerable<invested_fromWhereUniqueInput>
    update?: Enumerable<invested_fromUpdateWithWhereUniqueWithoutStartup_infosInput>
    updateMany?: Enumerable<invested_fromUpdateManyWithWhereWithoutStartup_infosInput>
    deleteMany?: Enumerable<invested_fromScalarWhereInput>
    upsert?: Enumerable<invested_fromUpsertWithWhereUniqueWithoutStartup_infosInput>
    connectOrCreate?: Enumerable<invested_fromCreateOrConnectWithoutstartup_infosInput>
  }

  export type startup_imagesUpdateManyWithoutStartup_infosInput = {
    create?: Enumerable<startup_imagesCreateWithoutStartup_infosInput>
    connect?: Enumerable<startup_imagesWhereUniqueInput>
    set?: Enumerable<startup_imagesWhereUniqueInput>
    disconnect?: Enumerable<startup_imagesWhereUniqueInput>
    delete?: Enumerable<startup_imagesWhereUniqueInput>
    update?: Enumerable<startup_imagesUpdateWithWhereUniqueWithoutStartup_infosInput>
    updateMany?: Enumerable<startup_imagesUpdateManyWithWhereWithoutStartup_infosInput>
    deleteMany?: Enumerable<startup_imagesScalarWhereInput>
    upsert?: Enumerable<startup_imagesUpsertWithWhereUniqueWithoutStartup_infosInput>
    connectOrCreate?: Enumerable<startup_imagesCreateOrConnectWithoutstartup_infosInput>
  }

  export type companiesCreateOneWithoutStartup_likesInput = {
    create?: companiesCreateWithoutStartup_likesInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutstartup_likesInput
  }

  export type usersCreateOneWithoutStartup_likesInput = {
    create?: usersCreateWithoutStartup_likesInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutstartup_likesInput
  }

  export type companiesUpdateOneRequiredWithoutStartup_likesInput = {
    create?: companiesCreateWithoutStartup_likesInput
    connect?: companiesWhereUniqueInput
    update?: companiesUpdateWithoutStartup_likesInput
    upsert?: companiesUpsertWithoutStartup_likesInput
    connectOrCreate?: companiesCreateOrConnectWithoutstartup_likesInput
  }

  export type usersUpdateOneRequiredWithoutStartup_likesInput = {
    create?: usersCreateWithoutStartup_likesInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutStartup_likesInput
    upsert?: usersUpsertWithoutStartup_likesInput
    connectOrCreate?: usersCreateOrConnectWithoutstartup_likesInput
  }

  export type partner_infosCreateManyWithoutTechnologiesInput = {
    create?: Enumerable<partner_infosCreateWithoutTechnologiesInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithouttechnologiesInput>
  }

  export type startup_infosCreateManyWithoutTechnologiesInput = {
    create?: Enumerable<startup_infosCreateWithoutTechnologiesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithouttechnologiesInput>
  }

  export type partner_infosUpdateManyWithoutTechnologiesInput = {
    create?: Enumerable<partner_infosCreateWithoutTechnologiesInput>
    connect?: Enumerable<partner_infosWhereUniqueInput>
    set?: Enumerable<partner_infosWhereUniqueInput>
    disconnect?: Enumerable<partner_infosWhereUniqueInput>
    delete?: Enumerable<partner_infosWhereUniqueInput>
    update?: Enumerable<partner_infosUpdateWithWhereUniqueWithoutTechnologiesInput>
    updateMany?: Enumerable<partner_infosUpdateManyWithWhereWithoutTechnologiesInput>
    deleteMany?: Enumerable<partner_infosScalarWhereInput>
    upsert?: Enumerable<partner_infosUpsertWithWhereUniqueWithoutTechnologiesInput>
    connectOrCreate?: Enumerable<partner_infosCreateOrConnectWithouttechnologiesInput>
  }

  export type startup_infosUpdateManyWithoutTechnologiesInput = {
    create?: Enumerable<startup_infosCreateWithoutTechnologiesInput>
    connect?: Enumerable<startup_infosWhereUniqueInput>
    set?: Enumerable<startup_infosWhereUniqueInput>
    disconnect?: Enumerable<startup_infosWhereUniqueInput>
    delete?: Enumerable<startup_infosWhereUniqueInput>
    update?: Enumerable<startup_infosUpdateWithWhereUniqueWithoutTechnologiesInput>
    updateMany?: Enumerable<startup_infosUpdateManyWithWhereWithoutTechnologiesInput>
    deleteMany?: Enumerable<startup_infosScalarWhereInput>
    upsert?: Enumerable<startup_infosUpsertWithWhereUniqueWithoutTechnologiesInput>
    connectOrCreate?: Enumerable<startup_infosCreateOrConnectWithouttechnologiesInput>
  }

  export type user_agreementsCreateManyWithoutTermsInput = {
    create?: Enumerable<user_agreementsCreateWithoutTermsInput>
    connect?: Enumerable<user_agreementsWhereUniqueInput>
    connectOrCreate?: Enumerable<user_agreementsCreateOrConnectWithouttermsInput>
  }

  export type user_agreementsUpdateManyWithoutTermsInput = {
    create?: Enumerable<user_agreementsCreateWithoutTermsInput>
    connect?: Enumerable<user_agreementsWhereUniqueInput>
    set?: Enumerable<user_agreementsWhereUniqueInput>
    disconnect?: Enumerable<user_agreementsWhereUniqueInput>
    delete?: Enumerable<user_agreementsWhereUniqueInput>
    update?: Enumerable<user_agreementsUpdateWithWhereUniqueWithoutTermsInput>
    updateMany?: Enumerable<user_agreementsUpdateManyWithWhereWithoutTermsInput>
    deleteMany?: Enumerable<user_agreementsScalarWhereInput>
    upsert?: Enumerable<user_agreementsUpsertWithWhereUniqueWithoutTermsInput>
    connectOrCreate?: Enumerable<user_agreementsCreateOrConnectWithouttermsInput>
  }

  export type termsCreateOneWithoutUser_agreementsInput = {
    create?: termsCreateWithoutUser_agreementsInput
    connect?: termsWhereUniqueInput
    connectOrCreate?: termsCreateOrConnectWithoutuser_agreementsInput
  }

  export type usersCreateOneWithoutUser_agreementsInput = {
    create?: usersCreateWithoutUser_agreementsInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutuser_agreementsInput
  }

  export type termsUpdateOneRequiredWithoutUser_agreementsInput = {
    create?: termsCreateWithoutUser_agreementsInput
    connect?: termsWhereUniqueInput
    update?: termsUpdateWithoutUser_agreementsInput
    upsert?: termsUpsertWithoutUser_agreementsInput
    connectOrCreate?: termsCreateOrConnectWithoutuser_agreementsInput
  }

  export type usersUpdateOneRequiredWithoutUser_agreementsInput = {
    create?: usersCreateWithoutUser_agreementsInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutUser_agreementsInput
    upsert?: usersUpsertWithoutUser_agreementsInput
    connectOrCreate?: usersCreateOrConnectWithoutuser_agreementsInput
  }

  export type companiesCreateManyWithoutUser_typesInput = {
    create?: Enumerable<companiesCreateWithoutUser_typesInput>
    connect?: Enumerable<companiesWhereUniqueInput>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutuser_typesInput>
  }

  export type usersCreateManyWithoutUser_typesInput = {
    create?: Enumerable<usersCreateWithoutUser_typesInput>
    connect?: Enumerable<usersWhereUniqueInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutuser_typesInput>
  }

  export type companiesUpdateManyWithoutUser_typesInput = {
    create?: Enumerable<companiesCreateWithoutUser_typesInput>
    connect?: Enumerable<companiesWhereUniqueInput>
    set?: Enumerable<companiesWhereUniqueInput>
    disconnect?: Enumerable<companiesWhereUniqueInput>
    delete?: Enumerable<companiesWhereUniqueInput>
    update?: Enumerable<companiesUpdateWithWhereUniqueWithoutUser_typesInput>
    updateMany?: Enumerable<companiesUpdateManyWithWhereWithoutUser_typesInput>
    deleteMany?: Enumerable<companiesScalarWhereInput>
    upsert?: Enumerable<companiesUpsertWithWhereUniqueWithoutUser_typesInput>
    connectOrCreate?: Enumerable<companiesCreateOrConnectWithoutuser_typesInput>
  }

  export type usersUpdateManyWithoutUser_typesInput = {
    create?: Enumerable<usersCreateWithoutUser_typesInput>
    connect?: Enumerable<usersWhereUniqueInput>
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutUser_typesInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutUser_typesInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutUser_typesInput>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutuser_typesInput>
  }

  export type companiesCreateOneWithoutUsersInput = {
    create?: companiesCreateWithoutUsersInput
    connect?: companiesWhereUniqueInput
    connectOrCreate?: companiesCreateOrConnectWithoutusersInput
  }

  export type signup_methodsCreateOneWithoutUsersInput = {
    create?: signup_methodsCreateWithoutUsersInput
    connect?: signup_methodsWhereUniqueInput
    connectOrCreate?: signup_methodsCreateOrConnectWithoutusersInput
  }

  export type user_typesCreateOneWithoutUsersInput = {
    create?: user_typesCreateWithoutUsersInput
    connect?: user_typesWhereUniqueInput
    connectOrCreate?: user_typesCreateOrConnectWithoutusersInput
  }

  export type questionsCreateManyWithoutUsersInput = {
    create?: Enumerable<questionsCreateWithoutUsersInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutusersInput>
  }

  export type startup_likesCreateManyWithoutUsersInput = {
    create?: Enumerable<startup_likesCreateWithoutUsersInput>
    connect?: Enumerable<startup_likesWhereUniqueInput>
    connectOrCreate?: Enumerable<startup_likesCreateOrConnectWithoutusersInput>
  }

  export type user_agreementsCreateManyWithoutUsersInput = {
    create?: Enumerable<user_agreementsCreateWithoutUsersInput>
    connect?: Enumerable<user_agreementsWhereUniqueInput>
    connectOrCreate?: Enumerable<user_agreementsCreateOrConnectWithoutusersInput>
  }

  export type votesCreateManyWithoutUsersInput = {
    create?: Enumerable<votesCreateWithoutUsersInput>
    connect?: Enumerable<votesWhereUniqueInput>
    connectOrCreate?: Enumerable<votesCreateOrConnectWithoutusersInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type companiesUpdateOneWithoutUsersInput = {
    create?: companiesCreateWithoutUsersInput
    connect?: companiesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: companiesUpdateWithoutUsersInput
    upsert?: companiesUpsertWithoutUsersInput
    connectOrCreate?: companiesCreateOrConnectWithoutusersInput
  }

  export type signup_methodsUpdateOneRequiredWithoutUsersInput = {
    create?: signup_methodsCreateWithoutUsersInput
    connect?: signup_methodsWhereUniqueInput
    update?: signup_methodsUpdateWithoutUsersInput
    upsert?: signup_methodsUpsertWithoutUsersInput
    connectOrCreate?: signup_methodsCreateOrConnectWithoutusersInput
  }

  export type user_typesUpdateOneWithoutUsersInput = {
    create?: user_typesCreateWithoutUsersInput
    connect?: user_typesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: user_typesUpdateWithoutUsersInput
    upsert?: user_typesUpsertWithoutUsersInput
    connectOrCreate?: user_typesCreateOrConnectWithoutusersInput
  }

  export type questionsUpdateManyWithoutUsersInput = {
    create?: Enumerable<questionsCreateWithoutUsersInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    set?: Enumerable<questionsWhereUniqueInput>
    disconnect?: Enumerable<questionsWhereUniqueInput>
    delete?: Enumerable<questionsWhereUniqueInput>
    update?: Enumerable<questionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<questionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<questionsScalarWhereInput>
    upsert?: Enumerable<questionsUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutusersInput>
  }

  export type startup_likesUpdateManyWithoutUsersInput = {
    create?: Enumerable<startup_likesCreateWithoutUsersInput>
    connect?: Enumerable<startup_likesWhereUniqueInput>
    set?: Enumerable<startup_likesWhereUniqueInput>
    disconnect?: Enumerable<startup_likesWhereUniqueInput>
    delete?: Enumerable<startup_likesWhereUniqueInput>
    update?: Enumerable<startup_likesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<startup_likesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<startup_likesScalarWhereInput>
    upsert?: Enumerable<startup_likesUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<startup_likesCreateOrConnectWithoutusersInput>
  }

  export type user_agreementsUpdateManyWithoutUsersInput = {
    create?: Enumerable<user_agreementsCreateWithoutUsersInput>
    connect?: Enumerable<user_agreementsWhereUniqueInput>
    set?: Enumerable<user_agreementsWhereUniqueInput>
    disconnect?: Enumerable<user_agreementsWhereUniqueInput>
    delete?: Enumerable<user_agreementsWhereUniqueInput>
    update?: Enumerable<user_agreementsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_agreementsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_agreementsScalarWhereInput>
    upsert?: Enumerable<user_agreementsUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<user_agreementsCreateOrConnectWithoutusersInput>
  }

  export type votesUpdateManyWithoutUsersInput = {
    create?: Enumerable<votesCreateWithoutUsersInput>
    connect?: Enumerable<votesWhereUniqueInput>
    set?: Enumerable<votesWhereUniqueInput>
    disconnect?: Enumerable<votesWhereUniqueInput>
    delete?: Enumerable<votesWhereUniqueInput>
    update?: Enumerable<votesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<votesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<votesScalarWhereInput>
    upsert?: Enumerable<votesUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<votesCreateOrConnectWithoutusersInput>
  }

  export type participantsCreateOneWithoutVotesInput = {
    create?: participantsCreateWithoutVotesInput
    connect?: participantsWhereUniqueInput
    connectOrCreate?: participantsCreateOrConnectWithoutvotesInput
  }

  export type usersCreateOneWithoutVotesInput = {
    create?: usersCreateWithoutVotesInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutvotesInput
  }

  export type participantsUpdateOneRequiredWithoutVotesInput = {
    create?: participantsCreateWithoutVotesInput
    connect?: participantsWhereUniqueInput
    update?: participantsUpdateWithoutVotesInput
    upsert?: participantsUpsertWithoutVotesInput
    connectOrCreate?: participantsCreateOrConnectWithoutvotesInput
  }

  export type usersUpdateOneRequiredWithoutVotesInput = {
    create?: usersCreateWithoutVotesInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutVotesInput
    upsert?: usersUpsertWithoutVotesInput
    connectOrCreate?: usersCreateOrConnectWithoutvotesInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type questionsCreateWithoutAnswersInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutQuestionsInput
    demodays: demodaysCreateOneWithoutQuestionsInput
    users: usersCreateOneWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutanswersInput = {
    where: questionsWhereUniqueInput
    create: questionsCreateWithoutAnswersInput
  }

  export type questionsUpdateWithoutAnswersInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutQuestionsInput
    demodays?: demodaysUpdateOneRequiredWithoutQuestionsInput
    users?: usersUpdateOneRequiredWithoutQuestionsInput
  }

  export type questionsUpsertWithoutAnswersInput = {
    update: questionsUpdateWithoutAnswersInput
    create: questionsCreateWithoutAnswersInput
  }

  export type companiesCreateWithoutApplicantsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutapplicantsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutApplicantsInput
  }

  export type projectsCreateWithoutApplicantsInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutapplicantsInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutApplicantsInput
  }

  export type companiesUpdateWithoutApplicantsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutApplicantsInput = {
    update: companiesUpdateWithoutApplicantsInput
    create: companiesCreateWithoutApplicantsInput
  }

  export type projectsUpdateWithoutApplicantsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type projectsUpsertWithoutApplicantsInput = {
    update: projectsUpdateWithoutApplicantsInput
    create: projectsCreateWithoutApplicantsInput
  }

  export type startup_infosCreateWithoutBusiness_typesInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutbusiness_typesInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutBusiness_typesInput
  }

  export type startup_infosUpdateWithWhereUniqueWithoutBusiness_typesInput = {
    where: startup_infosWhereUniqueInput
    data: startup_infosUpdateWithoutBusiness_typesInput
  }

  export type startup_infosUpdateManyWithWhereWithoutBusiness_typesInput = {
    where: startup_infosScalarWhereInput
    data: startup_infosUpdateManyMutationInput
  }

  export type startup_infosScalarWhereInput = {
    AND?: Enumerable<startup_infosScalarWhereInput>
    OR?: Enumerable<startup_infosScalarWhereInput>
    NOT?: Enumerable<startup_infosScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    rep?: StringNullableFilter | string | null
    sector_id?: IntNullableFilter | number | null
    core_technology_id?: IntNullableFilter | number | null
    item_description?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    address_road?: StringNullableFilter | string | null
    address_detail?: StringNullableFilter | string | null
    service_type_id?: IntNullableFilter | number | null
    business_type_id?: IntNullableFilter | number | null
    business_license_number?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    instagram_url?: StringNullableFilter | string | null
    facebook_url?: StringNullableFilter | string | null
    thumbnail?: StringNullableFilter | string | null
  }

  export type startup_infosUpsertWithWhereUniqueWithoutBusiness_typesInput = {
    where: startup_infosWhereUniqueInput
    update: startup_infosUpdateWithoutBusiness_typesInput
    create: startup_infosCreateWithoutBusiness_typesInput
  }

  export type user_typesCreateWithoutCompaniesInput = {
    name: string
    users?: usersCreateManyWithoutUser_typesInput
  }

  export type user_typesCreateOrConnectWithoutcompaniesInput = {
    where: user_typesWhereUniqueInput
    create: user_typesCreateWithoutCompaniesInput
  }

  export type applicantsCreateWithoutCompaniesInput = {
    created_at: Date | string
    projects: projectsCreateOneWithoutApplicantsInput
  }

  export type applicantsCreateOrConnectWithoutcompaniesInput = {
    where: applicantsWhereUniqueInput
    create: applicantsCreateWithoutCompaniesInput
  }

  export type company_documentsCreateWithoutCompaniesInput = {
    doc_url: string
    document_types: document_typesCreateOneWithoutCompany_documentsInput
    IR_requests?: IR_requestsCreateManyWithoutCompany_documentsInput
  }

  export type company_documentsCreateOrConnectWithoutcompaniesInput = {
    where: company_documentsWhereUniqueInput
    create: company_documentsCreateWithoutCompaniesInput
  }

  export type company_membersCreateWithoutCompaniesInput = {
    name?: string | null
    img?: string | null
    position?: string | null
  }

  export type company_membersCreateOrConnectWithoutcompaniesInput = {
    where: company_membersWhereUniqueInput
    create: company_membersCreateWithoutCompaniesInput
  }

  export type company_newsCreateWithoutCompaniesInput = {
    URL: string
  }

  export type company_newsCreateOrConnectWithoutcompaniesInput = {
    where: company_newsWhereUniqueInput
    create: company_newsCreateWithoutCompaniesInput
  }

  export type demodaysCreateWithoutCompaniesInput = {
    name?: string | null
    streaming_url?: string | null
    participants?: participantsCreateManyWithoutDemodaysInput
    questions?: questionsCreateManyWithoutDemodaysInput
  }

  export type demodaysCreateOrConnectWithoutcompaniesInput = {
    where: demodaysWhereUniqueInput
    create: demodaysCreateWithoutCompaniesInput
  }

  export type invested_toCreateWithoutCompaniesInput = {
    date: Date | string
    startup_name: string
    invested_fund: number
    corporate_value: number
    investment_series: investment_seriesCreateOneWithoutInvested_toInput
  }

  export type invested_toCreateOrConnectWithoutcompaniesInput = {
    where: invested_toWhereUniqueInput
    create: invested_toCreateWithoutCompaniesInput
  }

  export type IR_requestsCreateWithoutCompaniesInput = {
    is_checked: number
    from_partner: number
    created_at: Date | string
    updated_at: Date | string
    company_documents?: company_documentsCreateOneWithoutIR_requestsInput
    partner_infos: partner_infosCreateOneWithoutIR_requestsInput
  }

  export type IR_requestsCreateOrConnectWithoutcompaniesInput = {
    where: IR_requestsWhereUniqueInput
    create: IR_requestsCreateWithoutCompaniesInput
  }

  export type participantsCreateWithoutCompaniesInput = {
    order: number
    demodays: demodaysCreateOneWithoutParticipantsInput
    votes?: votesCreateManyWithoutParticipantsInput
  }

  export type participantsCreateOrConnectWithoutcompaniesInput = {
    where: participantsWhereUniqueInput
    create: participantsCreateWithoutCompaniesInput
  }

  export type partner_infosCreateWithoutCompaniesInput = {
    invested_counts?: number | null
    technologies?: technologiesCreateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsCreateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioCreateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsCreateManyWithoutPartner_infosInput
  }

  export type partner_infosCreateOrConnectWithoutcompaniesInput = {
    where: partner_infosWhereUniqueInput
    create: partner_infosCreateWithoutCompaniesInput
  }

  export type partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies_companiesTopartner_likes_company_likes_id: companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput = {
    where: partner_likesWhereUniqueInput
    create: partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput
  }

  export type partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies_companiesTopartner_likes_company_liked_id: companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput = {
    where: partner_likesWhereUniqueInput
    create: partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput
  }

  export type project_likesCreateWithoutCompaniesInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    projects: projectsCreateOneWithoutProject_likesInput
  }

  export type project_likesCreateOrConnectWithoutcompaniesInput = {
    where: project_likesWhereUniqueInput
    create: project_likesCreateWithoutCompaniesInput
  }

  export type projectsCreateWithoutCompaniesInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutcompaniesInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutCompaniesInput
  }

  export type questionsCreateWithoutCompaniesInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    demodays: demodaysCreateOneWithoutQuestionsInput
    users: usersCreateOneWithoutQuestionsInput
    answers?: answersCreateManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutcompaniesInput = {
    where: questionsWhereUniqueInput
    create: questionsCreateWithoutCompaniesInput
  }

  export type recent_views_projectCreateWithoutCompaniesInput = {
    created_at: Date | string
    updated_at: Date | string
    projects: projectsCreateOneWithoutRecent_views_projectInput
  }

  export type recent_views_projectCreateOrConnectWithoutcompaniesInput = {
    where: recent_views_projectWhereUniqueInput
    create: recent_views_projectCreateWithoutCompaniesInput
  }

  export type startup_infosCreateWithoutCompaniesInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutcompaniesInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutCompaniesInput
  }

  export type startup_likesCreateWithoutCompaniesInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    users: usersCreateOneWithoutStartup_likesInput
  }

  export type startup_likesCreateOrConnectWithoutcompaniesInput = {
    where: startup_likesWhereUniqueInput
    create: startup_likesCreateWithoutCompaniesInput
  }

  export type usersCreateWithoutCompaniesInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutcompaniesInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutCompaniesInput
  }

  export type user_typesUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutUser_typesInput
  }

  export type user_typesUpsertWithoutCompaniesInput = {
    update: user_typesUpdateWithoutCompaniesInput
    create: user_typesCreateWithoutCompaniesInput
  }

  export type applicantsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: applicantsWhereUniqueInput
    data: applicantsUpdateWithoutCompaniesInput
  }

  export type applicantsUpdateManyWithWhereWithoutCompaniesInput = {
    where: applicantsScalarWhereInput
    data: applicantsUpdateManyMutationInput
  }

  export type applicantsScalarWhereInput = {
    AND?: Enumerable<applicantsScalarWhereInput>
    OR?: Enumerable<applicantsScalarWhereInput>
    NOT?: Enumerable<applicantsScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    project_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type applicantsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: applicantsWhereUniqueInput
    update: applicantsUpdateWithoutCompaniesInput
    create: applicantsCreateWithoutCompaniesInput
  }

  export type company_documentsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: company_documentsWhereUniqueInput
    data: company_documentsUpdateWithoutCompaniesInput
  }

  export type company_documentsUpdateManyWithWhereWithoutCompaniesInput = {
    where: company_documentsScalarWhereInput
    data: company_documentsUpdateManyMutationInput
  }

  export type company_documentsScalarWhereInput = {
    AND?: Enumerable<company_documentsScalarWhereInput>
    OR?: Enumerable<company_documentsScalarWhereInput>
    NOT?: Enumerable<company_documentsScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    doc_url?: StringFilter | string
    type_id?: IntFilter | number
  }

  export type company_documentsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: company_documentsWhereUniqueInput
    update: company_documentsUpdateWithoutCompaniesInput
    create: company_documentsCreateWithoutCompaniesInput
  }

  export type company_membersUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: company_membersWhereUniqueInput
    data: company_membersUpdateWithoutCompaniesInput
  }

  export type company_membersUpdateManyWithWhereWithoutCompaniesInput = {
    where: company_membersScalarWhereInput
    data: company_membersUpdateManyMutationInput
  }

  export type company_membersScalarWhereInput = {
    AND?: Enumerable<company_membersScalarWhereInput>
    OR?: Enumerable<company_membersScalarWhereInput>
    NOT?: Enumerable<company_membersScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntNullableFilter | number | null
    name?: StringNullableFilter | string | null
    img?: StringNullableFilter | string | null
    position?: StringNullableFilter | string | null
  }

  export type company_membersUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: company_membersWhereUniqueInput
    update: company_membersUpdateWithoutCompaniesInput
    create: company_membersCreateWithoutCompaniesInput
  }

  export type company_newsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: company_newsWhereUniqueInput
    data: company_newsUpdateWithoutCompaniesInput
  }

  export type company_newsUpdateManyWithWhereWithoutCompaniesInput = {
    where: company_newsScalarWhereInput
    data: company_newsUpdateManyMutationInput
  }

  export type company_newsScalarWhereInput = {
    AND?: Enumerable<company_newsScalarWhereInput>
    OR?: Enumerable<company_newsScalarWhereInput>
    NOT?: Enumerable<company_newsScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    URL?: StringFilter | string
  }

  export type company_newsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: company_newsWhereUniqueInput
    update: company_newsUpdateWithoutCompaniesInput
    create: company_newsCreateWithoutCompaniesInput
  }

  export type demodaysUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: demodaysWhereUniqueInput
    data: demodaysUpdateWithoutCompaniesInput
  }

  export type demodaysUpdateManyWithWhereWithoutCompaniesInput = {
    where: demodaysScalarWhereInput
    data: demodaysUpdateManyMutationInput
  }

  export type demodaysScalarWhereInput = {
    AND?: Enumerable<demodaysScalarWhereInput>
    OR?: Enumerable<demodaysScalarWhereInput>
    NOT?: Enumerable<demodaysScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    company_id?: IntNullableFilter | number | null
    streaming_url?: StringNullableFilter | string | null
  }

  export type demodaysUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: demodaysWhereUniqueInput
    update: demodaysUpdateWithoutCompaniesInput
    create: demodaysCreateWithoutCompaniesInput
  }

  export type invested_toUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: invested_toWhereUniqueInput
    data: invested_toUpdateWithoutCompaniesInput
  }

  export type invested_toUpdateManyWithWhereWithoutCompaniesInput = {
    where: invested_toScalarWhereInput
    data: invested_toUpdateManyMutationInput
  }

  export type invested_toScalarWhereInput = {
    AND?: Enumerable<invested_toScalarWhereInput>
    OR?: Enumerable<invested_toScalarWhereInput>
    NOT?: Enumerable<invested_toScalarWhereInput>
    id?: IntFilter | number
    partner_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    startup_name?: StringFilter | string
    invested_fund?: IntFilter | number
    corporate_value?: IntFilter | number
    series_id?: IntFilter | number
  }

  export type invested_toUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: invested_toWhereUniqueInput
    update: invested_toUpdateWithoutCompaniesInput
    create: invested_toCreateWithoutCompaniesInput
  }

  export type IR_requestsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: IR_requestsWhereUniqueInput
    data: IR_requestsUpdateWithoutCompaniesInput
  }

  export type IR_requestsUpdateManyWithWhereWithoutCompaniesInput = {
    where: IR_requestsScalarWhereInput
    data: IR_requestsUpdateManyMutationInput
  }

  export type IR_requestsScalarWhereInput = {
    AND?: Enumerable<IR_requestsScalarWhereInput>
    OR?: Enumerable<IR_requestsScalarWhereInput>
    NOT?: Enumerable<IR_requestsScalarWhereInput>
    id?: IntFilter | number
    startup_id?: IntFilter | number
    partner_id?: IntFilter | number
    document_id?: IntNullableFilter | number | null
    is_checked?: IntFilter | number
    from_partner?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type IR_requestsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: IR_requestsWhereUniqueInput
    update: IR_requestsUpdateWithoutCompaniesInput
    create: IR_requestsCreateWithoutCompaniesInput
  }

  export type participantsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: participantsWhereUniqueInput
    data: participantsUpdateWithoutCompaniesInput
  }

  export type participantsUpdateManyWithWhereWithoutCompaniesInput = {
    where: participantsScalarWhereInput
    data: participantsUpdateManyMutationInput
  }

  export type participantsScalarWhereInput = {
    AND?: Enumerable<participantsScalarWhereInput>
    OR?: Enumerable<participantsScalarWhereInput>
    NOT?: Enumerable<participantsScalarWhereInput>
    id?: IntFilter | number
    demoday_id?: IntFilter | number
    order?: IntFilter | number
    company_id?: IntFilter | number
  }

  export type participantsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: participantsWhereUniqueInput
    update: participantsUpdateWithoutCompaniesInput
    create: participantsCreateWithoutCompaniesInput
  }

  export type partner_infosUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: partner_infosWhereUniqueInput
    data: partner_infosUpdateWithoutCompaniesInput
  }

  export type partner_infosUpdateManyWithWhereWithoutCompaniesInput = {
    where: partner_infosScalarWhereInput
    data: partner_infosUpdateManyMutationInput
  }

  export type partner_infosScalarWhereInput = {
    AND?: Enumerable<partner_infosScalarWhereInput>
    OR?: Enumerable<partner_infosScalarWhereInput>
    NOT?: Enumerable<partner_infosScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    interst_technology_id?: IntNullableFilter | number | null
    invested_total_id?: IntNullableFilter | number | null
    invested_counts?: IntNullableFilter | number | null
  }

  export type partner_infosUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: partner_infosWhereUniqueInput
    update: partner_infosUpdateWithoutCompaniesInput
    create: partner_infosCreateWithoutCompaniesInput
  }

  export type partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    where: partner_likesWhereUniqueInput
    data: partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput
  }

  export type partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    where: partner_likesScalarWhereInput
    data: partner_likesUpdateManyMutationInput
  }

  export type partner_likesScalarWhereInput = {
    AND?: Enumerable<partner_likesScalarWhereInput>
    OR?: Enumerable<partner_likesScalarWhereInput>
    NOT?: Enumerable<partner_likesScalarWhereInput>
    id?: IntFilter | number
    company_likes_id?: IntFilter | number
    company_liked_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    where: partner_likesWhereUniqueInput
    update: partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    create: partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput
  }

  export type partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    where: partner_likesWhereUniqueInput
    data: partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput
  }

  export type partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    where: partner_likesScalarWhereInput
    data: partner_likesUpdateManyMutationInput
  }

  export type partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    where: partner_likesWhereUniqueInput
    update: partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    create: partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput
  }

  export type project_likesUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: project_likesWhereUniqueInput
    data: project_likesUpdateWithoutCompaniesInput
  }

  export type project_likesUpdateManyWithWhereWithoutCompaniesInput = {
    where: project_likesScalarWhereInput
    data: project_likesUpdateManyMutationInput
  }

  export type project_likesScalarWhereInput = {
    AND?: Enumerable<project_likesScalarWhereInput>
    OR?: Enumerable<project_likesScalarWhereInput>
    NOT?: Enumerable<project_likesScalarWhereInput>
    id?: IntFilter | number
    comapny_id?: IntFilter | number
    project_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type project_likesUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: project_likesWhereUniqueInput
    update: project_likesUpdateWithoutCompaniesInput
    create: project_likesCreateWithoutCompaniesInput
  }

  export type projectsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: projectsWhereUniqueInput
    data: projectsUpdateWithoutCompaniesInput
  }

  export type projectsUpdateManyWithWhereWithoutCompaniesInput = {
    where: projectsScalarWhereInput
    data: projectsUpdateManyMutationInput
  }

  export type projectsScalarWhereInput = {
    AND?: Enumerable<projectsScalarWhereInput>
    OR?: Enumerable<projectsScalarWhereInput>
    NOT?: Enumerable<projectsScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    introduction?: StringNullableFilter | string | null
    host?: IntNullableFilter | number | null
    due_date?: DateTimeNullableFilter | Date | string | null
    sector_id?: IntNullableFilter | number | null
    eligibility?: StringNullableFilter | string | null
    outline?: StringNullableFilter | string | null
    detail?: StringNullableFilter | string | null
    application_method?: StringNullableFilter | string | null
    caution?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    is_opened?: IntFilter | number
    hit?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type projectsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: projectsWhereUniqueInput
    update: projectsUpdateWithoutCompaniesInput
    create: projectsCreateWithoutCompaniesInput
  }

  export type questionsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: questionsWhereUniqueInput
    data: questionsUpdateWithoutCompaniesInput
  }

  export type questionsUpdateManyWithWhereWithoutCompaniesInput = {
    where: questionsScalarWhereInput
    data: questionsUpdateManyMutationInput
  }

  export type questionsScalarWhereInput = {
    AND?: Enumerable<questionsScalarWhereInput>
    OR?: Enumerable<questionsScalarWhereInput>
    NOT?: Enumerable<questionsScalarWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    company_id?: IntFilter | number
    user_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    demoday_id?: IntFilter | number
  }

  export type questionsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: questionsWhereUniqueInput
    update: questionsUpdateWithoutCompaniesInput
    create: questionsCreateWithoutCompaniesInput
  }

  export type recent_views_projectUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: recent_views_projectWhereUniqueInput
    data: recent_views_projectUpdateWithoutCompaniesInput
  }

  export type recent_views_projectUpdateManyWithWhereWithoutCompaniesInput = {
    where: recent_views_projectScalarWhereInput
    data: recent_views_projectUpdateManyMutationInput
  }

  export type recent_views_projectScalarWhereInput = {
    AND?: Enumerable<recent_views_projectScalarWhereInput>
    OR?: Enumerable<recent_views_projectScalarWhereInput>
    NOT?: Enumerable<recent_views_projectScalarWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    company_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type recent_views_projectUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: recent_views_projectWhereUniqueInput
    update: recent_views_projectUpdateWithoutCompaniesInput
    create: recent_views_projectCreateWithoutCompaniesInput
  }

  export type startup_infosUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: startup_infosWhereUniqueInput
    data: startup_infosUpdateWithoutCompaniesInput
  }

  export type startup_infosUpdateManyWithWhereWithoutCompaniesInput = {
    where: startup_infosScalarWhereInput
    data: startup_infosUpdateManyMutationInput
  }

  export type startup_infosUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: startup_infosWhereUniqueInput
    update: startup_infosUpdateWithoutCompaniesInput
    create: startup_infosCreateWithoutCompaniesInput
  }

  export type startup_likesUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: startup_likesWhereUniqueInput
    data: startup_likesUpdateWithoutCompaniesInput
  }

  export type startup_likesUpdateManyWithWhereWithoutCompaniesInput = {
    where: startup_likesScalarWhereInput
    data: startup_likesUpdateManyMutationInput
  }

  export type startup_likesScalarWhereInput = {
    AND?: Enumerable<startup_likesScalarWhereInput>
    OR?: Enumerable<startup_likesScalarWhereInput>
    NOT?: Enumerable<startup_likesScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    company_id?: IntFilter | number
    is_liked?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type startup_likesUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: startup_likesWhereUniqueInput
    update: startup_likesUpdateWithoutCompaniesInput
    create: startup_likesCreateWithoutCompaniesInput
  }

  export type usersUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    data: usersUpdateWithoutCompaniesInput
  }

  export type usersUpdateManyWithWhereWithoutCompaniesInput = {
    where: usersScalarWhereInput
    data: usersUpdateManyMutationInput
  }

  export type usersScalarWhereInput = {
    AND?: Enumerable<usersScalarWhereInput>
    OR?: Enumerable<usersScalarWhereInput>
    NOT?: Enumerable<usersScalarWhereInput>
    id?: IntFilter | number
    sns_id?: StringNullableFilter | string | null
    name?: StringFilter | string
    type_id?: IntNullableFilter | number | null
    profile_picture?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    signup_method_id?: IntFilter | number
    company_id?: IntNullableFilter | number | null
    phone_number?: StringNullableFilter | string | null
    is_verified?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type usersUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    update: usersUpdateWithoutCompaniesInput
    create: usersCreateWithoutCompaniesInput
  }

  export type companiesCreateWithoutCompany_documentsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutcompany_documentsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutCompany_documentsInput
  }

  export type document_typesCreateWithoutCompany_documentsInput = {
    name: string
    required_documents?: required_documentsCreateManyWithoutDocument_typesInput
  }

  export type document_typesCreateOrConnectWithoutcompany_documentsInput = {
    where: document_typesWhereUniqueInput
    create: document_typesCreateWithoutCompany_documentsInput
  }

  export type IR_requestsCreateWithoutCompany_documentsInput = {
    is_checked: number
    from_partner: number
    created_at: Date | string
    updated_at: Date | string
    partner_infos: partner_infosCreateOneWithoutIR_requestsInput
    companies: companiesCreateOneWithoutIR_requestsInput
  }

  export type IR_requestsCreateOrConnectWithoutcompany_documentsInput = {
    where: IR_requestsWhereUniqueInput
    create: IR_requestsCreateWithoutCompany_documentsInput
  }

  export type companiesUpdateWithoutCompany_documentsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutCompany_documentsInput = {
    update: companiesUpdateWithoutCompany_documentsInput
    create: companiesCreateWithoutCompany_documentsInput
  }

  export type document_typesUpdateWithoutCompany_documentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    required_documents?: required_documentsUpdateManyWithoutDocument_typesInput
  }

  export type document_typesUpsertWithoutCompany_documentsInput = {
    update: document_typesUpdateWithoutCompany_documentsInput
    create: document_typesCreateWithoutCompany_documentsInput
  }

  export type IR_requestsUpdateWithWhereUniqueWithoutCompany_documentsInput = {
    where: IR_requestsWhereUniqueInput
    data: IR_requestsUpdateWithoutCompany_documentsInput
  }

  export type IR_requestsUpdateManyWithWhereWithoutCompany_documentsInput = {
    where: IR_requestsScalarWhereInput
    data: IR_requestsUpdateManyMutationInput
  }

  export type IR_requestsUpsertWithWhereUniqueWithoutCompany_documentsInput = {
    where: IR_requestsWhereUniqueInput
    update: IR_requestsUpdateWithoutCompany_documentsInput
    create: IR_requestsCreateWithoutCompany_documentsInput
  }

  export type companiesCreateWithoutCompany_membersInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutcompany_membersInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutCompany_membersInput
  }

  export type companiesUpdateWithoutCompany_membersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutCompany_membersInput = {
    update: companiesUpdateWithoutCompany_membersInput
    create: companiesCreateWithoutCompany_membersInput
  }

  export type companiesCreateWithoutCompany_newsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutcompany_newsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutCompany_newsInput
  }

  export type companiesUpdateWithoutCompany_newsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutCompany_newsInput = {
    update: companiesUpdateWithoutCompany_newsInput
    create: companiesCreateWithoutCompany_newsInput
  }

  export type companiesCreateWithoutDemodaysInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutdemodaysInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutDemodaysInput
  }

  export type participantsCreateWithoutDemodaysInput = {
    order: number
    companies: companiesCreateOneWithoutParticipantsInput
    votes?: votesCreateManyWithoutParticipantsInput
  }

  export type participantsCreateOrConnectWithoutdemodaysInput = {
    where: participantsWhereUniqueInput
    create: participantsCreateWithoutDemodaysInput
  }

  export type questionsCreateWithoutDemodaysInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutQuestionsInput
    users: usersCreateOneWithoutQuestionsInput
    answers?: answersCreateManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutdemodaysInput = {
    where: questionsWhereUniqueInput
    create: questionsCreateWithoutDemodaysInput
  }

  export type companiesUpdateWithoutDemodaysInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutDemodaysInput = {
    update: companiesUpdateWithoutDemodaysInput
    create: companiesCreateWithoutDemodaysInput
  }

  export type participantsUpdateWithWhereUniqueWithoutDemodaysInput = {
    where: participantsWhereUniqueInput
    data: participantsUpdateWithoutDemodaysInput
  }

  export type participantsUpdateManyWithWhereWithoutDemodaysInput = {
    where: participantsScalarWhereInput
    data: participantsUpdateManyMutationInput
  }

  export type participantsUpsertWithWhereUniqueWithoutDemodaysInput = {
    where: participantsWhereUniqueInput
    update: participantsUpdateWithoutDemodaysInput
    create: participantsCreateWithoutDemodaysInput
  }

  export type questionsUpdateWithWhereUniqueWithoutDemodaysInput = {
    where: questionsWhereUniqueInput
    data: questionsUpdateWithoutDemodaysInput
  }

  export type questionsUpdateManyWithWhereWithoutDemodaysInput = {
    where: questionsScalarWhereInput
    data: questionsUpdateManyMutationInput
  }

  export type questionsUpsertWithWhereUniqueWithoutDemodaysInput = {
    where: questionsWhereUniqueInput
    update: questionsUpdateWithoutDemodaysInput
    create: questionsCreateWithoutDemodaysInput
  }

  export type company_documentsCreateWithoutDocument_typesInput = {
    doc_url: string
    companies: companiesCreateOneWithoutCompany_documentsInput
    IR_requests?: IR_requestsCreateManyWithoutCompany_documentsInput
  }

  export type company_documentsCreateOrConnectWithoutdocument_typesInput = {
    where: company_documentsWhereUniqueInput
    create: company_documentsCreateWithoutDocument_typesInput
  }

  export type required_documentsCreateWithoutDocument_typesInput = {
    projects: projectsCreateOneWithoutRequired_documentsInput
  }

  export type required_documentsCreateOrConnectWithoutdocument_typesInput = {
    where: required_documentsWhereUniqueInput
    create: required_documentsCreateWithoutDocument_typesInput
  }

  export type company_documentsUpdateWithWhereUniqueWithoutDocument_typesInput = {
    where: company_documentsWhereUniqueInput
    data: company_documentsUpdateWithoutDocument_typesInput
  }

  export type company_documentsUpdateManyWithWhereWithoutDocument_typesInput = {
    where: company_documentsScalarWhereInput
    data: company_documentsUpdateManyMutationInput
  }

  export type company_documentsUpsertWithWhereUniqueWithoutDocument_typesInput = {
    where: company_documentsWhereUniqueInput
    update: company_documentsUpdateWithoutDocument_typesInput
    create: company_documentsCreateWithoutDocument_typesInput
  }

  export type required_documentsUpdateWithWhereUniqueWithoutDocument_typesInput = {
    where: required_documentsWhereUniqueInput
    data: required_documentsUpdateWithoutDocument_typesInput
  }

  export type required_documentsUpdateManyWithWhereWithoutDocument_typesInput = {
    where: required_documentsScalarWhereInput
    data: required_documentsUpdateManyMutationInput
  }

  export type required_documentsScalarWhereInput = {
    AND?: Enumerable<required_documentsScalarWhereInput>
    OR?: Enumerable<required_documentsScalarWhereInput>
    NOT?: Enumerable<required_documentsScalarWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    document_id?: IntFilter | number
  }

  export type required_documentsUpsertWithWhereUniqueWithoutDocument_typesInput = {
    where: required_documentsWhereUniqueInput
    update: required_documentsUpdateWithoutDocument_typesInput
    create: required_documentsCreateWithoutDocument_typesInput
  }

  export type investment_seriesCreateWithoutInvested_fromInput = {
    name: string
    invested_to?: invested_toCreateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesCreateOrConnectWithoutinvested_fromInput = {
    where: investment_seriesWhereUniqueInput
    create: investment_seriesCreateWithoutInvested_fromInput
  }

  export type startup_infosCreateWithoutInvested_fromInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutinvested_fromInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutInvested_fromInput
  }

  export type investment_seriesUpdateWithoutInvested_fromInput = {
    name?: StringFieldUpdateOperationsInput | string
    invested_to?: invested_toUpdateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesUpsertWithoutInvested_fromInput = {
    update: investment_seriesUpdateWithoutInvested_fromInput
    create: investment_seriesCreateWithoutInvested_fromInput
  }

  export type startup_infosUpdateWithoutInvested_fromInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type startup_infosUpsertWithoutInvested_fromInput = {
    update: startup_infosUpdateWithoutInvested_fromInput
    create: startup_infosCreateWithoutInvested_fromInput
  }

  export type companiesCreateWithoutInvested_toInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutinvested_toInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutInvested_toInput
  }

  export type investment_seriesCreateWithoutInvested_toInput = {
    name: string
    invested_from?: invested_fromCreateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesCreateOrConnectWithoutinvested_toInput = {
    where: investment_seriesWhereUniqueInput
    create: investment_seriesCreateWithoutInvested_toInput
  }

  export type companiesUpdateWithoutInvested_toInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutInvested_toInput = {
    update: companiesUpdateWithoutInvested_toInput
    create: companiesCreateWithoutInvested_toInput
  }

  export type investment_seriesUpdateWithoutInvested_toInput = {
    name?: StringFieldUpdateOperationsInput | string
    invested_from?: invested_fromUpdateManyWithoutInvestment_seriesInput
  }

  export type investment_seriesUpsertWithoutInvested_toInput = {
    update: investment_seriesUpdateWithoutInvested_toInput
    create: investment_seriesCreateWithoutInvested_toInput
  }

  export type partner_infosCreateWithoutInvestment_fundsInput = {
    invested_counts?: number | null
    companies: companiesCreateOneWithoutPartner_infosInput
    technologies?: technologiesCreateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioCreateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsCreateManyWithoutPartner_infosInput
  }

  export type partner_infosCreateOrConnectWithoutinvestment_fundsInput = {
    where: partner_infosWhereUniqueInput
    create: partner_infosCreateWithoutInvestment_fundsInput
  }

  export type partner_infosUpdateWithWhereUniqueWithoutInvestment_fundsInput = {
    where: partner_infosWhereUniqueInput
    data: partner_infosUpdateWithoutInvestment_fundsInput
  }

  export type partner_infosUpdateManyWithWhereWithoutInvestment_fundsInput = {
    where: partner_infosScalarWhereInput
    data: partner_infosUpdateManyMutationInput
  }

  export type partner_infosUpsertWithWhereUniqueWithoutInvestment_fundsInput = {
    where: partner_infosWhereUniqueInput
    update: partner_infosUpdateWithoutInvestment_fundsInput
    create: partner_infosCreateWithoutInvestment_fundsInput
  }

  export type partner_infosCreateWithoutInvestment_portfolioInput = {
    invested_counts?: number | null
    companies: companiesCreateOneWithoutPartner_infosInput
    technologies?: technologiesCreateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsCreateOneWithoutPartner_infosInput
    IR_requests?: IR_requestsCreateManyWithoutPartner_infosInput
  }

  export type partner_infosCreateOrConnectWithoutinvestment_portfolioInput = {
    where: partner_infosWhereUniqueInput
    create: partner_infosCreateWithoutInvestment_portfolioInput
  }

  export type partner_infosUpdateWithoutInvestment_portfolioInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    companies?: companiesUpdateOneRequiredWithoutPartner_infosInput
    technologies?: technologiesUpdateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsUpdateOneWithoutPartner_infosInput
    IR_requests?: IR_requestsUpdateManyWithoutPartner_infosInput
  }

  export type partner_infosUpsertWithoutInvestment_portfolioInput = {
    update: partner_infosUpdateWithoutInvestment_portfolioInput
    create: partner_infosCreateWithoutInvestment_portfolioInput
  }

  export type invested_fromCreateWithoutInvestment_seriesInput = {
    date: Date | string
    invested_institution: string
    invested_fund: number
    corporate_value: number
    startup_infos: startup_infosCreateOneWithoutInvested_fromInput
  }

  export type invested_fromCreateOrConnectWithoutinvestment_seriesInput = {
    where: invested_fromWhereUniqueInput
    create: invested_fromCreateWithoutInvestment_seriesInput
  }

  export type invested_toCreateWithoutInvestment_seriesInput = {
    date: Date | string
    startup_name: string
    invested_fund: number
    corporate_value: number
    companies: companiesCreateOneWithoutInvested_toInput
  }

  export type invested_toCreateOrConnectWithoutinvestment_seriesInput = {
    where: invested_toWhereUniqueInput
    create: invested_toCreateWithoutInvestment_seriesInput
  }

  export type invested_fromUpdateWithWhereUniqueWithoutInvestment_seriesInput = {
    where: invested_fromWhereUniqueInput
    data: invested_fromUpdateWithoutInvestment_seriesInput
  }

  export type invested_fromUpdateManyWithWhereWithoutInvestment_seriesInput = {
    where: invested_fromScalarWhereInput
    data: invested_fromUpdateManyMutationInput
  }

  export type invested_fromScalarWhereInput = {
    AND?: Enumerable<invested_fromScalarWhereInput>
    OR?: Enumerable<invested_fromScalarWhereInput>
    NOT?: Enumerable<invested_fromScalarWhereInput>
    id?: IntFilter | number
    startup_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    invested_institution?: StringFilter | string
    invested_fund?: IntFilter | number
    corporate_value?: IntFilter | number
    series_id?: IntFilter | number
  }

  export type invested_fromUpsertWithWhereUniqueWithoutInvestment_seriesInput = {
    where: invested_fromWhereUniqueInput
    update: invested_fromUpdateWithoutInvestment_seriesInput
    create: invested_fromCreateWithoutInvestment_seriesInput
  }

  export type invested_toUpdateWithWhereUniqueWithoutInvestment_seriesInput = {
    where: invested_toWhereUniqueInput
    data: invested_toUpdateWithoutInvestment_seriesInput
  }

  export type invested_toUpdateManyWithWhereWithoutInvestment_seriesInput = {
    where: invested_toScalarWhereInput
    data: invested_toUpdateManyMutationInput
  }

  export type invested_toUpsertWithWhereUniqueWithoutInvestment_seriesInput = {
    where: invested_toWhereUniqueInput
    update: invested_toUpdateWithoutInvestment_seriesInput
    create: invested_toCreateWithoutInvestment_seriesInput
  }

  export type company_documentsCreateWithoutIR_requestsInput = {
    doc_url: string
    companies: companiesCreateOneWithoutCompany_documentsInput
    document_types: document_typesCreateOneWithoutCompany_documentsInput
  }

  export type company_documentsCreateOrConnectWithoutIR_requestsInput = {
    where: company_documentsWhereUniqueInput
    create: company_documentsCreateWithoutIR_requestsInput
  }

  export type partner_infosCreateWithoutIR_requestsInput = {
    invested_counts?: number | null
    companies: companiesCreateOneWithoutPartner_infosInput
    technologies?: technologiesCreateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsCreateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioCreateManyWithoutPartner_infosInput
  }

  export type partner_infosCreateOrConnectWithoutIR_requestsInput = {
    where: partner_infosWhereUniqueInput
    create: partner_infosCreateWithoutIR_requestsInput
  }

  export type companiesCreateWithoutIR_requestsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutIR_requestsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutIR_requestsInput
  }

  export type company_documentsUpdateWithoutIR_requestsInput = {
    doc_url?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateOneRequiredWithoutCompany_documentsInput
    document_types?: document_typesUpdateOneRequiredWithoutCompany_documentsInput
  }

  export type company_documentsUpsertWithoutIR_requestsInput = {
    update: company_documentsUpdateWithoutIR_requestsInput
    create: company_documentsCreateWithoutIR_requestsInput
  }

  export type partner_infosUpdateWithoutIR_requestsInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    companies?: companiesUpdateOneRequiredWithoutPartner_infosInput
    technologies?: technologiesUpdateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsUpdateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioUpdateManyWithoutPartner_infosInput
  }

  export type partner_infosUpsertWithoutIR_requestsInput = {
    update: partner_infosUpdateWithoutIR_requestsInput
    create: partner_infosCreateWithoutIR_requestsInput
  }

  export type companiesUpdateWithoutIR_requestsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutIR_requestsInput = {
    update: companiesUpdateWithoutIR_requestsInput
    create: companiesCreateWithoutIR_requestsInput
  }

  export type companiesCreateWithoutParticipantsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutparticipantsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutParticipantsInput
  }

  export type demodaysCreateWithoutParticipantsInput = {
    name?: string | null
    streaming_url?: string | null
    companies?: companiesCreateOneWithoutDemodaysInput
    questions?: questionsCreateManyWithoutDemodaysInput
  }

  export type demodaysCreateOrConnectWithoutparticipantsInput = {
    where: demodaysWhereUniqueInput
    create: demodaysCreateWithoutParticipantsInput
  }

  export type votesCreateWithoutParticipantsInput = {
    created_at: Date | string
    users: usersCreateOneWithoutVotesInput
  }

  export type votesCreateOrConnectWithoutparticipantsInput = {
    where: votesWhereUniqueInput
    create: votesCreateWithoutParticipantsInput
  }

  export type companiesUpdateWithoutParticipantsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutParticipantsInput = {
    update: companiesUpdateWithoutParticipantsInput
    create: companiesCreateWithoutParticipantsInput
  }

  export type demodaysUpdateWithoutParticipantsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    streaming_url?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: companiesUpdateOneWithoutDemodaysInput
    questions?: questionsUpdateManyWithoutDemodaysInput
  }

  export type demodaysUpsertWithoutParticipantsInput = {
    update: demodaysUpdateWithoutParticipantsInput
    create: demodaysCreateWithoutParticipantsInput
  }

  export type votesUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: votesWhereUniqueInput
    data: votesUpdateWithoutParticipantsInput
  }

  export type votesUpdateManyWithWhereWithoutParticipantsInput = {
    where: votesScalarWhereInput
    data: votesUpdateManyMutationInput
  }

  export type votesScalarWhereInput = {
    AND?: Enumerable<votesScalarWhereInput>
    OR?: Enumerable<votesScalarWhereInput>
    NOT?: Enumerable<votesScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    participants_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type votesUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: votesWhereUniqueInput
    update: votesUpdateWithoutParticipantsInput
    create: votesCreateWithoutParticipantsInput
  }

  export type companiesCreateWithoutPartner_infosInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutpartner_infosInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutPartner_infosInput
  }

  export type technologiesCreateWithoutPartner_infosInput = {
    name: string
    startup_infos?: startup_infosCreateManyWithoutTechnologiesInput
  }

  export type technologiesCreateOrConnectWithoutpartner_infosInput = {
    where: technologiesWhereUniqueInput
    create: technologiesCreateWithoutPartner_infosInput
  }

  export type investment_fundsCreateWithoutPartner_infosInput = {
    range: string
  }

  export type investment_fundsCreateOrConnectWithoutpartner_infosInput = {
    where: investment_fundsWhereUniqueInput
    create: investment_fundsCreateWithoutPartner_infosInput
  }

  export type investment_portfolioCreateWithoutPartner_infosInput = {
    img_url: string
  }

  export type investment_portfolioCreateOrConnectWithoutpartner_infosInput = {
    where: investment_portfolioWhereUniqueInput
    create: investment_portfolioCreateWithoutPartner_infosInput
  }

  export type IR_requestsCreateWithoutPartner_infosInput = {
    is_checked: number
    from_partner: number
    created_at: Date | string
    updated_at: Date | string
    company_documents?: company_documentsCreateOneWithoutIR_requestsInput
    companies: companiesCreateOneWithoutIR_requestsInput
  }

  export type IR_requestsCreateOrConnectWithoutpartner_infosInput = {
    where: IR_requestsWhereUniqueInput
    create: IR_requestsCreateWithoutPartner_infosInput
  }

  export type companiesUpdateWithoutPartner_infosInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutPartner_infosInput = {
    update: companiesUpdateWithoutPartner_infosInput
    create: companiesCreateWithoutPartner_infosInput
  }

  export type technologiesUpdateWithoutPartner_infosInput = {
    name?: StringFieldUpdateOperationsInput | string
    startup_infos?: startup_infosUpdateManyWithoutTechnologiesInput
  }

  export type technologiesUpsertWithoutPartner_infosInput = {
    update: technologiesUpdateWithoutPartner_infosInput
    create: technologiesCreateWithoutPartner_infosInput
  }

  export type investment_fundsUpdateWithoutPartner_infosInput = {
    range?: StringFieldUpdateOperationsInput | string
  }

  export type investment_fundsUpsertWithoutPartner_infosInput = {
    update: investment_fundsUpdateWithoutPartner_infosInput
    create: investment_fundsCreateWithoutPartner_infosInput
  }

  export type investment_portfolioUpdateWithWhereUniqueWithoutPartner_infosInput = {
    where: investment_portfolioWhereUniqueInput
    data: investment_portfolioUpdateWithoutPartner_infosInput
  }

  export type investment_portfolioUpdateManyWithWhereWithoutPartner_infosInput = {
    where: investment_portfolioScalarWhereInput
    data: investment_portfolioUpdateManyMutationInput
  }

  export type investment_portfolioScalarWhereInput = {
    AND?: Enumerable<investment_portfolioScalarWhereInput>
    OR?: Enumerable<investment_portfolioScalarWhereInput>
    NOT?: Enumerable<investment_portfolioScalarWhereInput>
    id?: IntFilter | number
    partner_id?: IntFilter | number
    img_url?: StringFilter | string
  }

  export type investment_portfolioUpsertWithWhereUniqueWithoutPartner_infosInput = {
    where: investment_portfolioWhereUniqueInput
    update: investment_portfolioUpdateWithoutPartner_infosInput
    create: investment_portfolioCreateWithoutPartner_infosInput
  }

  export type IR_requestsUpdateWithWhereUniqueWithoutPartner_infosInput = {
    where: IR_requestsWhereUniqueInput
    data: IR_requestsUpdateWithoutPartner_infosInput
  }

  export type IR_requestsUpdateManyWithWhereWithoutPartner_infosInput = {
    where: IR_requestsScalarWhereInput
    data: IR_requestsUpdateManyMutationInput
  }

  export type IR_requestsUpsertWithWhereUniqueWithoutPartner_infosInput = {
    where: IR_requestsWhereUniqueInput
    update: IR_requestsUpdateWithoutPartner_infosInput
    create: IR_requestsCreateWithoutPartner_infosInput
  }

  export type companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = {
    update: companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
    create: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = {
    update: companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
    create: companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type projectsCreateWithoutProject_imagesInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutproject_imagesInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutProject_imagesInput
  }

  export type projectsUpdateWithoutProject_imagesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type projectsUpsertWithoutProject_imagesInput = {
    update: projectsUpdateWithoutProject_imagesInput
    create: projectsCreateWithoutProject_imagesInput
  }

  export type companiesCreateWithoutProject_likesInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutproject_likesInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutProject_likesInput
  }

  export type projectsCreateWithoutProject_likesInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutproject_likesInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutProject_likesInput
  }

  export type companiesUpdateWithoutProject_likesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutProject_likesInput = {
    update: companiesUpdateWithoutProject_likesInput
    create: companiesCreateWithoutProject_likesInput
  }

  export type projectsUpdateWithoutProject_likesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type projectsUpsertWithoutProject_likesInput = {
    update: projectsUpdateWithoutProject_likesInput
    create: projectsCreateWithoutProject_likesInput
  }

  export type companiesCreateWithoutProjectsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutprojectsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutProjectsInput
  }

  export type sectorsCreateWithoutProjectsInput = {
    name: string
    startup_infos?: startup_infosCreateManyWithoutSectorsInput
  }

  export type sectorsCreateOrConnectWithoutprojectsInput = {
    where: sectorsWhereUniqueInput
    create: sectorsCreateWithoutProjectsInput
  }

  export type applicantsCreateWithoutProjectsInput = {
    created_at: Date | string
    companies: companiesCreateOneWithoutApplicantsInput
  }

  export type applicantsCreateOrConnectWithoutprojectsInput = {
    where: applicantsWhereUniqueInput
    create: applicantsCreateWithoutProjectsInput
  }

  export type project_imagesCreateWithoutProjectsInput = {
    img_url: string
  }

  export type project_imagesCreateOrConnectWithoutprojectsInput = {
    where: project_imagesWhereUniqueInput
    create: project_imagesCreateWithoutProjectsInput
  }

  export type project_likesCreateWithoutProjectsInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutProject_likesInput
  }

  export type project_likesCreateOrConnectWithoutprojectsInput = {
    where: project_likesWhereUniqueInput
    create: project_likesCreateWithoutProjectsInput
  }

  export type recent_views_projectCreateWithoutProjectsInput = {
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutRecent_views_projectInput
  }

  export type recent_views_projectCreateOrConnectWithoutprojectsInput = {
    where: recent_views_projectWhereUniqueInput
    create: recent_views_projectCreateWithoutProjectsInput
  }

  export type required_documentsCreateWithoutProjectsInput = {
    document_types: document_typesCreateOneWithoutRequired_documentsInput
  }

  export type required_documentsCreateOrConnectWithoutprojectsInput = {
    where: required_documentsWhereUniqueInput
    create: required_documentsCreateWithoutProjectsInput
  }

  export type companiesUpdateWithoutProjectsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutProjectsInput = {
    update: companiesUpdateWithoutProjectsInput
    create: companiesCreateWithoutProjectsInput
  }

  export type sectorsUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    startup_infos?: startup_infosUpdateManyWithoutSectorsInput
  }

  export type sectorsUpsertWithoutProjectsInput = {
    update: sectorsUpdateWithoutProjectsInput
    create: sectorsCreateWithoutProjectsInput
  }

  export type applicantsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: applicantsWhereUniqueInput
    data: applicantsUpdateWithoutProjectsInput
  }

  export type applicantsUpdateManyWithWhereWithoutProjectsInput = {
    where: applicantsScalarWhereInput
    data: applicantsUpdateManyMutationInput
  }

  export type applicantsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: applicantsWhereUniqueInput
    update: applicantsUpdateWithoutProjectsInput
    create: applicantsCreateWithoutProjectsInput
  }

  export type project_imagesUpdateWithWhereUniqueWithoutProjectsInput = {
    where: project_imagesWhereUniqueInput
    data: project_imagesUpdateWithoutProjectsInput
  }

  export type project_imagesUpdateManyWithWhereWithoutProjectsInput = {
    where: project_imagesScalarWhereInput
    data: project_imagesUpdateManyMutationInput
  }

  export type project_imagesScalarWhereInput = {
    AND?: Enumerable<project_imagesScalarWhereInput>
    OR?: Enumerable<project_imagesScalarWhereInput>
    NOT?: Enumerable<project_imagesScalarWhereInput>
    id?: IntFilter | number
    project_id?: IntFilter | number
    img_url?: StringFilter | string
  }

  export type project_imagesUpsertWithWhereUniqueWithoutProjectsInput = {
    where: project_imagesWhereUniqueInput
    update: project_imagesUpdateWithoutProjectsInput
    create: project_imagesCreateWithoutProjectsInput
  }

  export type project_likesUpdateWithWhereUniqueWithoutProjectsInput = {
    where: project_likesWhereUniqueInput
    data: project_likesUpdateWithoutProjectsInput
  }

  export type project_likesUpdateManyWithWhereWithoutProjectsInput = {
    where: project_likesScalarWhereInput
    data: project_likesUpdateManyMutationInput
  }

  export type project_likesUpsertWithWhereUniqueWithoutProjectsInput = {
    where: project_likesWhereUniqueInput
    update: project_likesUpdateWithoutProjectsInput
    create: project_likesCreateWithoutProjectsInput
  }

  export type recent_views_projectUpdateWithWhereUniqueWithoutProjectsInput = {
    where: recent_views_projectWhereUniqueInput
    data: recent_views_projectUpdateWithoutProjectsInput
  }

  export type recent_views_projectUpdateManyWithWhereWithoutProjectsInput = {
    where: recent_views_projectScalarWhereInput
    data: recent_views_projectUpdateManyMutationInput
  }

  export type recent_views_projectUpsertWithWhereUniqueWithoutProjectsInput = {
    where: recent_views_projectWhereUniqueInput
    update: recent_views_projectUpdateWithoutProjectsInput
    create: recent_views_projectCreateWithoutProjectsInput
  }

  export type required_documentsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: required_documentsWhereUniqueInput
    data: required_documentsUpdateWithoutProjectsInput
  }

  export type required_documentsUpdateManyWithWhereWithoutProjectsInput = {
    where: required_documentsScalarWhereInput
    data: required_documentsUpdateManyMutationInput
  }

  export type required_documentsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: required_documentsWhereUniqueInput
    update: required_documentsUpdateWithoutProjectsInput
    create: required_documentsCreateWithoutProjectsInput
  }

  export type companiesCreateWithoutQuestionsInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutquestionsInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutQuestionsInput
  }

  export type demodaysCreateWithoutQuestionsInput = {
    name?: string | null
    streaming_url?: string | null
    companies?: companiesCreateOneWithoutDemodaysInput
    participants?: participantsCreateManyWithoutDemodaysInput
  }

  export type demodaysCreateOrConnectWithoutquestionsInput = {
    where: demodaysWhereUniqueInput
    create: demodaysCreateWithoutQuestionsInput
  }

  export type usersCreateWithoutQuestionsInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutquestionsInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutQuestionsInput
  }

  export type answersCreateWithoutQuestionsInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type answersCreateOrConnectWithoutquestionsInput = {
    where: answersWhereUniqueInput
    create: answersCreateWithoutQuestionsInput
  }

  export type companiesUpdateWithoutQuestionsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutQuestionsInput = {
    update: companiesUpdateWithoutQuestionsInput
    create: companiesCreateWithoutQuestionsInput
  }

  export type demodaysUpdateWithoutQuestionsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    streaming_url?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: companiesUpdateOneWithoutDemodaysInput
    participants?: participantsUpdateManyWithoutDemodaysInput
  }

  export type demodaysUpsertWithoutQuestionsInput = {
    update: demodaysUpdateWithoutQuestionsInput
    create: demodaysCreateWithoutQuestionsInput
  }

  export type usersUpdateWithoutQuestionsInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutQuestionsInput = {
    update: usersUpdateWithoutQuestionsInput
    create: usersCreateWithoutQuestionsInput
  }

  export type answersUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    data: answersUpdateWithoutQuestionsInput
  }

  export type answersUpdateManyWithWhereWithoutQuestionsInput = {
    where: answersScalarWhereInput
    data: answersUpdateManyMutationInput
  }

  export type answersScalarWhereInput = {
    AND?: Enumerable<answersScalarWhereInput>
    OR?: Enumerable<answersScalarWhereInput>
    NOT?: Enumerable<answersScalarWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    question_id?: IntFilter | number
  }

  export type answersUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    update: answersUpdateWithoutQuestionsInput
    create: answersCreateWithoutQuestionsInput
  }

  export type companiesCreateWithoutRecent_views_projectInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutrecent_views_projectInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutRecent_views_projectInput
  }

  export type projectsCreateWithoutRecent_views_projectInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutrecent_views_projectInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutRecent_views_projectInput
  }

  export type companiesUpdateWithoutRecent_views_projectInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutRecent_views_projectInput = {
    update: companiesUpdateWithoutRecent_views_projectInput
    create: companiesCreateWithoutRecent_views_projectInput
  }

  export type projectsUpdateWithoutRecent_views_projectInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type projectsUpsertWithoutRecent_views_projectInput = {
    update: projectsUpdateWithoutRecent_views_projectInput
    create: projectsCreateWithoutRecent_views_projectInput
  }

  export type document_typesCreateWithoutRequired_documentsInput = {
    name: string
    company_documents?: company_documentsCreateManyWithoutDocument_typesInput
  }

  export type document_typesCreateOrConnectWithoutrequired_documentsInput = {
    where: document_typesWhereUniqueInput
    create: document_typesCreateWithoutRequired_documentsInput
  }

  export type projectsCreateWithoutRequired_documentsInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    sectors?: sectorsCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutrequired_documentsInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutRequired_documentsInput
  }

  export type document_typesUpdateWithoutRequired_documentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company_documents?: company_documentsUpdateManyWithoutDocument_typesInput
  }

  export type document_typesUpsertWithoutRequired_documentsInput = {
    update: document_typesUpdateWithoutRequired_documentsInput
    create: document_typesCreateWithoutRequired_documentsInput
  }

  export type projectsUpdateWithoutRequired_documentsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
  }

  export type projectsUpsertWithoutRequired_documentsInput = {
    update: projectsUpdateWithoutRequired_documentsInput
    create: projectsCreateWithoutRequired_documentsInput
  }

  export type projectsCreateWithoutSectorsInput = {
    name?: string | null
    introduction?: string | null
    due_date?: Date | string | null
    eligibility?: string | null
    outline?: string | null
    detail?: string | null
    application_method?: string | null
    caution?: string | null
    contact?: string | null
    is_opened: number
    hit: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateOneWithoutProjectsInput
    applicants?: applicantsCreateManyWithoutProjectsInput
    project_images?: project_imagesCreateManyWithoutProjectsInput
    project_likes?: project_likesCreateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectCreateManyWithoutProjectsInput
    required_documents?: required_documentsCreateManyWithoutProjectsInput
  }

  export type projectsCreateOrConnectWithoutsectorsInput = {
    where: projectsWhereUniqueInput
    create: projectsCreateWithoutSectorsInput
  }

  export type startup_infosCreateWithoutSectorsInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutsectorsInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutSectorsInput
  }

  export type projectsUpdateWithWhereUniqueWithoutSectorsInput = {
    where: projectsWhereUniqueInput
    data: projectsUpdateWithoutSectorsInput
  }

  export type projectsUpdateManyWithWhereWithoutSectorsInput = {
    where: projectsScalarWhereInput
    data: projectsUpdateManyMutationInput
  }

  export type projectsUpsertWithWhereUniqueWithoutSectorsInput = {
    where: projectsWhereUniqueInput
    update: projectsUpdateWithoutSectorsInput
    create: projectsCreateWithoutSectorsInput
  }

  export type startup_infosUpdateWithWhereUniqueWithoutSectorsInput = {
    where: startup_infosWhereUniqueInput
    data: startup_infosUpdateWithoutSectorsInput
  }

  export type startup_infosUpdateManyWithWhereWithoutSectorsInput = {
    where: startup_infosScalarWhereInput
    data: startup_infosUpdateManyMutationInput
  }

  export type startup_infosUpsertWithWhereUniqueWithoutSectorsInput = {
    where: startup_infosWhereUniqueInput
    update: startup_infosUpdateWithoutSectorsInput
    create: startup_infosCreateWithoutSectorsInput
  }

  export type startup_infosCreateWithoutService_typesInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutservice_typesInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutService_typesInput
  }

  export type startup_infosUpdateWithWhereUniqueWithoutService_typesInput = {
    where: startup_infosWhereUniqueInput
    data: startup_infosUpdateWithoutService_typesInput
  }

  export type startup_infosUpdateManyWithWhereWithoutService_typesInput = {
    where: startup_infosScalarWhereInput
    data: startup_infosUpdateManyMutationInput
  }

  export type startup_infosUpsertWithWhereUniqueWithoutService_typesInput = {
    where: startup_infosWhereUniqueInput
    update: startup_infosUpdateWithoutService_typesInput
    create: startup_infosCreateWithoutService_typesInput
  }

  export type usersCreateWithoutSignup_methodsInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutsignup_methodsInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutSignup_methodsInput
  }

  export type usersUpdateWithWhereUniqueWithoutSignup_methodsInput = {
    where: usersWhereUniqueInput
    data: usersUpdateWithoutSignup_methodsInput
  }

  export type usersUpdateManyWithWhereWithoutSignup_methodsInput = {
    where: usersScalarWhereInput
    data: usersUpdateManyMutationInput
  }

  export type usersUpsertWithWhereUniqueWithoutSignup_methodsInput = {
    where: usersWhereUniqueInput
    update: usersUpdateWithoutSignup_methodsInput
    create: usersCreateWithoutSignup_methodsInput
  }

  export type startup_infosCreateWithoutStartup_imagesInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    technologies?: technologiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithoutstartup_imagesInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutStartup_imagesInput
  }

  export type startup_infosUpdateWithoutStartup_imagesInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
  }

  export type startup_infosUpsertWithoutStartup_imagesInput = {
    update: startup_infosUpdateWithoutStartup_imagesInput
    create: startup_infosCreateWithoutStartup_imagesInput
  }

  export type business_typesCreateWithoutStartup_infosInput = {
    name: string
  }

  export type business_typesCreateOrConnectWithoutstartup_infosInput = {
    where: business_typesWhereUniqueInput
    create: business_typesCreateWithoutStartup_infosInput
  }

  export type companiesCreateWithoutStartup_infosInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutstartup_infosInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutStartup_infosInput
  }

  export type technologiesCreateWithoutStartup_infosInput = {
    name: string
    partner_infos?: partner_infosCreateManyWithoutTechnologiesInput
  }

  export type technologiesCreateOrConnectWithoutstartup_infosInput = {
    where: technologiesWhereUniqueInput
    create: technologiesCreateWithoutStartup_infosInput
  }

  export type sectorsCreateWithoutStartup_infosInput = {
    name: string
    projects?: projectsCreateManyWithoutSectorsInput
  }

  export type sectorsCreateOrConnectWithoutstartup_infosInput = {
    where: sectorsWhereUniqueInput
    create: sectorsCreateWithoutStartup_infosInput
  }

  export type service_typesCreateWithoutStartup_infosInput = {
    name: string
  }

  export type service_typesCreateOrConnectWithoutstartup_infosInput = {
    where: service_typesWhereUniqueInput
    create: service_typesCreateWithoutStartup_infosInput
  }

  export type invested_fromCreateWithoutStartup_infosInput = {
    date: Date | string
    invested_institution: string
    invested_fund: number
    corporate_value: number
    investment_series: investment_seriesCreateOneWithoutInvested_fromInput
  }

  export type invested_fromCreateOrConnectWithoutstartup_infosInput = {
    where: invested_fromWhereUniqueInput
    create: invested_fromCreateWithoutStartup_infosInput
  }

  export type startup_imagesCreateWithoutStartup_infosInput = {
    img_url: string
  }

  export type startup_imagesCreateOrConnectWithoutstartup_infosInput = {
    where: startup_imagesWhereUniqueInput
    create: startup_imagesCreateWithoutStartup_infosInput
  }

  export type business_typesUpdateWithoutStartup_infosInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type business_typesUpsertWithoutStartup_infosInput = {
    update: business_typesUpdateWithoutStartup_infosInput
    create: business_typesCreateWithoutStartup_infosInput
  }

  export type companiesUpdateWithoutStartup_infosInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutStartup_infosInput = {
    update: companiesUpdateWithoutStartup_infosInput
    create: companiesCreateWithoutStartup_infosInput
  }

  export type technologiesUpdateWithoutStartup_infosInput = {
    name?: StringFieldUpdateOperationsInput | string
    partner_infos?: partner_infosUpdateManyWithoutTechnologiesInput
  }

  export type technologiesUpsertWithoutStartup_infosInput = {
    update: technologiesUpdateWithoutStartup_infosInput
    create: technologiesCreateWithoutStartup_infosInput
  }

  export type sectorsUpdateWithoutStartup_infosInput = {
    name?: StringFieldUpdateOperationsInput | string
    projects?: projectsUpdateManyWithoutSectorsInput
  }

  export type sectorsUpsertWithoutStartup_infosInput = {
    update: sectorsUpdateWithoutStartup_infosInput
    create: sectorsCreateWithoutStartup_infosInput
  }

  export type service_typesUpdateWithoutStartup_infosInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type service_typesUpsertWithoutStartup_infosInput = {
    update: service_typesUpdateWithoutStartup_infosInput
    create: service_typesCreateWithoutStartup_infosInput
  }

  export type invested_fromUpdateWithWhereUniqueWithoutStartup_infosInput = {
    where: invested_fromWhereUniqueInput
    data: invested_fromUpdateWithoutStartup_infosInput
  }

  export type invested_fromUpdateManyWithWhereWithoutStartup_infosInput = {
    where: invested_fromScalarWhereInput
    data: invested_fromUpdateManyMutationInput
  }

  export type invested_fromUpsertWithWhereUniqueWithoutStartup_infosInput = {
    where: invested_fromWhereUniqueInput
    update: invested_fromUpdateWithoutStartup_infosInput
    create: invested_fromCreateWithoutStartup_infosInput
  }

  export type startup_imagesUpdateWithWhereUniqueWithoutStartup_infosInput = {
    where: startup_imagesWhereUniqueInput
    data: startup_imagesUpdateWithoutStartup_infosInput
  }

  export type startup_imagesUpdateManyWithWhereWithoutStartup_infosInput = {
    where: startup_imagesScalarWhereInput
    data: startup_imagesUpdateManyMutationInput
  }

  export type startup_imagesScalarWhereInput = {
    AND?: Enumerable<startup_imagesScalarWhereInput>
    OR?: Enumerable<startup_imagesScalarWhereInput>
    NOT?: Enumerable<startup_imagesScalarWhereInput>
    id?: IntFilter | number
    company_id?: IntFilter | number
    img_url?: StringFilter | string
  }

  export type startup_imagesUpsertWithWhereUniqueWithoutStartup_infosInput = {
    where: startup_imagesWhereUniqueInput
    update: startup_imagesUpdateWithoutStartup_infosInput
    create: startup_imagesCreateWithoutStartup_infosInput
  }

  export type companiesCreateWithoutStartup_likesInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutstartup_likesInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutStartup_likesInput
  }

  export type usersCreateWithoutStartup_likesInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutstartup_likesInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutStartup_likesInput
  }

  export type companiesUpdateWithoutStartup_likesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutStartup_likesInput = {
    update: companiesUpdateWithoutStartup_likesInput
    create: companiesCreateWithoutStartup_likesInput
  }

  export type usersUpdateWithoutStartup_likesInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutStartup_likesInput = {
    update: usersUpdateWithoutStartup_likesInput
    create: usersCreateWithoutStartup_likesInput
  }

  export type partner_infosCreateWithoutTechnologiesInput = {
    invested_counts?: number | null
    companies: companiesCreateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsCreateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioCreateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsCreateManyWithoutPartner_infosInput
  }

  export type partner_infosCreateOrConnectWithouttechnologiesInput = {
    where: partner_infosWhereUniqueInput
    create: partner_infosCreateWithoutTechnologiesInput
  }

  export type startup_infosCreateWithoutTechnologiesInput = {
    rep?: string | null
    item_description?: string | null
    contact?: string | null
    address_road?: string | null
    address_detail?: string | null
    business_license_number?: string | null
    email?: string | null
    instagram_url?: string | null
    facebook_url?: string | null
    thumbnail?: string | null
    business_types?: business_typesCreateOneWithoutStartup_infosInput
    companies: companiesCreateOneWithoutStartup_infosInput
    sectors?: sectorsCreateOneWithoutStartup_infosInput
    service_types?: service_typesCreateOneWithoutStartup_infosInput
    invested_from?: invested_fromCreateManyWithoutStartup_infosInput
    startup_images?: startup_imagesCreateManyWithoutStartup_infosInput
  }

  export type startup_infosCreateOrConnectWithouttechnologiesInput = {
    where: startup_infosWhereUniqueInput
    create: startup_infosCreateWithoutTechnologiesInput
  }

  export type partner_infosUpdateWithWhereUniqueWithoutTechnologiesInput = {
    where: partner_infosWhereUniqueInput
    data: partner_infosUpdateWithoutTechnologiesInput
  }

  export type partner_infosUpdateManyWithWhereWithoutTechnologiesInput = {
    where: partner_infosScalarWhereInput
    data: partner_infosUpdateManyMutationInput
  }

  export type partner_infosUpsertWithWhereUniqueWithoutTechnologiesInput = {
    where: partner_infosWhereUniqueInput
    update: partner_infosUpdateWithoutTechnologiesInput
    create: partner_infosCreateWithoutTechnologiesInput
  }

  export type startup_infosUpdateWithWhereUniqueWithoutTechnologiesInput = {
    where: startup_infosWhereUniqueInput
    data: startup_infosUpdateWithoutTechnologiesInput
  }

  export type startup_infosUpdateManyWithWhereWithoutTechnologiesInput = {
    where: startup_infosScalarWhereInput
    data: startup_infosUpdateManyMutationInput
  }

  export type startup_infosUpsertWithWhereUniqueWithoutTechnologiesInput = {
    where: startup_infosWhereUniqueInput
    update: startup_infosUpdateWithoutTechnologiesInput
    create: startup_infosCreateWithoutTechnologiesInput
  }

  export type user_agreementsCreateWithoutTermsInput = {
    users: usersCreateOneWithoutUser_agreementsInput
  }

  export type user_agreementsCreateOrConnectWithouttermsInput = {
    where: user_agreementsWhereUniqueInput
    create: user_agreementsCreateWithoutTermsInput
  }

  export type user_agreementsUpdateWithWhereUniqueWithoutTermsInput = {
    where: user_agreementsWhereUniqueInput
    data: user_agreementsUpdateWithoutTermsInput
  }

  export type user_agreementsUpdateManyWithWhereWithoutTermsInput = {
    where: user_agreementsScalarWhereInput
    data: user_agreementsUpdateManyMutationInput
  }

  export type user_agreementsScalarWhereInput = {
    AND?: Enumerable<user_agreementsScalarWhereInput>
    OR?: Enumerable<user_agreementsScalarWhereInput>
    NOT?: Enumerable<user_agreementsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    term_id?: IntFilter | number
  }

  export type user_agreementsUpsertWithWhereUniqueWithoutTermsInput = {
    where: user_agreementsWhereUniqueInput
    update: user_agreementsUpdateWithoutTermsInput
    create: user_agreementsCreateWithoutTermsInput
  }

  export type termsCreateWithoutUser_agreementsInput = {
    name: string
    content: string
  }

  export type termsCreateOrConnectWithoutuser_agreementsInput = {
    where: termsWhereUniqueInput
    create: termsCreateWithoutUser_agreementsInput
  }

  export type usersCreateWithoutUser_agreementsInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutuser_agreementsInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutUser_agreementsInput
  }

  export type termsUpdateWithoutUser_agreementsInput = {
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type termsUpsertWithoutUser_agreementsInput = {
    update: termsUpdateWithoutUser_agreementsInput
    create: termsCreateWithoutUser_agreementsInput
  }

  export type usersUpdateWithoutUser_agreementsInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutUser_agreementsInput = {
    update: usersUpdateWithoutUser_agreementsInput
    create: usersCreateWithoutUser_agreementsInput
  }

  export type companiesCreateWithoutUser_typesInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
    users?: usersCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutuser_typesInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutUser_typesInput
  }

  export type usersCreateWithoutUser_typesInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
    votes?: votesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutuser_typesInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutUser_typesInput
  }

  export type companiesUpdateWithWhereUniqueWithoutUser_typesInput = {
    where: companiesWhereUniqueInput
    data: companiesUpdateWithoutUser_typesInput
  }

  export type companiesUpdateManyWithWhereWithoutUser_typesInput = {
    where: companiesScalarWhereInput
    data: companiesUpdateManyMutationInput
  }

  export type companiesScalarWhereInput = {
    AND?: Enumerable<companiesScalarWhereInput>
    OR?: Enumerable<companiesScalarWhereInput>
    NOT?: Enumerable<companiesScalarWhereInput>
    id?: IntFilter | number
    type_id?: IntNullableFilter | number | null
    name?: StringNullableFilter | string | null
    logo_img?: StringNullableFilter | string | null
    established_date?: DateTimeNullableFilter | Date | string | null
    hompage?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    team_intro?: StringNullableFilter | string | null
    member_count?: IntNullableFilter | number | null
  }

  export type companiesUpsertWithWhereUniqueWithoutUser_typesInput = {
    where: companiesWhereUniqueInput
    update: companiesUpdateWithoutUser_typesInput
    create: companiesCreateWithoutUser_typesInput
  }

  export type usersUpdateWithWhereUniqueWithoutUser_typesInput = {
    where: usersWhereUniqueInput
    data: usersUpdateWithoutUser_typesInput
  }

  export type usersUpdateManyWithWhereWithoutUser_typesInput = {
    where: usersScalarWhereInput
    data: usersUpdateManyMutationInput
  }

  export type usersUpsertWithWhereUniqueWithoutUser_typesInput = {
    where: usersWhereUniqueInput
    update: usersUpdateWithoutUser_typesInput
    create: usersCreateWithoutUser_typesInput
  }

  export type companiesCreateWithoutUsersInput = {
    name?: string | null
    logo_img?: string | null
    established_date?: Date | string | null
    hompage?: string | null
    description?: string | null
    team_intro?: string | null
    member_count?: number | null
    user_types?: user_typesCreateOneWithoutCompaniesInput
    applicants?: applicantsCreateManyWithoutCompaniesInput
    company_documents?: company_documentsCreateManyWithoutCompaniesInput
    company_members?: company_membersCreateManyWithoutCompaniesInput
    company_news?: company_newsCreateManyWithoutCompaniesInput
    demodays?: demodaysCreateManyWithoutCompaniesInput
    invested_to?: invested_toCreateManyWithoutCompaniesInput
    IR_requests?: IR_requestsCreateManyWithoutCompaniesInput
    participants?: participantsCreateManyWithoutCompaniesInput
    partner_infos?: partner_infosCreateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesCreateManyWithoutCompaniesInput
    projects?: projectsCreateManyWithoutCompaniesInput
    questions?: questionsCreateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectCreateManyWithoutCompaniesInput
    startup_infos?: startup_infosCreateManyWithoutCompaniesInput
    startup_likes?: startup_likesCreateManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutusersInput = {
    where: companiesWhereUniqueInput
    create: companiesCreateWithoutUsersInput
  }

  export type signup_methodsCreateWithoutUsersInput = {
    name: string
  }

  export type signup_methodsCreateOrConnectWithoutusersInput = {
    where: signup_methodsWhereUniqueInput
    create: signup_methodsCreateWithoutUsersInput
  }

  export type user_typesCreateWithoutUsersInput = {
    name: string
    companies?: companiesCreateManyWithoutUser_typesInput
  }

  export type user_typesCreateOrConnectWithoutusersInput = {
    where: user_typesWhereUniqueInput
    create: user_typesCreateWithoutUsersInput
  }

  export type questionsCreateWithoutUsersInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutQuestionsInput
    demodays: demodaysCreateOneWithoutQuestionsInput
    answers?: answersCreateManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutusersInput = {
    where: questionsWhereUniqueInput
    create: questionsCreateWithoutUsersInput
  }

  export type startup_likesCreateWithoutUsersInput = {
    is_liked: number
    created_at: Date | string
    updated_at: Date | string
    companies: companiesCreateOneWithoutStartup_likesInput
  }

  export type startup_likesCreateOrConnectWithoutusersInput = {
    where: startup_likesWhereUniqueInput
    create: startup_likesCreateWithoutUsersInput
  }

  export type user_agreementsCreateWithoutUsersInput = {
    terms: termsCreateOneWithoutUser_agreementsInput
  }

  export type user_agreementsCreateOrConnectWithoutusersInput = {
    where: user_agreementsWhereUniqueInput
    create: user_agreementsCreateWithoutUsersInput
  }

  export type votesCreateWithoutUsersInput = {
    created_at: Date | string
    participants: participantsCreateOneWithoutVotesInput
  }

  export type votesCreateOrConnectWithoutusersInput = {
    where: votesWhereUniqueInput
    create: votesCreateWithoutUsersInput
  }

  export type companiesUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    user_types?: user_typesUpdateOneWithoutCompaniesInput
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
  }

  export type companiesUpsertWithoutUsersInput = {
    update: companiesUpdateWithoutUsersInput
    create: companiesCreateWithoutUsersInput
  }

  export type signup_methodsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type signup_methodsUpsertWithoutUsersInput = {
    update: signup_methodsUpdateWithoutUsersInput
    create: signup_methodsCreateWithoutUsersInput
  }

  export type user_typesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateManyWithoutUser_typesInput
  }

  export type user_typesUpsertWithoutUsersInput = {
    update: user_typesUpdateWithoutUsersInput
    create: user_typesCreateWithoutUsersInput
  }

  export type questionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: questionsWhereUniqueInput
    data: questionsUpdateWithoutUsersInput
  }

  export type questionsUpdateManyWithWhereWithoutUsersInput = {
    where: questionsScalarWhereInput
    data: questionsUpdateManyMutationInput
  }

  export type questionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: questionsWhereUniqueInput
    update: questionsUpdateWithoutUsersInput
    create: questionsCreateWithoutUsersInput
  }

  export type startup_likesUpdateWithWhereUniqueWithoutUsersInput = {
    where: startup_likesWhereUniqueInput
    data: startup_likesUpdateWithoutUsersInput
  }

  export type startup_likesUpdateManyWithWhereWithoutUsersInput = {
    where: startup_likesScalarWhereInput
    data: startup_likesUpdateManyMutationInput
  }

  export type startup_likesUpsertWithWhereUniqueWithoutUsersInput = {
    where: startup_likesWhereUniqueInput
    update: startup_likesUpdateWithoutUsersInput
    create: startup_likesCreateWithoutUsersInput
  }

  export type user_agreementsUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_agreementsWhereUniqueInput
    data: user_agreementsUpdateWithoutUsersInput
  }

  export type user_agreementsUpdateManyWithWhereWithoutUsersInput = {
    where: user_agreementsScalarWhereInput
    data: user_agreementsUpdateManyMutationInput
  }

  export type user_agreementsUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_agreementsWhereUniqueInput
    update: user_agreementsUpdateWithoutUsersInput
    create: user_agreementsCreateWithoutUsersInput
  }

  export type votesUpdateWithWhereUniqueWithoutUsersInput = {
    where: votesWhereUniqueInput
    data: votesUpdateWithoutUsersInput
  }

  export type votesUpdateManyWithWhereWithoutUsersInput = {
    where: votesScalarWhereInput
    data: votesUpdateManyMutationInput
  }

  export type votesUpsertWithWhereUniqueWithoutUsersInput = {
    where: votesWhereUniqueInput
    update: votesUpdateWithoutUsersInput
    create: votesCreateWithoutUsersInput
  }

  export type participantsCreateWithoutVotesInput = {
    order: number
    companies: companiesCreateOneWithoutParticipantsInput
    demodays: demodaysCreateOneWithoutParticipantsInput
  }

  export type participantsCreateOrConnectWithoutvotesInput = {
    where: participantsWhereUniqueInput
    create: participantsCreateWithoutVotesInput
  }

  export type usersCreateWithoutVotesInput = {
    sns_id?: string | null
    name: string
    profile_picture?: string | null
    email: string
    password?: string | null
    phone_number?: string | null
    is_verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    companies?: companiesCreateOneWithoutUsersInput
    signup_methods?: signup_methodsCreateOneWithoutUsersInput
    user_types?: user_typesCreateOneWithoutUsersInput
    questions?: questionsCreateManyWithoutUsersInput
    startup_likes?: startup_likesCreateManyWithoutUsersInput
    user_agreements?: user_agreementsCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutvotesInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutVotesInput
  }

  export type participantsUpdateWithoutVotesInput = {
    order?: IntFieldUpdateOperationsInput | number
    companies?: companiesUpdateOneRequiredWithoutParticipantsInput
    demodays?: demodaysUpdateOneRequiredWithoutParticipantsInput
  }

  export type participantsUpsertWithoutVotesInput = {
    update: participantsUpdateWithoutVotesInput
    create: participantsCreateWithoutVotesInput
  }

  export type usersUpdateWithoutVotesInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutVotesInput = {
    update: usersUpdateWithoutVotesInput
    create: usersCreateWithoutVotesInput
  }

  export type startup_infosUpdateWithoutBusiness_typesInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type applicantsUpdateWithoutCompaniesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: projectsUpdateOneRequiredWithoutApplicantsInput
  }

  export type company_documentsUpdateWithoutCompaniesInput = {
    doc_url?: StringFieldUpdateOperationsInput | string
    document_types?: document_typesUpdateOneRequiredWithoutCompany_documentsInput
    IR_requests?: IR_requestsUpdateManyWithoutCompany_documentsInput
  }

  export type company_membersUpdateWithoutCompaniesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type company_newsUpdateWithoutCompaniesInput = {
    URL?: StringFieldUpdateOperationsInput | string
  }

  export type demodaysUpdateWithoutCompaniesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    streaming_url?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: participantsUpdateManyWithoutDemodaysInput
    questions?: questionsUpdateManyWithoutDemodaysInput
  }

  export type invested_toUpdateWithoutCompaniesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startup_name?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    investment_series?: investment_seriesUpdateOneRequiredWithoutInvested_toInput
  }

  export type IR_requestsUpdateWithoutCompaniesInput = {
    is_checked?: IntFieldUpdateOperationsInput | number
    from_partner?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company_documents?: company_documentsUpdateOneWithoutIR_requestsInput
    partner_infos?: partner_infosUpdateOneRequiredWithoutIR_requestsInput
  }

  export type participantsUpdateWithoutCompaniesInput = {
    order?: IntFieldUpdateOperationsInput | number
    demodays?: demodaysUpdateOneRequiredWithoutParticipantsInput
    votes?: votesUpdateManyWithoutParticipantsInput
  }

  export type partner_infosUpdateWithoutCompaniesInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    technologies?: technologiesUpdateOneWithoutPartner_infosInput
    investment_funds?: investment_fundsUpdateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioUpdateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsUpdateManyWithoutPartner_infosInput
  }

  export type partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies_companiesTopartner_likes_company_likes_id?: companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput
  }

  export type partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies_companiesTopartner_likes_company_liked_id?: companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput
  }

  export type project_likesUpdateWithoutCompaniesInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: projectsUpdateOneRequiredWithoutProject_likesInput
  }

  export type projectsUpdateWithoutCompaniesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sectors?: sectorsUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type questionsUpdateWithoutCompaniesInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    demodays?: demodaysUpdateOneRequiredWithoutQuestionsInput
    users?: usersUpdateOneRequiredWithoutQuestionsInput
    answers?: answersUpdateManyWithoutQuestionsInput
  }

  export type recent_views_projectUpdateWithoutCompaniesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: projectsUpdateOneRequiredWithoutRecent_views_projectInput
  }

  export type startup_infosUpdateWithoutCompaniesInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type startup_likesUpdateWithoutCompaniesInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutStartup_likesInput
  }

  export type usersUpdateWithoutCompaniesInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type IR_requestsUpdateWithoutCompany_documentsInput = {
    is_checked?: IntFieldUpdateOperationsInput | number
    from_partner?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    partner_infos?: partner_infosUpdateOneRequiredWithoutIR_requestsInput
    companies?: companiesUpdateOneRequiredWithoutIR_requestsInput
  }

  export type participantsUpdateWithoutDemodaysInput = {
    order?: IntFieldUpdateOperationsInput | number
    companies?: companiesUpdateOneRequiredWithoutParticipantsInput
    votes?: votesUpdateManyWithoutParticipantsInput
  }

  export type questionsUpdateWithoutDemodaysInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutQuestionsInput
    users?: usersUpdateOneRequiredWithoutQuestionsInput
    answers?: answersUpdateManyWithoutQuestionsInput
  }

  export type company_documentsUpdateWithoutDocument_typesInput = {
    doc_url?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateOneRequiredWithoutCompany_documentsInput
    IR_requests?: IR_requestsUpdateManyWithoutCompany_documentsInput
  }

  export type required_documentsUpdateWithoutDocument_typesInput = {
    projects?: projectsUpdateOneRequiredWithoutRequired_documentsInput
  }

  export type partner_infosUpdateWithoutInvestment_fundsInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    companies?: companiesUpdateOneRequiredWithoutPartner_infosInput
    technologies?: technologiesUpdateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioUpdateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsUpdateManyWithoutPartner_infosInput
  }

  export type invested_fromUpdateWithoutInvestment_seriesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    invested_institution?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    startup_infos?: startup_infosUpdateOneRequiredWithoutInvested_fromInput
  }

  export type invested_toUpdateWithoutInvestment_seriesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startup_name?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    companies?: companiesUpdateOneRequiredWithoutInvested_toInput
  }

  export type votesUpdateWithoutParticipantsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutVotesInput
  }

  export type investment_portfolioUpdateWithoutPartner_infosInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type IR_requestsUpdateWithoutPartner_infosInput = {
    is_checked?: IntFieldUpdateOperationsInput | number
    from_partner?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company_documents?: company_documentsUpdateOneWithoutIR_requestsInput
    companies?: companiesUpdateOneRequiredWithoutIR_requestsInput
  }

  export type applicantsUpdateWithoutProjectsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutApplicantsInput
  }

  export type project_imagesUpdateWithoutProjectsInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type project_likesUpdateWithoutProjectsInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutProject_likesInput
  }

  export type recent_views_projectUpdateWithoutProjectsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutRecent_views_projectInput
  }

  export type required_documentsUpdateWithoutProjectsInput = {
    document_types?: document_typesUpdateOneRequiredWithoutRequired_documentsInput
  }

  export type answersUpdateWithoutQuestionsInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectsUpdateWithoutSectorsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eligibility?: NullableStringFieldUpdateOperationsInput | string | null
    outline?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    application_method?: NullableStringFieldUpdateOperationsInput | string | null
    caution?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    is_opened?: IntFieldUpdateOperationsInput | number
    hit?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutProjectsInput
    applicants?: applicantsUpdateManyWithoutProjectsInput
    project_images?: project_imagesUpdateManyWithoutProjectsInput
    project_likes?: project_likesUpdateManyWithoutProjectsInput
    recent_views_project?: recent_views_projectUpdateManyWithoutProjectsInput
    required_documents?: required_documentsUpdateManyWithoutProjectsInput
  }

  export type startup_infosUpdateWithoutSectorsInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type startup_infosUpdateWithoutService_typesInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    technologies?: technologiesUpdateOneWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type usersUpdateWithoutSignup_methodsInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    user_types?: user_typesUpdateOneWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type invested_fromUpdateWithoutStartup_infosInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    invested_institution?: StringFieldUpdateOperationsInput | string
    invested_fund?: IntFieldUpdateOperationsInput | number
    corporate_value?: IntFieldUpdateOperationsInput | number
    investment_series?: investment_seriesUpdateOneRequiredWithoutInvested_fromInput
  }

  export type startup_imagesUpdateWithoutStartup_infosInput = {
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type partner_infosUpdateWithoutTechnologiesInput = {
    invested_counts?: NullableIntFieldUpdateOperationsInput | number | null
    companies?: companiesUpdateOneRequiredWithoutPartner_infosInput
    investment_funds?: investment_fundsUpdateOneWithoutPartner_infosInput
    investment_portfolio?: investment_portfolioUpdateManyWithoutPartner_infosInput
    IR_requests?: IR_requestsUpdateManyWithoutPartner_infosInput
  }

  export type startup_infosUpdateWithoutTechnologiesInput = {
    rep?: NullableStringFieldUpdateOperationsInput | string | null
    item_description?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address_road?: NullableStringFieldUpdateOperationsInput | string | null
    address_detail?: NullableStringFieldUpdateOperationsInput | string | null
    business_license_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    facebook_url?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    business_types?: business_typesUpdateOneWithoutStartup_infosInput
    companies?: companiesUpdateOneRequiredWithoutStartup_infosInput
    sectors?: sectorsUpdateOneWithoutStartup_infosInput
    service_types?: service_typesUpdateOneWithoutStartup_infosInput
    invested_from?: invested_fromUpdateManyWithoutStartup_infosInput
    startup_images?: startup_imagesUpdateManyWithoutStartup_infosInput
  }

  export type user_agreementsUpdateWithoutTermsInput = {
    users?: usersUpdateOneRequiredWithoutUser_agreementsInput
  }

  export type companiesUpdateWithoutUser_typesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo_img?: NullableStringFieldUpdateOperationsInput | string | null
    established_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hompage?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    team_intro?: NullableStringFieldUpdateOperationsInput | string | null
    member_count?: NullableIntFieldUpdateOperationsInput | number | null
    applicants?: applicantsUpdateManyWithoutCompaniesInput
    company_documents?: company_documentsUpdateManyWithoutCompaniesInput
    company_members?: company_membersUpdateManyWithoutCompaniesInput
    company_news?: company_newsUpdateManyWithoutCompaniesInput
    demodays?: demodaysUpdateManyWithoutCompaniesInput
    invested_to?: invested_toUpdateManyWithoutCompaniesInput
    IR_requests?: IR_requestsUpdateManyWithoutCompaniesInput
    participants?: participantsUpdateManyWithoutCompaniesInput
    partner_infos?: partner_infosUpdateManyWithoutCompaniesInput
    partner_likes_companiesTopartner_likes_company_liked_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput
    partner_likes_companiesTopartner_likes_company_likes_id?: partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput
    project_likes?: project_likesUpdateManyWithoutCompaniesInput
    projects?: projectsUpdateManyWithoutCompaniesInput
    questions?: questionsUpdateManyWithoutCompaniesInput
    recent_views_project?: recent_views_projectUpdateManyWithoutCompaniesInput
    startup_infos?: startup_infosUpdateManyWithoutCompaniesInput
    startup_likes?: startup_likesUpdateManyWithoutCompaniesInput
    users?: usersUpdateManyWithoutCompaniesInput
  }

  export type usersUpdateWithoutUser_typesInput = {
    sns_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneWithoutUsersInput
    signup_methods?: signup_methodsUpdateOneRequiredWithoutUsersInput
    questions?: questionsUpdateManyWithoutUsersInput
    startup_likes?: startup_likesUpdateManyWithoutUsersInput
    user_agreements?: user_agreementsUpdateManyWithoutUsersInput
    votes?: votesUpdateManyWithoutUsersInput
  }

  export type questionsUpdateWithoutUsersInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutQuestionsInput
    demodays?: demodaysUpdateOneRequiredWithoutQuestionsInput
    answers?: answersUpdateManyWithoutQuestionsInput
  }

  export type startup_likesUpdateWithoutUsersInput = {
    is_liked?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: companiesUpdateOneRequiredWithoutStartup_likesInput
  }

  export type user_agreementsUpdateWithoutUsersInput = {
    terms?: termsUpdateOneRequiredWithoutUser_agreementsInput
  }

  export type votesUpdateWithoutUsersInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: participantsUpdateOneRequiredWithoutVotesInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.AnswersScalarFieldEnum`
 */
export type AnswersScalarFieldEnum = Prisma.AnswersScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ApplicantsScalarFieldEnum`
 */
export type ApplicantsScalarFieldEnum = Prisma.ApplicantsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Business_typesScalarFieldEnum`
 */
export type Business_typesScalarFieldEnum = Prisma.Business_typesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CompaniesScalarFieldEnum`
 */
export type CompaniesScalarFieldEnum = Prisma.CompaniesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Company_documentsScalarFieldEnum`
 */
export type Company_documentsScalarFieldEnum = Prisma.Company_documentsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Company_membersScalarFieldEnum`
 */
export type Company_membersScalarFieldEnum = Prisma.Company_membersScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Company_newsScalarFieldEnum`
 */
export type Company_newsScalarFieldEnum = Prisma.Company_newsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Company_typesScalarFieldEnum`
 */
export type Company_typesScalarFieldEnum = Prisma.Company_typesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.DemodaysScalarFieldEnum`
 */
export type DemodaysScalarFieldEnum = Prisma.DemodaysScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Document_typesScalarFieldEnum`
 */
export type Document_typesScalarFieldEnum = Prisma.Document_typesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Email_authScalarFieldEnum`
 */
export type Email_authScalarFieldEnum = Prisma.Email_authScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Invested_fromScalarFieldEnum`
 */
export type Invested_fromScalarFieldEnum = Prisma.Invested_fromScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Invested_toScalarFieldEnum`
 */
export type Invested_toScalarFieldEnum = Prisma.Invested_toScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Investment_fundsScalarFieldEnum`
 */
export type Investment_fundsScalarFieldEnum = Prisma.Investment_fundsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioScalarFieldEnum`
 */
export type Investment_portfolioScalarFieldEnum = Prisma.Investment_portfolioScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Investment_seriesScalarFieldEnum`
 */
export type Investment_seriesScalarFieldEnum = Prisma.Investment_seriesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.IR_requestsScalarFieldEnum`
 */
export type IR_requestsScalarFieldEnum = Prisma.IR_requestsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ParticipantsScalarFieldEnum`
 */
export type ParticipantsScalarFieldEnum = Prisma.ParticipantsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Partner_infosScalarFieldEnum`
 */
export type Partner_infosScalarFieldEnum = Prisma.Partner_infosScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Partner_likesScalarFieldEnum`
 */
export type Partner_likesScalarFieldEnum = Prisma.Partner_likesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Phone_authScalarFieldEnum`
 */
export type Phone_authScalarFieldEnum = Prisma.Phone_authScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Project_imagesScalarFieldEnum`
 */
export type Project_imagesScalarFieldEnum = Prisma.Project_imagesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Project_likesScalarFieldEnum`
 */
export type Project_likesScalarFieldEnum = Prisma.Project_likesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProjectsScalarFieldEnum`
 */
export type ProjectsScalarFieldEnum = Prisma.ProjectsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.QuestionsScalarFieldEnum`
 */
export type QuestionsScalarFieldEnum = Prisma.QuestionsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectScalarFieldEnum`
 */
export type Recent_views_projectScalarFieldEnum = Prisma.Recent_views_projectScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Required_documentsScalarFieldEnum`
 */
export type Required_documentsScalarFieldEnum = Prisma.Required_documentsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SectorsScalarFieldEnum`
 */
export type SectorsScalarFieldEnum = Prisma.SectorsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Service_typesScalarFieldEnum`
 */
export type Service_typesScalarFieldEnum = Prisma.Service_typesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Signup_methodsScalarFieldEnum`
 */
export type Signup_methodsScalarFieldEnum = Prisma.Signup_methodsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Startup_imagesScalarFieldEnum`
 */
export type Startup_imagesScalarFieldEnum = Prisma.Startup_imagesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Startup_infosScalarFieldEnum`
 */
export type Startup_infosScalarFieldEnum = Prisma.Startup_infosScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Startup_likesScalarFieldEnum`
 */
export type Startup_likesScalarFieldEnum = Prisma.Startup_likesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.TechnologiesScalarFieldEnum`
 */
export type TechnologiesScalarFieldEnum = Prisma.TechnologiesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.TermsScalarFieldEnum`
 */
export type TermsScalarFieldEnum = Prisma.TermsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.User_agreementsScalarFieldEnum`
 */
export type User_agreementsScalarFieldEnum = Prisma.User_agreementsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.User_typesScalarFieldEnum`
 */
export type User_typesScalarFieldEnum = Prisma.User_typesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.UsersScalarFieldEnum`
 */
export type UsersScalarFieldEnum = Prisma.UsersScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.VotesScalarFieldEnum`
 */
export type VotesScalarFieldEnum = Prisma.VotesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateAnswers`
 */
export type AggregateAnswers = Prisma.AggregateAnswers

/**
 * @deprecated Renamed to `Prisma.AnswersAvgAggregateOutputType`
 */
export type AnswersAvgAggregateOutputType = Prisma.AnswersAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AnswersSumAggregateOutputType`
 */
export type AnswersSumAggregateOutputType = Prisma.AnswersSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AnswersMinAggregateOutputType`
 */
export type AnswersMinAggregateOutputType = Prisma.AnswersMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AnswersMaxAggregateOutputType`
 */
export type AnswersMaxAggregateOutputType = Prisma.AnswersMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AnswersCountAggregateOutputType`
 */
export type AnswersCountAggregateOutputType = Prisma.AnswersCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateAnswersArgs`
 */
export type AggregateAnswersArgs = Prisma.AggregateAnswersArgs

/**
 * @deprecated Renamed to `Prisma.AnswersAvgAggregateInputType`
 */
export type AnswersAvgAggregateInputType = Prisma.AnswersAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AnswersSumAggregateInputType`
 */
export type AnswersSumAggregateInputType = Prisma.AnswersSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AnswersMinAggregateInputType`
 */
export type AnswersMinAggregateInputType = Prisma.AnswersMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AnswersMaxAggregateInputType`
 */
export type AnswersMaxAggregateInputType = Prisma.AnswersMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AnswersCountAggregateInputType`
 */
export type AnswersCountAggregateInputType = Prisma.AnswersCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.answersSelect`
 */
export type answersSelect = Prisma.answersSelect

/**
 * @deprecated Renamed to `Prisma.answersInclude`
 */
export type answersInclude = Prisma.answersInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueanswersArgs`
 */
export type FindUniqueanswersArgs = Prisma.FindUniqueanswersArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstanswersArgs`
 */
export type FindFirstanswersArgs = Prisma.FindFirstanswersArgs

/**
 * @deprecated Renamed to `Prisma.FindManyanswersArgs`
 */
export type FindManyanswersArgs = Prisma.FindManyanswersArgs

/**
 * @deprecated Renamed to `Prisma.answersCreateArgs`
 */
export type answersCreateArgs = Prisma.answersCreateArgs

/**
 * @deprecated Renamed to `Prisma.answersUpdateArgs`
 */
export type answersUpdateArgs = Prisma.answersUpdateArgs

/**
 * @deprecated Renamed to `Prisma.answersUpdateManyArgs`
 */
export type answersUpdateManyArgs = Prisma.answersUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.answersUpsertArgs`
 */
export type answersUpsertArgs = Prisma.answersUpsertArgs

/**
 * @deprecated Renamed to `Prisma.answersDeleteArgs`
 */
export type answersDeleteArgs = Prisma.answersDeleteArgs

/**
 * @deprecated Renamed to `Prisma.answersDeleteManyArgs`
 */
export type answersDeleteManyArgs = Prisma.answersDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateApplicants`
 */
export type AggregateApplicants = Prisma.AggregateApplicants

/**
 * @deprecated Renamed to `Prisma.ApplicantsAvgAggregateOutputType`
 */
export type ApplicantsAvgAggregateOutputType = Prisma.ApplicantsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsSumAggregateOutputType`
 */
export type ApplicantsSumAggregateOutputType = Prisma.ApplicantsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsMinAggregateOutputType`
 */
export type ApplicantsMinAggregateOutputType = Prisma.ApplicantsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsMaxAggregateOutputType`
 */
export type ApplicantsMaxAggregateOutputType = Prisma.ApplicantsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsCountAggregateOutputType`
 */
export type ApplicantsCountAggregateOutputType = Prisma.ApplicantsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateApplicantsArgs`
 */
export type AggregateApplicantsArgs = Prisma.AggregateApplicantsArgs

/**
 * @deprecated Renamed to `Prisma.ApplicantsAvgAggregateInputType`
 */
export type ApplicantsAvgAggregateInputType = Prisma.ApplicantsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsSumAggregateInputType`
 */
export type ApplicantsSumAggregateInputType = Prisma.ApplicantsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsMinAggregateInputType`
 */
export type ApplicantsMinAggregateInputType = Prisma.ApplicantsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsMaxAggregateInputType`
 */
export type ApplicantsMaxAggregateInputType = Prisma.ApplicantsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ApplicantsCountAggregateInputType`
 */
export type ApplicantsCountAggregateInputType = Prisma.ApplicantsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.applicantsSelect`
 */
export type applicantsSelect = Prisma.applicantsSelect

/**
 * @deprecated Renamed to `Prisma.applicantsInclude`
 */
export type applicantsInclude = Prisma.applicantsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueapplicantsArgs`
 */
export type FindUniqueapplicantsArgs = Prisma.FindUniqueapplicantsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstapplicantsArgs`
 */
export type FindFirstapplicantsArgs = Prisma.FindFirstapplicantsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyapplicantsArgs`
 */
export type FindManyapplicantsArgs = Prisma.FindManyapplicantsArgs

/**
 * @deprecated Renamed to `Prisma.applicantsCreateArgs`
 */
export type applicantsCreateArgs = Prisma.applicantsCreateArgs

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateArgs`
 */
export type applicantsUpdateArgs = Prisma.applicantsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyArgs`
 */
export type applicantsUpdateManyArgs = Prisma.applicantsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.applicantsUpsertArgs`
 */
export type applicantsUpsertArgs = Prisma.applicantsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.applicantsDeleteArgs`
 */
export type applicantsDeleteArgs = Prisma.applicantsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.applicantsDeleteManyArgs`
 */
export type applicantsDeleteManyArgs = Prisma.applicantsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateBusiness_types`
 */
export type AggregateBusiness_types = Prisma.AggregateBusiness_types

/**
 * @deprecated Renamed to `Prisma.Business_typesAvgAggregateOutputType`
 */
export type Business_typesAvgAggregateOutputType = Prisma.Business_typesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Business_typesSumAggregateOutputType`
 */
export type Business_typesSumAggregateOutputType = Prisma.Business_typesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Business_typesMinAggregateOutputType`
 */
export type Business_typesMinAggregateOutputType = Prisma.Business_typesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Business_typesMaxAggregateOutputType`
 */
export type Business_typesMaxAggregateOutputType = Prisma.Business_typesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Business_typesCountAggregateOutputType`
 */
export type Business_typesCountAggregateOutputType = Prisma.Business_typesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateBusiness_typesArgs`
 */
export type AggregateBusiness_typesArgs = Prisma.AggregateBusiness_typesArgs

/**
 * @deprecated Renamed to `Prisma.Business_typesAvgAggregateInputType`
 */
export type Business_typesAvgAggregateInputType = Prisma.Business_typesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Business_typesSumAggregateInputType`
 */
export type Business_typesSumAggregateInputType = Prisma.Business_typesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Business_typesMinAggregateInputType`
 */
export type Business_typesMinAggregateInputType = Prisma.Business_typesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Business_typesMaxAggregateInputType`
 */
export type Business_typesMaxAggregateInputType = Prisma.Business_typesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Business_typesCountAggregateInputType`
 */
export type Business_typesCountAggregateInputType = Prisma.Business_typesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.business_typesSelect`
 */
export type business_typesSelect = Prisma.business_typesSelect

/**
 * @deprecated Renamed to `Prisma.business_typesInclude`
 */
export type business_typesInclude = Prisma.business_typesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquebusiness_typesArgs`
 */
export type FindUniquebusiness_typesArgs = Prisma.FindUniquebusiness_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstbusiness_typesArgs`
 */
export type FindFirstbusiness_typesArgs = Prisma.FindFirstbusiness_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindManybusiness_typesArgs`
 */
export type FindManybusiness_typesArgs = Prisma.FindManybusiness_typesArgs

/**
 * @deprecated Renamed to `Prisma.business_typesCreateArgs`
 */
export type business_typesCreateArgs = Prisma.business_typesCreateArgs

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateArgs`
 */
export type business_typesUpdateArgs = Prisma.business_typesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateManyArgs`
 */
export type business_typesUpdateManyArgs = Prisma.business_typesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.business_typesUpsertArgs`
 */
export type business_typesUpsertArgs = Prisma.business_typesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.business_typesDeleteArgs`
 */
export type business_typesDeleteArgs = Prisma.business_typesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.business_typesDeleteManyArgs`
 */
export type business_typesDeleteManyArgs = Prisma.business_typesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompanies`
 */
export type AggregateCompanies = Prisma.AggregateCompanies

/**
 * @deprecated Renamed to `Prisma.CompaniesAvgAggregateOutputType`
 */
export type CompaniesAvgAggregateOutputType = Prisma.CompaniesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompaniesSumAggregateOutputType`
 */
export type CompaniesSumAggregateOutputType = Prisma.CompaniesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompaniesMinAggregateOutputType`
 */
export type CompaniesMinAggregateOutputType = Prisma.CompaniesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompaniesMaxAggregateOutputType`
 */
export type CompaniesMaxAggregateOutputType = Prisma.CompaniesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompaniesCountAggregateOutputType`
 */
export type CompaniesCountAggregateOutputType = Prisma.CompaniesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompaniesArgs`
 */
export type AggregateCompaniesArgs = Prisma.AggregateCompaniesArgs

/**
 * @deprecated Renamed to `Prisma.CompaniesAvgAggregateInputType`
 */
export type CompaniesAvgAggregateInputType = Prisma.CompaniesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompaniesSumAggregateInputType`
 */
export type CompaniesSumAggregateInputType = Prisma.CompaniesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompaniesMinAggregateInputType`
 */
export type CompaniesMinAggregateInputType = Prisma.CompaniesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompaniesMaxAggregateInputType`
 */
export type CompaniesMaxAggregateInputType = Prisma.CompaniesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompaniesCountAggregateInputType`
 */
export type CompaniesCountAggregateInputType = Prisma.CompaniesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.companiesSelect`
 */
export type companiesSelect = Prisma.companiesSelect

/**
 * @deprecated Renamed to `Prisma.companiesInclude`
 */
export type companiesInclude = Prisma.companiesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquecompaniesArgs`
 */
export type FindUniquecompaniesArgs = Prisma.FindUniquecompaniesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcompaniesArgs`
 */
export type FindFirstcompaniesArgs = Prisma.FindFirstcompaniesArgs

/**
 * @deprecated Renamed to `Prisma.FindManycompaniesArgs`
 */
export type FindManycompaniesArgs = Prisma.FindManycompaniesArgs

/**
 * @deprecated Renamed to `Prisma.companiesCreateArgs`
 */
export type companiesCreateArgs = Prisma.companiesCreateArgs

/**
 * @deprecated Renamed to `Prisma.companiesUpdateArgs`
 */
export type companiesUpdateArgs = Prisma.companiesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.companiesUpdateManyArgs`
 */
export type companiesUpdateManyArgs = Prisma.companiesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.companiesUpsertArgs`
 */
export type companiesUpsertArgs = Prisma.companiesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.companiesDeleteArgs`
 */
export type companiesDeleteArgs = Prisma.companiesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.companiesDeleteManyArgs`
 */
export type companiesDeleteManyArgs = Prisma.companiesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_documents`
 */
export type AggregateCompany_documents = Prisma.AggregateCompany_documents

/**
 * @deprecated Renamed to `Prisma.Company_documentsAvgAggregateOutputType`
 */
export type Company_documentsAvgAggregateOutputType = Prisma.Company_documentsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsSumAggregateOutputType`
 */
export type Company_documentsSumAggregateOutputType = Prisma.Company_documentsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsMinAggregateOutputType`
 */
export type Company_documentsMinAggregateOutputType = Prisma.Company_documentsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsMaxAggregateOutputType`
 */
export type Company_documentsMaxAggregateOutputType = Prisma.Company_documentsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsCountAggregateOutputType`
 */
export type Company_documentsCountAggregateOutputType = Prisma.Company_documentsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_documentsArgs`
 */
export type AggregateCompany_documentsArgs = Prisma.AggregateCompany_documentsArgs

/**
 * @deprecated Renamed to `Prisma.Company_documentsAvgAggregateInputType`
 */
export type Company_documentsAvgAggregateInputType = Prisma.Company_documentsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsSumAggregateInputType`
 */
export type Company_documentsSumAggregateInputType = Prisma.Company_documentsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsMinAggregateInputType`
 */
export type Company_documentsMinAggregateInputType = Prisma.Company_documentsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsMaxAggregateInputType`
 */
export type Company_documentsMaxAggregateInputType = Prisma.Company_documentsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_documentsCountAggregateInputType`
 */
export type Company_documentsCountAggregateInputType = Prisma.Company_documentsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.company_documentsSelect`
 */
export type company_documentsSelect = Prisma.company_documentsSelect

/**
 * @deprecated Renamed to `Prisma.company_documentsInclude`
 */
export type company_documentsInclude = Prisma.company_documentsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquecompany_documentsArgs`
 */
export type FindUniquecompany_documentsArgs = Prisma.FindUniquecompany_documentsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcompany_documentsArgs`
 */
export type FindFirstcompany_documentsArgs = Prisma.FindFirstcompany_documentsArgs

/**
 * @deprecated Renamed to `Prisma.FindManycompany_documentsArgs`
 */
export type FindManycompany_documentsArgs = Prisma.FindManycompany_documentsArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateArgs`
 */
export type company_documentsCreateArgs = Prisma.company_documentsCreateArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateArgs`
 */
export type company_documentsUpdateArgs = Prisma.company_documentsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyArgs`
 */
export type company_documentsUpdateManyArgs = Prisma.company_documentsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsUpsertArgs`
 */
export type company_documentsUpsertArgs = Prisma.company_documentsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsDeleteArgs`
 */
export type company_documentsDeleteArgs = Prisma.company_documentsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.company_documentsDeleteManyArgs`
 */
export type company_documentsDeleteManyArgs = Prisma.company_documentsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_members`
 */
export type AggregateCompany_members = Prisma.AggregateCompany_members

/**
 * @deprecated Renamed to `Prisma.Company_membersAvgAggregateOutputType`
 */
export type Company_membersAvgAggregateOutputType = Prisma.Company_membersAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_membersSumAggregateOutputType`
 */
export type Company_membersSumAggregateOutputType = Prisma.Company_membersSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_membersMinAggregateOutputType`
 */
export type Company_membersMinAggregateOutputType = Prisma.Company_membersMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_membersMaxAggregateOutputType`
 */
export type Company_membersMaxAggregateOutputType = Prisma.Company_membersMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_membersCountAggregateOutputType`
 */
export type Company_membersCountAggregateOutputType = Prisma.Company_membersCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_membersArgs`
 */
export type AggregateCompany_membersArgs = Prisma.AggregateCompany_membersArgs

/**
 * @deprecated Renamed to `Prisma.Company_membersAvgAggregateInputType`
 */
export type Company_membersAvgAggregateInputType = Prisma.Company_membersAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_membersSumAggregateInputType`
 */
export type Company_membersSumAggregateInputType = Prisma.Company_membersSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_membersMinAggregateInputType`
 */
export type Company_membersMinAggregateInputType = Prisma.Company_membersMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_membersMaxAggregateInputType`
 */
export type Company_membersMaxAggregateInputType = Prisma.Company_membersMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_membersCountAggregateInputType`
 */
export type Company_membersCountAggregateInputType = Prisma.Company_membersCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.company_membersSelect`
 */
export type company_membersSelect = Prisma.company_membersSelect

/**
 * @deprecated Renamed to `Prisma.company_membersInclude`
 */
export type company_membersInclude = Prisma.company_membersInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquecompany_membersArgs`
 */
export type FindUniquecompany_membersArgs = Prisma.FindUniquecompany_membersArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcompany_membersArgs`
 */
export type FindFirstcompany_membersArgs = Prisma.FindFirstcompany_membersArgs

/**
 * @deprecated Renamed to `Prisma.FindManycompany_membersArgs`
 */
export type FindManycompany_membersArgs = Prisma.FindManycompany_membersArgs

/**
 * @deprecated Renamed to `Prisma.company_membersCreateArgs`
 */
export type company_membersCreateArgs = Prisma.company_membersCreateArgs

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateArgs`
 */
export type company_membersUpdateArgs = Prisma.company_membersUpdateArgs

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateManyArgs`
 */
export type company_membersUpdateManyArgs = Prisma.company_membersUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.company_membersUpsertArgs`
 */
export type company_membersUpsertArgs = Prisma.company_membersUpsertArgs

/**
 * @deprecated Renamed to `Prisma.company_membersDeleteArgs`
 */
export type company_membersDeleteArgs = Prisma.company_membersDeleteArgs

/**
 * @deprecated Renamed to `Prisma.company_membersDeleteManyArgs`
 */
export type company_membersDeleteManyArgs = Prisma.company_membersDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_news`
 */
export type AggregateCompany_news = Prisma.AggregateCompany_news

/**
 * @deprecated Renamed to `Prisma.Company_newsAvgAggregateOutputType`
 */
export type Company_newsAvgAggregateOutputType = Prisma.Company_newsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_newsSumAggregateOutputType`
 */
export type Company_newsSumAggregateOutputType = Prisma.Company_newsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_newsMinAggregateOutputType`
 */
export type Company_newsMinAggregateOutputType = Prisma.Company_newsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_newsMaxAggregateOutputType`
 */
export type Company_newsMaxAggregateOutputType = Prisma.Company_newsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_newsCountAggregateOutputType`
 */
export type Company_newsCountAggregateOutputType = Prisma.Company_newsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_newsArgs`
 */
export type AggregateCompany_newsArgs = Prisma.AggregateCompany_newsArgs

/**
 * @deprecated Renamed to `Prisma.Company_newsAvgAggregateInputType`
 */
export type Company_newsAvgAggregateInputType = Prisma.Company_newsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_newsSumAggregateInputType`
 */
export type Company_newsSumAggregateInputType = Prisma.Company_newsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_newsMinAggregateInputType`
 */
export type Company_newsMinAggregateInputType = Prisma.Company_newsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_newsMaxAggregateInputType`
 */
export type Company_newsMaxAggregateInputType = Prisma.Company_newsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_newsCountAggregateInputType`
 */
export type Company_newsCountAggregateInputType = Prisma.Company_newsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.company_newsSelect`
 */
export type company_newsSelect = Prisma.company_newsSelect

/**
 * @deprecated Renamed to `Prisma.company_newsInclude`
 */
export type company_newsInclude = Prisma.company_newsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquecompany_newsArgs`
 */
export type FindUniquecompany_newsArgs = Prisma.FindUniquecompany_newsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcompany_newsArgs`
 */
export type FindFirstcompany_newsArgs = Prisma.FindFirstcompany_newsArgs

/**
 * @deprecated Renamed to `Prisma.FindManycompany_newsArgs`
 */
export type FindManycompany_newsArgs = Prisma.FindManycompany_newsArgs

/**
 * @deprecated Renamed to `Prisma.company_newsCreateArgs`
 */
export type company_newsCreateArgs = Prisma.company_newsCreateArgs

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateArgs`
 */
export type company_newsUpdateArgs = Prisma.company_newsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateManyArgs`
 */
export type company_newsUpdateManyArgs = Prisma.company_newsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.company_newsUpsertArgs`
 */
export type company_newsUpsertArgs = Prisma.company_newsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.company_newsDeleteArgs`
 */
export type company_newsDeleteArgs = Prisma.company_newsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.company_newsDeleteManyArgs`
 */
export type company_newsDeleteManyArgs = Prisma.company_newsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_types`
 */
export type AggregateCompany_types = Prisma.AggregateCompany_types

/**
 * @deprecated Renamed to `Prisma.Company_typesAvgAggregateOutputType`
 */
export type Company_typesAvgAggregateOutputType = Prisma.Company_typesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_typesSumAggregateOutputType`
 */
export type Company_typesSumAggregateOutputType = Prisma.Company_typesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_typesMinAggregateOutputType`
 */
export type Company_typesMinAggregateOutputType = Prisma.Company_typesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_typesMaxAggregateOutputType`
 */
export type Company_typesMaxAggregateOutputType = Prisma.Company_typesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Company_typesCountAggregateOutputType`
 */
export type Company_typesCountAggregateOutputType = Prisma.Company_typesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompany_typesArgs`
 */
export type AggregateCompany_typesArgs = Prisma.AggregateCompany_typesArgs

/**
 * @deprecated Renamed to `Prisma.Company_typesAvgAggregateInputType`
 */
export type Company_typesAvgAggregateInputType = Prisma.Company_typesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_typesSumAggregateInputType`
 */
export type Company_typesSumAggregateInputType = Prisma.Company_typesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_typesMinAggregateInputType`
 */
export type Company_typesMinAggregateInputType = Prisma.Company_typesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_typesMaxAggregateInputType`
 */
export type Company_typesMaxAggregateInputType = Prisma.Company_typesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Company_typesCountAggregateInputType`
 */
export type Company_typesCountAggregateInputType = Prisma.Company_typesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.company_typesSelect`
 */
export type company_typesSelect = Prisma.company_typesSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquecompany_typesArgs`
 */
export type FindUniquecompany_typesArgs = Prisma.FindUniquecompany_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcompany_typesArgs`
 */
export type FindFirstcompany_typesArgs = Prisma.FindFirstcompany_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindManycompany_typesArgs`
 */
export type FindManycompany_typesArgs = Prisma.FindManycompany_typesArgs

/**
 * @deprecated Renamed to `Prisma.company_typesCreateArgs`
 */
export type company_typesCreateArgs = Prisma.company_typesCreateArgs

/**
 * @deprecated Renamed to `Prisma.company_typesUpdateArgs`
 */
export type company_typesUpdateArgs = Prisma.company_typesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.company_typesUpdateManyArgs`
 */
export type company_typesUpdateManyArgs = Prisma.company_typesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.company_typesUpsertArgs`
 */
export type company_typesUpsertArgs = Prisma.company_typesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.company_typesDeleteArgs`
 */
export type company_typesDeleteArgs = Prisma.company_typesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.company_typesDeleteManyArgs`
 */
export type company_typesDeleteManyArgs = Prisma.company_typesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateDemodays`
 */
export type AggregateDemodays = Prisma.AggregateDemodays

/**
 * @deprecated Renamed to `Prisma.DemodaysAvgAggregateOutputType`
 */
export type DemodaysAvgAggregateOutputType = Prisma.DemodaysAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DemodaysSumAggregateOutputType`
 */
export type DemodaysSumAggregateOutputType = Prisma.DemodaysSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DemodaysMinAggregateOutputType`
 */
export type DemodaysMinAggregateOutputType = Prisma.DemodaysMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DemodaysMaxAggregateOutputType`
 */
export type DemodaysMaxAggregateOutputType = Prisma.DemodaysMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DemodaysCountAggregateOutputType`
 */
export type DemodaysCountAggregateOutputType = Prisma.DemodaysCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateDemodaysArgs`
 */
export type AggregateDemodaysArgs = Prisma.AggregateDemodaysArgs

/**
 * @deprecated Renamed to `Prisma.DemodaysAvgAggregateInputType`
 */
export type DemodaysAvgAggregateInputType = Prisma.DemodaysAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DemodaysSumAggregateInputType`
 */
export type DemodaysSumAggregateInputType = Prisma.DemodaysSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DemodaysMinAggregateInputType`
 */
export type DemodaysMinAggregateInputType = Prisma.DemodaysMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DemodaysMaxAggregateInputType`
 */
export type DemodaysMaxAggregateInputType = Prisma.DemodaysMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DemodaysCountAggregateInputType`
 */
export type DemodaysCountAggregateInputType = Prisma.DemodaysCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.demodaysSelect`
 */
export type demodaysSelect = Prisma.demodaysSelect

/**
 * @deprecated Renamed to `Prisma.demodaysInclude`
 */
export type demodaysInclude = Prisma.demodaysInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquedemodaysArgs`
 */
export type FindUniquedemodaysArgs = Prisma.FindUniquedemodaysArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstdemodaysArgs`
 */
export type FindFirstdemodaysArgs = Prisma.FindFirstdemodaysArgs

/**
 * @deprecated Renamed to `Prisma.FindManydemodaysArgs`
 */
export type FindManydemodaysArgs = Prisma.FindManydemodaysArgs

/**
 * @deprecated Renamed to `Prisma.demodaysCreateArgs`
 */
export type demodaysCreateArgs = Prisma.demodaysCreateArgs

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateArgs`
 */
export type demodaysUpdateArgs = Prisma.demodaysUpdateArgs

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateManyArgs`
 */
export type demodaysUpdateManyArgs = Prisma.demodaysUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.demodaysUpsertArgs`
 */
export type demodaysUpsertArgs = Prisma.demodaysUpsertArgs

/**
 * @deprecated Renamed to `Prisma.demodaysDeleteArgs`
 */
export type demodaysDeleteArgs = Prisma.demodaysDeleteArgs

/**
 * @deprecated Renamed to `Prisma.demodaysDeleteManyArgs`
 */
export type demodaysDeleteManyArgs = Prisma.demodaysDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateDocument_types`
 */
export type AggregateDocument_types = Prisma.AggregateDocument_types

/**
 * @deprecated Renamed to `Prisma.Document_typesAvgAggregateOutputType`
 */
export type Document_typesAvgAggregateOutputType = Prisma.Document_typesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Document_typesSumAggregateOutputType`
 */
export type Document_typesSumAggregateOutputType = Prisma.Document_typesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Document_typesMinAggregateOutputType`
 */
export type Document_typesMinAggregateOutputType = Prisma.Document_typesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Document_typesMaxAggregateOutputType`
 */
export type Document_typesMaxAggregateOutputType = Prisma.Document_typesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Document_typesCountAggregateOutputType`
 */
export type Document_typesCountAggregateOutputType = Prisma.Document_typesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateDocument_typesArgs`
 */
export type AggregateDocument_typesArgs = Prisma.AggregateDocument_typesArgs

/**
 * @deprecated Renamed to `Prisma.Document_typesAvgAggregateInputType`
 */
export type Document_typesAvgAggregateInputType = Prisma.Document_typesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Document_typesSumAggregateInputType`
 */
export type Document_typesSumAggregateInputType = Prisma.Document_typesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Document_typesMinAggregateInputType`
 */
export type Document_typesMinAggregateInputType = Prisma.Document_typesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Document_typesMaxAggregateInputType`
 */
export type Document_typesMaxAggregateInputType = Prisma.Document_typesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Document_typesCountAggregateInputType`
 */
export type Document_typesCountAggregateInputType = Prisma.Document_typesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.document_typesSelect`
 */
export type document_typesSelect = Prisma.document_typesSelect

/**
 * @deprecated Renamed to `Prisma.document_typesInclude`
 */
export type document_typesInclude = Prisma.document_typesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquedocument_typesArgs`
 */
export type FindUniquedocument_typesArgs = Prisma.FindUniquedocument_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstdocument_typesArgs`
 */
export type FindFirstdocument_typesArgs = Prisma.FindFirstdocument_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindManydocument_typesArgs`
 */
export type FindManydocument_typesArgs = Prisma.FindManydocument_typesArgs

/**
 * @deprecated Renamed to `Prisma.document_typesCreateArgs`
 */
export type document_typesCreateArgs = Prisma.document_typesCreateArgs

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateArgs`
 */
export type document_typesUpdateArgs = Prisma.document_typesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateManyArgs`
 */
export type document_typesUpdateManyArgs = Prisma.document_typesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.document_typesUpsertArgs`
 */
export type document_typesUpsertArgs = Prisma.document_typesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.document_typesDeleteArgs`
 */
export type document_typesDeleteArgs = Prisma.document_typesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.document_typesDeleteManyArgs`
 */
export type document_typesDeleteManyArgs = Prisma.document_typesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateEmail_auth`
 */
export type AggregateEmail_auth = Prisma.AggregateEmail_auth

/**
 * @deprecated Renamed to `Prisma.Email_authAvgAggregateOutputType`
 */
export type Email_authAvgAggregateOutputType = Prisma.Email_authAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Email_authSumAggregateOutputType`
 */
export type Email_authSumAggregateOutputType = Prisma.Email_authSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Email_authMinAggregateOutputType`
 */
export type Email_authMinAggregateOutputType = Prisma.Email_authMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Email_authMaxAggregateOutputType`
 */
export type Email_authMaxAggregateOutputType = Prisma.Email_authMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Email_authCountAggregateOutputType`
 */
export type Email_authCountAggregateOutputType = Prisma.Email_authCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateEmail_authArgs`
 */
export type AggregateEmail_authArgs = Prisma.AggregateEmail_authArgs

/**
 * @deprecated Renamed to `Prisma.Email_authAvgAggregateInputType`
 */
export type Email_authAvgAggregateInputType = Prisma.Email_authAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Email_authSumAggregateInputType`
 */
export type Email_authSumAggregateInputType = Prisma.Email_authSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Email_authMinAggregateInputType`
 */
export type Email_authMinAggregateInputType = Prisma.Email_authMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Email_authMaxAggregateInputType`
 */
export type Email_authMaxAggregateInputType = Prisma.Email_authMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Email_authCountAggregateInputType`
 */
export type Email_authCountAggregateInputType = Prisma.Email_authCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.email_authSelect`
 */
export type email_authSelect = Prisma.email_authSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueemail_authArgs`
 */
export type FindUniqueemail_authArgs = Prisma.FindUniqueemail_authArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstemail_authArgs`
 */
export type FindFirstemail_authArgs = Prisma.FindFirstemail_authArgs

/**
 * @deprecated Renamed to `Prisma.FindManyemail_authArgs`
 */
export type FindManyemail_authArgs = Prisma.FindManyemail_authArgs

/**
 * @deprecated Renamed to `Prisma.email_authCreateArgs`
 */
export type email_authCreateArgs = Prisma.email_authCreateArgs

/**
 * @deprecated Renamed to `Prisma.email_authUpdateArgs`
 */
export type email_authUpdateArgs = Prisma.email_authUpdateArgs

/**
 * @deprecated Renamed to `Prisma.email_authUpdateManyArgs`
 */
export type email_authUpdateManyArgs = Prisma.email_authUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.email_authUpsertArgs`
 */
export type email_authUpsertArgs = Prisma.email_authUpsertArgs

/**
 * @deprecated Renamed to `Prisma.email_authDeleteArgs`
 */
export type email_authDeleteArgs = Prisma.email_authDeleteArgs

/**
 * @deprecated Renamed to `Prisma.email_authDeleteManyArgs`
 */
export type email_authDeleteManyArgs = Prisma.email_authDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateInvested_from`
 */
export type AggregateInvested_from = Prisma.AggregateInvested_from

/**
 * @deprecated Renamed to `Prisma.Invested_fromAvgAggregateOutputType`
 */
export type Invested_fromAvgAggregateOutputType = Prisma.Invested_fromAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromSumAggregateOutputType`
 */
export type Invested_fromSumAggregateOutputType = Prisma.Invested_fromSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromMinAggregateOutputType`
 */
export type Invested_fromMinAggregateOutputType = Prisma.Invested_fromMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromMaxAggregateOutputType`
 */
export type Invested_fromMaxAggregateOutputType = Prisma.Invested_fromMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromCountAggregateOutputType`
 */
export type Invested_fromCountAggregateOutputType = Prisma.Invested_fromCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateInvested_fromArgs`
 */
export type AggregateInvested_fromArgs = Prisma.AggregateInvested_fromArgs

/**
 * @deprecated Renamed to `Prisma.Invested_fromAvgAggregateInputType`
 */
export type Invested_fromAvgAggregateInputType = Prisma.Invested_fromAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromSumAggregateInputType`
 */
export type Invested_fromSumAggregateInputType = Prisma.Invested_fromSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromMinAggregateInputType`
 */
export type Invested_fromMinAggregateInputType = Prisma.Invested_fromMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromMaxAggregateInputType`
 */
export type Invested_fromMaxAggregateInputType = Prisma.Invested_fromMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_fromCountAggregateInputType`
 */
export type Invested_fromCountAggregateInputType = Prisma.Invested_fromCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.invested_fromSelect`
 */
export type invested_fromSelect = Prisma.invested_fromSelect

/**
 * @deprecated Renamed to `Prisma.invested_fromInclude`
 */
export type invested_fromInclude = Prisma.invested_fromInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueinvested_fromArgs`
 */
export type FindUniqueinvested_fromArgs = Prisma.FindUniqueinvested_fromArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstinvested_fromArgs`
 */
export type FindFirstinvested_fromArgs = Prisma.FindFirstinvested_fromArgs

/**
 * @deprecated Renamed to `Prisma.FindManyinvested_fromArgs`
 */
export type FindManyinvested_fromArgs = Prisma.FindManyinvested_fromArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateArgs`
 */
export type invested_fromCreateArgs = Prisma.invested_fromCreateArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateArgs`
 */
export type invested_fromUpdateArgs = Prisma.invested_fromUpdateArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyArgs`
 */
export type invested_fromUpdateManyArgs = Prisma.invested_fromUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromUpsertArgs`
 */
export type invested_fromUpsertArgs = Prisma.invested_fromUpsertArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromDeleteArgs`
 */
export type invested_fromDeleteArgs = Prisma.invested_fromDeleteArgs

/**
 * @deprecated Renamed to `Prisma.invested_fromDeleteManyArgs`
 */
export type invested_fromDeleteManyArgs = Prisma.invested_fromDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateInvested_to`
 */
export type AggregateInvested_to = Prisma.AggregateInvested_to

/**
 * @deprecated Renamed to `Prisma.Invested_toAvgAggregateOutputType`
 */
export type Invested_toAvgAggregateOutputType = Prisma.Invested_toAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_toSumAggregateOutputType`
 */
export type Invested_toSumAggregateOutputType = Prisma.Invested_toSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_toMinAggregateOutputType`
 */
export type Invested_toMinAggregateOutputType = Prisma.Invested_toMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_toMaxAggregateOutputType`
 */
export type Invested_toMaxAggregateOutputType = Prisma.Invested_toMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Invested_toCountAggregateOutputType`
 */
export type Invested_toCountAggregateOutputType = Prisma.Invested_toCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateInvested_toArgs`
 */
export type AggregateInvested_toArgs = Prisma.AggregateInvested_toArgs

/**
 * @deprecated Renamed to `Prisma.Invested_toAvgAggregateInputType`
 */
export type Invested_toAvgAggregateInputType = Prisma.Invested_toAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_toSumAggregateInputType`
 */
export type Invested_toSumAggregateInputType = Prisma.Invested_toSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_toMinAggregateInputType`
 */
export type Invested_toMinAggregateInputType = Prisma.Invested_toMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_toMaxAggregateInputType`
 */
export type Invested_toMaxAggregateInputType = Prisma.Invested_toMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Invested_toCountAggregateInputType`
 */
export type Invested_toCountAggregateInputType = Prisma.Invested_toCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.invested_toSelect`
 */
export type invested_toSelect = Prisma.invested_toSelect

/**
 * @deprecated Renamed to `Prisma.invested_toInclude`
 */
export type invested_toInclude = Prisma.invested_toInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueinvested_toArgs`
 */
export type FindUniqueinvested_toArgs = Prisma.FindUniqueinvested_toArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstinvested_toArgs`
 */
export type FindFirstinvested_toArgs = Prisma.FindFirstinvested_toArgs

/**
 * @deprecated Renamed to `Prisma.FindManyinvested_toArgs`
 */
export type FindManyinvested_toArgs = Prisma.FindManyinvested_toArgs

/**
 * @deprecated Renamed to `Prisma.invested_toCreateArgs`
 */
export type invested_toCreateArgs = Prisma.invested_toCreateArgs

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateArgs`
 */
export type invested_toUpdateArgs = Prisma.invested_toUpdateArgs

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyArgs`
 */
export type invested_toUpdateManyArgs = Prisma.invested_toUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.invested_toUpsertArgs`
 */
export type invested_toUpsertArgs = Prisma.invested_toUpsertArgs

/**
 * @deprecated Renamed to `Prisma.invested_toDeleteArgs`
 */
export type invested_toDeleteArgs = Prisma.invested_toDeleteArgs

/**
 * @deprecated Renamed to `Prisma.invested_toDeleteManyArgs`
 */
export type invested_toDeleteManyArgs = Prisma.invested_toDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_funds`
 */
export type AggregateInvestment_funds = Prisma.AggregateInvestment_funds

/**
 * @deprecated Renamed to `Prisma.Investment_fundsAvgAggregateOutputType`
 */
export type Investment_fundsAvgAggregateOutputType = Prisma.Investment_fundsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsSumAggregateOutputType`
 */
export type Investment_fundsSumAggregateOutputType = Prisma.Investment_fundsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsMinAggregateOutputType`
 */
export type Investment_fundsMinAggregateOutputType = Prisma.Investment_fundsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsMaxAggregateOutputType`
 */
export type Investment_fundsMaxAggregateOutputType = Prisma.Investment_fundsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsCountAggregateOutputType`
 */
export type Investment_fundsCountAggregateOutputType = Prisma.Investment_fundsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_fundsArgs`
 */
export type AggregateInvestment_fundsArgs = Prisma.AggregateInvestment_fundsArgs

/**
 * @deprecated Renamed to `Prisma.Investment_fundsAvgAggregateInputType`
 */
export type Investment_fundsAvgAggregateInputType = Prisma.Investment_fundsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsSumAggregateInputType`
 */
export type Investment_fundsSumAggregateInputType = Prisma.Investment_fundsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsMinAggregateInputType`
 */
export type Investment_fundsMinAggregateInputType = Prisma.Investment_fundsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsMaxAggregateInputType`
 */
export type Investment_fundsMaxAggregateInputType = Prisma.Investment_fundsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_fundsCountAggregateInputType`
 */
export type Investment_fundsCountAggregateInputType = Prisma.Investment_fundsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.investment_fundsSelect`
 */
export type investment_fundsSelect = Prisma.investment_fundsSelect

/**
 * @deprecated Renamed to `Prisma.investment_fundsInclude`
 */
export type investment_fundsInclude = Prisma.investment_fundsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueinvestment_fundsArgs`
 */
export type FindUniqueinvestment_fundsArgs = Prisma.FindUniqueinvestment_fundsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstinvestment_fundsArgs`
 */
export type FindFirstinvestment_fundsArgs = Prisma.FindFirstinvestment_fundsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyinvestment_fundsArgs`
 */
export type FindManyinvestment_fundsArgs = Prisma.FindManyinvestment_fundsArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsCreateArgs`
 */
export type investment_fundsCreateArgs = Prisma.investment_fundsCreateArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateArgs`
 */
export type investment_fundsUpdateArgs = Prisma.investment_fundsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateManyArgs`
 */
export type investment_fundsUpdateManyArgs = Prisma.investment_fundsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpsertArgs`
 */
export type investment_fundsUpsertArgs = Prisma.investment_fundsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsDeleteArgs`
 */
export type investment_fundsDeleteArgs = Prisma.investment_fundsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.investment_fundsDeleteManyArgs`
 */
export type investment_fundsDeleteManyArgs = Prisma.investment_fundsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_portfolio`
 */
export type AggregateInvestment_portfolio = Prisma.AggregateInvestment_portfolio

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioAvgAggregateOutputType`
 */
export type Investment_portfolioAvgAggregateOutputType = Prisma.Investment_portfolioAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioSumAggregateOutputType`
 */
export type Investment_portfolioSumAggregateOutputType = Prisma.Investment_portfolioSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioMinAggregateOutputType`
 */
export type Investment_portfolioMinAggregateOutputType = Prisma.Investment_portfolioMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioMaxAggregateOutputType`
 */
export type Investment_portfolioMaxAggregateOutputType = Prisma.Investment_portfolioMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioCountAggregateOutputType`
 */
export type Investment_portfolioCountAggregateOutputType = Prisma.Investment_portfolioCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_portfolioArgs`
 */
export type AggregateInvestment_portfolioArgs = Prisma.AggregateInvestment_portfolioArgs

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioAvgAggregateInputType`
 */
export type Investment_portfolioAvgAggregateInputType = Prisma.Investment_portfolioAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioSumAggregateInputType`
 */
export type Investment_portfolioSumAggregateInputType = Prisma.Investment_portfolioSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioMinAggregateInputType`
 */
export type Investment_portfolioMinAggregateInputType = Prisma.Investment_portfolioMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioMaxAggregateInputType`
 */
export type Investment_portfolioMaxAggregateInputType = Prisma.Investment_portfolioMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioCountAggregateInputType`
 */
export type Investment_portfolioCountAggregateInputType = Prisma.Investment_portfolioCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.investment_portfolioSelect`
 */
export type investment_portfolioSelect = Prisma.investment_portfolioSelect

/**
 * @deprecated Renamed to `Prisma.investment_portfolioInclude`
 */
export type investment_portfolioInclude = Prisma.investment_portfolioInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueinvestment_portfolioArgs`
 */
export type FindUniqueinvestment_portfolioArgs = Prisma.FindUniqueinvestment_portfolioArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstinvestment_portfolioArgs`
 */
export type FindFirstinvestment_portfolioArgs = Prisma.FindFirstinvestment_portfolioArgs

/**
 * @deprecated Renamed to `Prisma.FindManyinvestment_portfolioArgs`
 */
export type FindManyinvestment_portfolioArgs = Prisma.FindManyinvestment_portfolioArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioCreateArgs`
 */
export type investment_portfolioCreateArgs = Prisma.investment_portfolioCreateArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateArgs`
 */
export type investment_portfolioUpdateArgs = Prisma.investment_portfolioUpdateArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateManyArgs`
 */
export type investment_portfolioUpdateManyArgs = Prisma.investment_portfolioUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpsertArgs`
 */
export type investment_portfolioUpsertArgs = Prisma.investment_portfolioUpsertArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioDeleteArgs`
 */
export type investment_portfolioDeleteArgs = Prisma.investment_portfolioDeleteArgs

/**
 * @deprecated Renamed to `Prisma.investment_portfolioDeleteManyArgs`
 */
export type investment_portfolioDeleteManyArgs = Prisma.investment_portfolioDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_series`
 */
export type AggregateInvestment_series = Prisma.AggregateInvestment_series

/**
 * @deprecated Renamed to `Prisma.Investment_seriesAvgAggregateOutputType`
 */
export type Investment_seriesAvgAggregateOutputType = Prisma.Investment_seriesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesSumAggregateOutputType`
 */
export type Investment_seriesSumAggregateOutputType = Prisma.Investment_seriesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesMinAggregateOutputType`
 */
export type Investment_seriesMinAggregateOutputType = Prisma.Investment_seriesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesMaxAggregateOutputType`
 */
export type Investment_seriesMaxAggregateOutputType = Prisma.Investment_seriesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesCountAggregateOutputType`
 */
export type Investment_seriesCountAggregateOutputType = Prisma.Investment_seriesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateInvestment_seriesArgs`
 */
export type AggregateInvestment_seriesArgs = Prisma.AggregateInvestment_seriesArgs

/**
 * @deprecated Renamed to `Prisma.Investment_seriesAvgAggregateInputType`
 */
export type Investment_seriesAvgAggregateInputType = Prisma.Investment_seriesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesSumAggregateInputType`
 */
export type Investment_seriesSumAggregateInputType = Prisma.Investment_seriesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesMinAggregateInputType`
 */
export type Investment_seriesMinAggregateInputType = Prisma.Investment_seriesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesMaxAggregateInputType`
 */
export type Investment_seriesMaxAggregateInputType = Prisma.Investment_seriesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Investment_seriesCountAggregateInputType`
 */
export type Investment_seriesCountAggregateInputType = Prisma.Investment_seriesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.investment_seriesSelect`
 */
export type investment_seriesSelect = Prisma.investment_seriesSelect

/**
 * @deprecated Renamed to `Prisma.investment_seriesInclude`
 */
export type investment_seriesInclude = Prisma.investment_seriesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueinvestment_seriesArgs`
 */
export type FindUniqueinvestment_seriesArgs = Prisma.FindUniqueinvestment_seriesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstinvestment_seriesArgs`
 */
export type FindFirstinvestment_seriesArgs = Prisma.FindFirstinvestment_seriesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyinvestment_seriesArgs`
 */
export type FindManyinvestment_seriesArgs = Prisma.FindManyinvestment_seriesArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateArgs`
 */
export type investment_seriesCreateArgs = Prisma.investment_seriesCreateArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateArgs`
 */
export type investment_seriesUpdateArgs = Prisma.investment_seriesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateManyArgs`
 */
export type investment_seriesUpdateManyArgs = Prisma.investment_seriesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpsertArgs`
 */
export type investment_seriesUpsertArgs = Prisma.investment_seriesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesDeleteArgs`
 */
export type investment_seriesDeleteArgs = Prisma.investment_seriesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.investment_seriesDeleteManyArgs`
 */
export type investment_seriesDeleteManyArgs = Prisma.investment_seriesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateIR_requests`
 */
export type AggregateIR_requests = Prisma.AggregateIR_requests

/**
 * @deprecated Renamed to `Prisma.IR_requestsAvgAggregateOutputType`
 */
export type IR_requestsAvgAggregateOutputType = Prisma.IR_requestsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsSumAggregateOutputType`
 */
export type IR_requestsSumAggregateOutputType = Prisma.IR_requestsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsMinAggregateOutputType`
 */
export type IR_requestsMinAggregateOutputType = Prisma.IR_requestsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsMaxAggregateOutputType`
 */
export type IR_requestsMaxAggregateOutputType = Prisma.IR_requestsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsCountAggregateOutputType`
 */
export type IR_requestsCountAggregateOutputType = Prisma.IR_requestsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateIR_requestsArgs`
 */
export type AggregateIR_requestsArgs = Prisma.AggregateIR_requestsArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsAvgAggregateInputType`
 */
export type IR_requestsAvgAggregateInputType = Prisma.IR_requestsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsSumAggregateInputType`
 */
export type IR_requestsSumAggregateInputType = Prisma.IR_requestsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsMinAggregateInputType`
 */
export type IR_requestsMinAggregateInputType = Prisma.IR_requestsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsMaxAggregateInputType`
 */
export type IR_requestsMaxAggregateInputType = Prisma.IR_requestsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsCountAggregateInputType`
 */
export type IR_requestsCountAggregateInputType = Prisma.IR_requestsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.IR_requestsSelect`
 */
export type IR_requestsSelect = Prisma.IR_requestsSelect

/**
 * @deprecated Renamed to `Prisma.IR_requestsInclude`
 */
export type IR_requestsInclude = Prisma.IR_requestsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueIR_requestsArgs`
 */
export type FindUniqueIR_requestsArgs = Prisma.FindUniqueIR_requestsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstIR_requestsArgs`
 */
export type FindFirstIR_requestsArgs = Prisma.FindFirstIR_requestsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyIR_requestsArgs`
 */
export type FindManyIR_requestsArgs = Prisma.FindManyIR_requestsArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateArgs`
 */
export type IR_requestsCreateArgs = Prisma.IR_requestsCreateArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateArgs`
 */
export type IR_requestsUpdateArgs = Prisma.IR_requestsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyArgs`
 */
export type IR_requestsUpdateManyArgs = Prisma.IR_requestsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpsertArgs`
 */
export type IR_requestsUpsertArgs = Prisma.IR_requestsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsDeleteArgs`
 */
export type IR_requestsDeleteArgs = Prisma.IR_requestsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.IR_requestsDeleteManyArgs`
 */
export type IR_requestsDeleteManyArgs = Prisma.IR_requestsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateParticipants`
 */
export type AggregateParticipants = Prisma.AggregateParticipants

/**
 * @deprecated Renamed to `Prisma.ParticipantsAvgAggregateOutputType`
 */
export type ParticipantsAvgAggregateOutputType = Prisma.ParticipantsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsSumAggregateOutputType`
 */
export type ParticipantsSumAggregateOutputType = Prisma.ParticipantsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsMinAggregateOutputType`
 */
export type ParticipantsMinAggregateOutputType = Prisma.ParticipantsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsMaxAggregateOutputType`
 */
export type ParticipantsMaxAggregateOutputType = Prisma.ParticipantsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsCountAggregateOutputType`
 */
export type ParticipantsCountAggregateOutputType = Prisma.ParticipantsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateParticipantsArgs`
 */
export type AggregateParticipantsArgs = Prisma.AggregateParticipantsArgs

/**
 * @deprecated Renamed to `Prisma.ParticipantsAvgAggregateInputType`
 */
export type ParticipantsAvgAggregateInputType = Prisma.ParticipantsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsSumAggregateInputType`
 */
export type ParticipantsSumAggregateInputType = Prisma.ParticipantsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsMinAggregateInputType`
 */
export type ParticipantsMinAggregateInputType = Prisma.ParticipantsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsMaxAggregateInputType`
 */
export type ParticipantsMaxAggregateInputType = Prisma.ParticipantsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ParticipantsCountAggregateInputType`
 */
export type ParticipantsCountAggregateInputType = Prisma.ParticipantsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.participantsSelect`
 */
export type participantsSelect = Prisma.participantsSelect

/**
 * @deprecated Renamed to `Prisma.participantsInclude`
 */
export type participantsInclude = Prisma.participantsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueparticipantsArgs`
 */
export type FindUniqueparticipantsArgs = Prisma.FindUniqueparticipantsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstparticipantsArgs`
 */
export type FindFirstparticipantsArgs = Prisma.FindFirstparticipantsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyparticipantsArgs`
 */
export type FindManyparticipantsArgs = Prisma.FindManyparticipantsArgs

/**
 * @deprecated Renamed to `Prisma.participantsCreateArgs`
 */
export type participantsCreateArgs = Prisma.participantsCreateArgs

/**
 * @deprecated Renamed to `Prisma.participantsUpdateArgs`
 */
export type participantsUpdateArgs = Prisma.participantsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyArgs`
 */
export type participantsUpdateManyArgs = Prisma.participantsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.participantsUpsertArgs`
 */
export type participantsUpsertArgs = Prisma.participantsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.participantsDeleteArgs`
 */
export type participantsDeleteArgs = Prisma.participantsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.participantsDeleteManyArgs`
 */
export type participantsDeleteManyArgs = Prisma.participantsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePartner_infos`
 */
export type AggregatePartner_infos = Prisma.AggregatePartner_infos

/**
 * @deprecated Renamed to `Prisma.Partner_infosAvgAggregateOutputType`
 */
export type Partner_infosAvgAggregateOutputType = Prisma.Partner_infosAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosSumAggregateOutputType`
 */
export type Partner_infosSumAggregateOutputType = Prisma.Partner_infosSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosMinAggregateOutputType`
 */
export type Partner_infosMinAggregateOutputType = Prisma.Partner_infosMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosMaxAggregateOutputType`
 */
export type Partner_infosMaxAggregateOutputType = Prisma.Partner_infosMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosCountAggregateOutputType`
 */
export type Partner_infosCountAggregateOutputType = Prisma.Partner_infosCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePartner_infosArgs`
 */
export type AggregatePartner_infosArgs = Prisma.AggregatePartner_infosArgs

/**
 * @deprecated Renamed to `Prisma.Partner_infosAvgAggregateInputType`
 */
export type Partner_infosAvgAggregateInputType = Prisma.Partner_infosAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosSumAggregateInputType`
 */
export type Partner_infosSumAggregateInputType = Prisma.Partner_infosSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosMinAggregateInputType`
 */
export type Partner_infosMinAggregateInputType = Prisma.Partner_infosMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosMaxAggregateInputType`
 */
export type Partner_infosMaxAggregateInputType = Prisma.Partner_infosMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_infosCountAggregateInputType`
 */
export type Partner_infosCountAggregateInputType = Prisma.Partner_infosCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.partner_infosSelect`
 */
export type partner_infosSelect = Prisma.partner_infosSelect

/**
 * @deprecated Renamed to `Prisma.partner_infosInclude`
 */
export type partner_infosInclude = Prisma.partner_infosInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquepartner_infosArgs`
 */
export type FindUniquepartner_infosArgs = Prisma.FindUniquepartner_infosArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstpartner_infosArgs`
 */
export type FindFirstpartner_infosArgs = Prisma.FindFirstpartner_infosArgs

/**
 * @deprecated Renamed to `Prisma.FindManypartner_infosArgs`
 */
export type FindManypartner_infosArgs = Prisma.FindManypartner_infosArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateArgs`
 */
export type partner_infosCreateArgs = Prisma.partner_infosCreateArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateArgs`
 */
export type partner_infosUpdateArgs = Prisma.partner_infosUpdateArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyArgs`
 */
export type partner_infosUpdateManyArgs = Prisma.partner_infosUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertArgs`
 */
export type partner_infosUpsertArgs = Prisma.partner_infosUpsertArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosDeleteArgs`
 */
export type partner_infosDeleteArgs = Prisma.partner_infosDeleteArgs

/**
 * @deprecated Renamed to `Prisma.partner_infosDeleteManyArgs`
 */
export type partner_infosDeleteManyArgs = Prisma.partner_infosDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePartner_likes`
 */
export type AggregatePartner_likes = Prisma.AggregatePartner_likes

/**
 * @deprecated Renamed to `Prisma.Partner_likesAvgAggregateOutputType`
 */
export type Partner_likesAvgAggregateOutputType = Prisma.Partner_likesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesSumAggregateOutputType`
 */
export type Partner_likesSumAggregateOutputType = Prisma.Partner_likesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesMinAggregateOutputType`
 */
export type Partner_likesMinAggregateOutputType = Prisma.Partner_likesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesMaxAggregateOutputType`
 */
export type Partner_likesMaxAggregateOutputType = Prisma.Partner_likesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesCountAggregateOutputType`
 */
export type Partner_likesCountAggregateOutputType = Prisma.Partner_likesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePartner_likesArgs`
 */
export type AggregatePartner_likesArgs = Prisma.AggregatePartner_likesArgs

/**
 * @deprecated Renamed to `Prisma.Partner_likesAvgAggregateInputType`
 */
export type Partner_likesAvgAggregateInputType = Prisma.Partner_likesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesSumAggregateInputType`
 */
export type Partner_likesSumAggregateInputType = Prisma.Partner_likesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesMinAggregateInputType`
 */
export type Partner_likesMinAggregateInputType = Prisma.Partner_likesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesMaxAggregateInputType`
 */
export type Partner_likesMaxAggregateInputType = Prisma.Partner_likesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Partner_likesCountAggregateInputType`
 */
export type Partner_likesCountAggregateInputType = Prisma.Partner_likesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.partner_likesSelect`
 */
export type partner_likesSelect = Prisma.partner_likesSelect

/**
 * @deprecated Renamed to `Prisma.partner_likesInclude`
 */
export type partner_likesInclude = Prisma.partner_likesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquepartner_likesArgs`
 */
export type FindUniquepartner_likesArgs = Prisma.FindUniquepartner_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstpartner_likesArgs`
 */
export type FindFirstpartner_likesArgs = Prisma.FindFirstpartner_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindManypartner_likesArgs`
 */
export type FindManypartner_likesArgs = Prisma.FindManypartner_likesArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateArgs`
 */
export type partner_likesCreateArgs = Prisma.partner_likesCreateArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateArgs`
 */
export type partner_likesUpdateArgs = Prisma.partner_likesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyArgs`
 */
export type partner_likesUpdateManyArgs = Prisma.partner_likesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesUpsertArgs`
 */
export type partner_likesUpsertArgs = Prisma.partner_likesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesDeleteArgs`
 */
export type partner_likesDeleteArgs = Prisma.partner_likesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.partner_likesDeleteManyArgs`
 */
export type partner_likesDeleteManyArgs = Prisma.partner_likesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePhone_auth`
 */
export type AggregatePhone_auth = Prisma.AggregatePhone_auth

/**
 * @deprecated Renamed to `Prisma.Phone_authAvgAggregateOutputType`
 */
export type Phone_authAvgAggregateOutputType = Prisma.Phone_authAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Phone_authSumAggregateOutputType`
 */
export type Phone_authSumAggregateOutputType = Prisma.Phone_authSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Phone_authMinAggregateOutputType`
 */
export type Phone_authMinAggregateOutputType = Prisma.Phone_authMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Phone_authMaxAggregateOutputType`
 */
export type Phone_authMaxAggregateOutputType = Prisma.Phone_authMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Phone_authCountAggregateOutputType`
 */
export type Phone_authCountAggregateOutputType = Prisma.Phone_authCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePhone_authArgs`
 */
export type AggregatePhone_authArgs = Prisma.AggregatePhone_authArgs

/**
 * @deprecated Renamed to `Prisma.Phone_authAvgAggregateInputType`
 */
export type Phone_authAvgAggregateInputType = Prisma.Phone_authAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Phone_authSumAggregateInputType`
 */
export type Phone_authSumAggregateInputType = Prisma.Phone_authSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Phone_authMinAggregateInputType`
 */
export type Phone_authMinAggregateInputType = Prisma.Phone_authMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Phone_authMaxAggregateInputType`
 */
export type Phone_authMaxAggregateInputType = Prisma.Phone_authMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Phone_authCountAggregateInputType`
 */
export type Phone_authCountAggregateInputType = Prisma.Phone_authCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.phone_authSelect`
 */
export type phone_authSelect = Prisma.phone_authSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquephone_authArgs`
 */
export type FindUniquephone_authArgs = Prisma.FindUniquephone_authArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstphone_authArgs`
 */
export type FindFirstphone_authArgs = Prisma.FindFirstphone_authArgs

/**
 * @deprecated Renamed to `Prisma.FindManyphone_authArgs`
 */
export type FindManyphone_authArgs = Prisma.FindManyphone_authArgs

/**
 * @deprecated Renamed to `Prisma.phone_authCreateArgs`
 */
export type phone_authCreateArgs = Prisma.phone_authCreateArgs

/**
 * @deprecated Renamed to `Prisma.phone_authUpdateArgs`
 */
export type phone_authUpdateArgs = Prisma.phone_authUpdateArgs

/**
 * @deprecated Renamed to `Prisma.phone_authUpdateManyArgs`
 */
export type phone_authUpdateManyArgs = Prisma.phone_authUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.phone_authUpsertArgs`
 */
export type phone_authUpsertArgs = Prisma.phone_authUpsertArgs

/**
 * @deprecated Renamed to `Prisma.phone_authDeleteArgs`
 */
export type phone_authDeleteArgs = Prisma.phone_authDeleteArgs

/**
 * @deprecated Renamed to `Prisma.phone_authDeleteManyArgs`
 */
export type phone_authDeleteManyArgs = Prisma.phone_authDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProject_images`
 */
export type AggregateProject_images = Prisma.AggregateProject_images

/**
 * @deprecated Renamed to `Prisma.Project_imagesAvgAggregateOutputType`
 */
export type Project_imagesAvgAggregateOutputType = Prisma.Project_imagesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesSumAggregateOutputType`
 */
export type Project_imagesSumAggregateOutputType = Prisma.Project_imagesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesMinAggregateOutputType`
 */
export type Project_imagesMinAggregateOutputType = Prisma.Project_imagesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesMaxAggregateOutputType`
 */
export type Project_imagesMaxAggregateOutputType = Prisma.Project_imagesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesCountAggregateOutputType`
 */
export type Project_imagesCountAggregateOutputType = Prisma.Project_imagesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProject_imagesArgs`
 */
export type AggregateProject_imagesArgs = Prisma.AggregateProject_imagesArgs

/**
 * @deprecated Renamed to `Prisma.Project_imagesAvgAggregateInputType`
 */
export type Project_imagesAvgAggregateInputType = Prisma.Project_imagesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesSumAggregateInputType`
 */
export type Project_imagesSumAggregateInputType = Prisma.Project_imagesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesMinAggregateInputType`
 */
export type Project_imagesMinAggregateInputType = Prisma.Project_imagesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesMaxAggregateInputType`
 */
export type Project_imagesMaxAggregateInputType = Prisma.Project_imagesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_imagesCountAggregateInputType`
 */
export type Project_imagesCountAggregateInputType = Prisma.Project_imagesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.project_imagesSelect`
 */
export type project_imagesSelect = Prisma.project_imagesSelect

/**
 * @deprecated Renamed to `Prisma.project_imagesInclude`
 */
export type project_imagesInclude = Prisma.project_imagesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueproject_imagesArgs`
 */
export type FindUniqueproject_imagesArgs = Prisma.FindUniqueproject_imagesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstproject_imagesArgs`
 */
export type FindFirstproject_imagesArgs = Prisma.FindFirstproject_imagesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyproject_imagesArgs`
 */
export type FindManyproject_imagesArgs = Prisma.FindManyproject_imagesArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesCreateArgs`
 */
export type project_imagesCreateArgs = Prisma.project_imagesCreateArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateArgs`
 */
export type project_imagesUpdateArgs = Prisma.project_imagesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateManyArgs`
 */
export type project_imagesUpdateManyArgs = Prisma.project_imagesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesUpsertArgs`
 */
export type project_imagesUpsertArgs = Prisma.project_imagesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesDeleteArgs`
 */
export type project_imagesDeleteArgs = Prisma.project_imagesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.project_imagesDeleteManyArgs`
 */
export type project_imagesDeleteManyArgs = Prisma.project_imagesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProject_likes`
 */
export type AggregateProject_likes = Prisma.AggregateProject_likes

/**
 * @deprecated Renamed to `Prisma.Project_likesAvgAggregateOutputType`
 */
export type Project_likesAvgAggregateOutputType = Prisma.Project_likesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_likesSumAggregateOutputType`
 */
export type Project_likesSumAggregateOutputType = Prisma.Project_likesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_likesMinAggregateOutputType`
 */
export type Project_likesMinAggregateOutputType = Prisma.Project_likesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_likesMaxAggregateOutputType`
 */
export type Project_likesMaxAggregateOutputType = Prisma.Project_likesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Project_likesCountAggregateOutputType`
 */
export type Project_likesCountAggregateOutputType = Prisma.Project_likesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProject_likesArgs`
 */
export type AggregateProject_likesArgs = Prisma.AggregateProject_likesArgs

/**
 * @deprecated Renamed to `Prisma.Project_likesAvgAggregateInputType`
 */
export type Project_likesAvgAggregateInputType = Prisma.Project_likesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_likesSumAggregateInputType`
 */
export type Project_likesSumAggregateInputType = Prisma.Project_likesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_likesMinAggregateInputType`
 */
export type Project_likesMinAggregateInputType = Prisma.Project_likesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_likesMaxAggregateInputType`
 */
export type Project_likesMaxAggregateInputType = Prisma.Project_likesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Project_likesCountAggregateInputType`
 */
export type Project_likesCountAggregateInputType = Prisma.Project_likesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.project_likesSelect`
 */
export type project_likesSelect = Prisma.project_likesSelect

/**
 * @deprecated Renamed to `Prisma.project_likesInclude`
 */
export type project_likesInclude = Prisma.project_likesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueproject_likesArgs`
 */
export type FindUniqueproject_likesArgs = Prisma.FindUniqueproject_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstproject_likesArgs`
 */
export type FindFirstproject_likesArgs = Prisma.FindFirstproject_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyproject_likesArgs`
 */
export type FindManyproject_likesArgs = Prisma.FindManyproject_likesArgs

/**
 * @deprecated Renamed to `Prisma.project_likesCreateArgs`
 */
export type project_likesCreateArgs = Prisma.project_likesCreateArgs

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateArgs`
 */
export type project_likesUpdateArgs = Prisma.project_likesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyArgs`
 */
export type project_likesUpdateManyArgs = Prisma.project_likesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.project_likesUpsertArgs`
 */
export type project_likesUpsertArgs = Prisma.project_likesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.project_likesDeleteArgs`
 */
export type project_likesDeleteArgs = Prisma.project_likesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.project_likesDeleteManyArgs`
 */
export type project_likesDeleteManyArgs = Prisma.project_likesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProjects`
 */
export type AggregateProjects = Prisma.AggregateProjects

/**
 * @deprecated Renamed to `Prisma.ProjectsAvgAggregateOutputType`
 */
export type ProjectsAvgAggregateOutputType = Prisma.ProjectsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectsSumAggregateOutputType`
 */
export type ProjectsSumAggregateOutputType = Prisma.ProjectsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectsMinAggregateOutputType`
 */
export type ProjectsMinAggregateOutputType = Prisma.ProjectsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectsMaxAggregateOutputType`
 */
export type ProjectsMaxAggregateOutputType = Prisma.ProjectsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectsCountAggregateOutputType`
 */
export type ProjectsCountAggregateOutputType = Prisma.ProjectsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProjectsArgs`
 */
export type AggregateProjectsArgs = Prisma.AggregateProjectsArgs

/**
 * @deprecated Renamed to `Prisma.ProjectsAvgAggregateInputType`
 */
export type ProjectsAvgAggregateInputType = Prisma.ProjectsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectsSumAggregateInputType`
 */
export type ProjectsSumAggregateInputType = Prisma.ProjectsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectsMinAggregateInputType`
 */
export type ProjectsMinAggregateInputType = Prisma.ProjectsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectsMaxAggregateInputType`
 */
export type ProjectsMaxAggregateInputType = Prisma.ProjectsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectsCountAggregateInputType`
 */
export type ProjectsCountAggregateInputType = Prisma.ProjectsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.projectsSelect`
 */
export type projectsSelect = Prisma.projectsSelect

/**
 * @deprecated Renamed to `Prisma.projectsInclude`
 */
export type projectsInclude = Prisma.projectsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueprojectsArgs`
 */
export type FindUniqueprojectsArgs = Prisma.FindUniqueprojectsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstprojectsArgs`
 */
export type FindFirstprojectsArgs = Prisma.FindFirstprojectsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyprojectsArgs`
 */
export type FindManyprojectsArgs = Prisma.FindManyprojectsArgs

/**
 * @deprecated Renamed to `Prisma.projectsCreateArgs`
 */
export type projectsCreateArgs = Prisma.projectsCreateArgs

/**
 * @deprecated Renamed to `Prisma.projectsUpdateArgs`
 */
export type projectsUpdateArgs = Prisma.projectsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyArgs`
 */
export type projectsUpdateManyArgs = Prisma.projectsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.projectsUpsertArgs`
 */
export type projectsUpsertArgs = Prisma.projectsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.projectsDeleteArgs`
 */
export type projectsDeleteArgs = Prisma.projectsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.projectsDeleteManyArgs`
 */
export type projectsDeleteManyArgs = Prisma.projectsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateQuestions`
 */
export type AggregateQuestions = Prisma.AggregateQuestions

/**
 * @deprecated Renamed to `Prisma.QuestionsAvgAggregateOutputType`
 */
export type QuestionsAvgAggregateOutputType = Prisma.QuestionsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.QuestionsSumAggregateOutputType`
 */
export type QuestionsSumAggregateOutputType = Prisma.QuestionsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.QuestionsMinAggregateOutputType`
 */
export type QuestionsMinAggregateOutputType = Prisma.QuestionsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.QuestionsMaxAggregateOutputType`
 */
export type QuestionsMaxAggregateOutputType = Prisma.QuestionsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.QuestionsCountAggregateOutputType`
 */
export type QuestionsCountAggregateOutputType = Prisma.QuestionsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateQuestionsArgs`
 */
export type AggregateQuestionsArgs = Prisma.AggregateQuestionsArgs

/**
 * @deprecated Renamed to `Prisma.QuestionsAvgAggregateInputType`
 */
export type QuestionsAvgAggregateInputType = Prisma.QuestionsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.QuestionsSumAggregateInputType`
 */
export type QuestionsSumAggregateInputType = Prisma.QuestionsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.QuestionsMinAggregateInputType`
 */
export type QuestionsMinAggregateInputType = Prisma.QuestionsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.QuestionsMaxAggregateInputType`
 */
export type QuestionsMaxAggregateInputType = Prisma.QuestionsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.QuestionsCountAggregateInputType`
 */
export type QuestionsCountAggregateInputType = Prisma.QuestionsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.questionsSelect`
 */
export type questionsSelect = Prisma.questionsSelect

/**
 * @deprecated Renamed to `Prisma.questionsInclude`
 */
export type questionsInclude = Prisma.questionsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquequestionsArgs`
 */
export type FindUniquequestionsArgs = Prisma.FindUniquequestionsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstquestionsArgs`
 */
export type FindFirstquestionsArgs = Prisma.FindFirstquestionsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyquestionsArgs`
 */
export type FindManyquestionsArgs = Prisma.FindManyquestionsArgs

/**
 * @deprecated Renamed to `Prisma.questionsCreateArgs`
 */
export type questionsCreateArgs = Prisma.questionsCreateArgs

/**
 * @deprecated Renamed to `Prisma.questionsUpdateArgs`
 */
export type questionsUpdateArgs = Prisma.questionsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyArgs`
 */
export type questionsUpdateManyArgs = Prisma.questionsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.questionsUpsertArgs`
 */
export type questionsUpsertArgs = Prisma.questionsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.questionsDeleteArgs`
 */
export type questionsDeleteArgs = Prisma.questionsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.questionsDeleteManyArgs`
 */
export type questionsDeleteManyArgs = Prisma.questionsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRecent_views_project`
 */
export type AggregateRecent_views_project = Prisma.AggregateRecent_views_project

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectAvgAggregateOutputType`
 */
export type Recent_views_projectAvgAggregateOutputType = Prisma.Recent_views_projectAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectSumAggregateOutputType`
 */
export type Recent_views_projectSumAggregateOutputType = Prisma.Recent_views_projectSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectMinAggregateOutputType`
 */
export type Recent_views_projectMinAggregateOutputType = Prisma.Recent_views_projectMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectMaxAggregateOutputType`
 */
export type Recent_views_projectMaxAggregateOutputType = Prisma.Recent_views_projectMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectCountAggregateOutputType`
 */
export type Recent_views_projectCountAggregateOutputType = Prisma.Recent_views_projectCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRecent_views_projectArgs`
 */
export type AggregateRecent_views_projectArgs = Prisma.AggregateRecent_views_projectArgs

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectAvgAggregateInputType`
 */
export type Recent_views_projectAvgAggregateInputType = Prisma.Recent_views_projectAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectSumAggregateInputType`
 */
export type Recent_views_projectSumAggregateInputType = Prisma.Recent_views_projectSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectMinAggregateInputType`
 */
export type Recent_views_projectMinAggregateInputType = Prisma.Recent_views_projectMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectMaxAggregateInputType`
 */
export type Recent_views_projectMaxAggregateInputType = Prisma.Recent_views_projectMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectCountAggregateInputType`
 */
export type Recent_views_projectCountAggregateInputType = Prisma.Recent_views_projectCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.recent_views_projectSelect`
 */
export type recent_views_projectSelect = Prisma.recent_views_projectSelect

/**
 * @deprecated Renamed to `Prisma.recent_views_projectInclude`
 */
export type recent_views_projectInclude = Prisma.recent_views_projectInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquerecent_views_projectArgs`
 */
export type FindUniquerecent_views_projectArgs = Prisma.FindUniquerecent_views_projectArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrecent_views_projectArgs`
 */
export type FindFirstrecent_views_projectArgs = Prisma.FindFirstrecent_views_projectArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrecent_views_projectArgs`
 */
export type FindManyrecent_views_projectArgs = Prisma.FindManyrecent_views_projectArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateArgs`
 */
export type recent_views_projectCreateArgs = Prisma.recent_views_projectCreateArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateArgs`
 */
export type recent_views_projectUpdateArgs = Prisma.recent_views_projectUpdateArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyArgs`
 */
export type recent_views_projectUpdateManyArgs = Prisma.recent_views_projectUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpsertArgs`
 */
export type recent_views_projectUpsertArgs = Prisma.recent_views_projectUpsertArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectDeleteArgs`
 */
export type recent_views_projectDeleteArgs = Prisma.recent_views_projectDeleteArgs

/**
 * @deprecated Renamed to `Prisma.recent_views_projectDeleteManyArgs`
 */
export type recent_views_projectDeleteManyArgs = Prisma.recent_views_projectDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRequired_documents`
 */
export type AggregateRequired_documents = Prisma.AggregateRequired_documents

/**
 * @deprecated Renamed to `Prisma.Required_documentsAvgAggregateOutputType`
 */
export type Required_documentsAvgAggregateOutputType = Prisma.Required_documentsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsSumAggregateOutputType`
 */
export type Required_documentsSumAggregateOutputType = Prisma.Required_documentsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsMinAggregateOutputType`
 */
export type Required_documentsMinAggregateOutputType = Prisma.Required_documentsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsMaxAggregateOutputType`
 */
export type Required_documentsMaxAggregateOutputType = Prisma.Required_documentsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsCountAggregateOutputType`
 */
export type Required_documentsCountAggregateOutputType = Prisma.Required_documentsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRequired_documentsArgs`
 */
export type AggregateRequired_documentsArgs = Prisma.AggregateRequired_documentsArgs

/**
 * @deprecated Renamed to `Prisma.Required_documentsAvgAggregateInputType`
 */
export type Required_documentsAvgAggregateInputType = Prisma.Required_documentsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsSumAggregateInputType`
 */
export type Required_documentsSumAggregateInputType = Prisma.Required_documentsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsMinAggregateInputType`
 */
export type Required_documentsMinAggregateInputType = Prisma.Required_documentsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsMaxAggregateInputType`
 */
export type Required_documentsMaxAggregateInputType = Prisma.Required_documentsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Required_documentsCountAggregateInputType`
 */
export type Required_documentsCountAggregateInputType = Prisma.Required_documentsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.required_documentsSelect`
 */
export type required_documentsSelect = Prisma.required_documentsSelect

/**
 * @deprecated Renamed to `Prisma.required_documentsInclude`
 */
export type required_documentsInclude = Prisma.required_documentsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquerequired_documentsArgs`
 */
export type FindUniquerequired_documentsArgs = Prisma.FindUniquerequired_documentsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrequired_documentsArgs`
 */
export type FindFirstrequired_documentsArgs = Prisma.FindFirstrequired_documentsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrequired_documentsArgs`
 */
export type FindManyrequired_documentsArgs = Prisma.FindManyrequired_documentsArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateArgs`
 */
export type required_documentsCreateArgs = Prisma.required_documentsCreateArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateArgs`
 */
export type required_documentsUpdateArgs = Prisma.required_documentsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyArgs`
 */
export type required_documentsUpdateManyArgs = Prisma.required_documentsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsUpsertArgs`
 */
export type required_documentsUpsertArgs = Prisma.required_documentsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsDeleteArgs`
 */
export type required_documentsDeleteArgs = Prisma.required_documentsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.required_documentsDeleteManyArgs`
 */
export type required_documentsDeleteManyArgs = Prisma.required_documentsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSectors`
 */
export type AggregateSectors = Prisma.AggregateSectors

/**
 * @deprecated Renamed to `Prisma.SectorsAvgAggregateOutputType`
 */
export type SectorsAvgAggregateOutputType = Prisma.SectorsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SectorsSumAggregateOutputType`
 */
export type SectorsSumAggregateOutputType = Prisma.SectorsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SectorsMinAggregateOutputType`
 */
export type SectorsMinAggregateOutputType = Prisma.SectorsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SectorsMaxAggregateOutputType`
 */
export type SectorsMaxAggregateOutputType = Prisma.SectorsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SectorsCountAggregateOutputType`
 */
export type SectorsCountAggregateOutputType = Prisma.SectorsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSectorsArgs`
 */
export type AggregateSectorsArgs = Prisma.AggregateSectorsArgs

/**
 * @deprecated Renamed to `Prisma.SectorsAvgAggregateInputType`
 */
export type SectorsAvgAggregateInputType = Prisma.SectorsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SectorsSumAggregateInputType`
 */
export type SectorsSumAggregateInputType = Prisma.SectorsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SectorsMinAggregateInputType`
 */
export type SectorsMinAggregateInputType = Prisma.SectorsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SectorsMaxAggregateInputType`
 */
export type SectorsMaxAggregateInputType = Prisma.SectorsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SectorsCountAggregateInputType`
 */
export type SectorsCountAggregateInputType = Prisma.SectorsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.sectorsSelect`
 */
export type sectorsSelect = Prisma.sectorsSelect

/**
 * @deprecated Renamed to `Prisma.sectorsInclude`
 */
export type sectorsInclude = Prisma.sectorsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquesectorsArgs`
 */
export type FindUniquesectorsArgs = Prisma.FindUniquesectorsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstsectorsArgs`
 */
export type FindFirstsectorsArgs = Prisma.FindFirstsectorsArgs

/**
 * @deprecated Renamed to `Prisma.FindManysectorsArgs`
 */
export type FindManysectorsArgs = Prisma.FindManysectorsArgs

/**
 * @deprecated Renamed to `Prisma.sectorsCreateArgs`
 */
export type sectorsCreateArgs = Prisma.sectorsCreateArgs

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateArgs`
 */
export type sectorsUpdateArgs = Prisma.sectorsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateManyArgs`
 */
export type sectorsUpdateManyArgs = Prisma.sectorsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.sectorsUpsertArgs`
 */
export type sectorsUpsertArgs = Prisma.sectorsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.sectorsDeleteArgs`
 */
export type sectorsDeleteArgs = Prisma.sectorsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.sectorsDeleteManyArgs`
 */
export type sectorsDeleteManyArgs = Prisma.sectorsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateService_types`
 */
export type AggregateService_types = Prisma.AggregateService_types

/**
 * @deprecated Renamed to `Prisma.Service_typesAvgAggregateOutputType`
 */
export type Service_typesAvgAggregateOutputType = Prisma.Service_typesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Service_typesSumAggregateOutputType`
 */
export type Service_typesSumAggregateOutputType = Prisma.Service_typesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Service_typesMinAggregateOutputType`
 */
export type Service_typesMinAggregateOutputType = Prisma.Service_typesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Service_typesMaxAggregateOutputType`
 */
export type Service_typesMaxAggregateOutputType = Prisma.Service_typesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Service_typesCountAggregateOutputType`
 */
export type Service_typesCountAggregateOutputType = Prisma.Service_typesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateService_typesArgs`
 */
export type AggregateService_typesArgs = Prisma.AggregateService_typesArgs

/**
 * @deprecated Renamed to `Prisma.Service_typesAvgAggregateInputType`
 */
export type Service_typesAvgAggregateInputType = Prisma.Service_typesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Service_typesSumAggregateInputType`
 */
export type Service_typesSumAggregateInputType = Prisma.Service_typesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Service_typesMinAggregateInputType`
 */
export type Service_typesMinAggregateInputType = Prisma.Service_typesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Service_typesMaxAggregateInputType`
 */
export type Service_typesMaxAggregateInputType = Prisma.Service_typesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Service_typesCountAggregateInputType`
 */
export type Service_typesCountAggregateInputType = Prisma.Service_typesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.service_typesSelect`
 */
export type service_typesSelect = Prisma.service_typesSelect

/**
 * @deprecated Renamed to `Prisma.service_typesInclude`
 */
export type service_typesInclude = Prisma.service_typesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueservice_typesArgs`
 */
export type FindUniqueservice_typesArgs = Prisma.FindUniqueservice_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstservice_typesArgs`
 */
export type FindFirstservice_typesArgs = Prisma.FindFirstservice_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyservice_typesArgs`
 */
export type FindManyservice_typesArgs = Prisma.FindManyservice_typesArgs

/**
 * @deprecated Renamed to `Prisma.service_typesCreateArgs`
 */
export type service_typesCreateArgs = Prisma.service_typesCreateArgs

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateArgs`
 */
export type service_typesUpdateArgs = Prisma.service_typesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateManyArgs`
 */
export type service_typesUpdateManyArgs = Prisma.service_typesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.service_typesUpsertArgs`
 */
export type service_typesUpsertArgs = Prisma.service_typesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.service_typesDeleteArgs`
 */
export type service_typesDeleteArgs = Prisma.service_typesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.service_typesDeleteManyArgs`
 */
export type service_typesDeleteManyArgs = Prisma.service_typesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSignup_methods`
 */
export type AggregateSignup_methods = Prisma.AggregateSignup_methods

/**
 * @deprecated Renamed to `Prisma.Signup_methodsAvgAggregateOutputType`
 */
export type Signup_methodsAvgAggregateOutputType = Prisma.Signup_methodsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsSumAggregateOutputType`
 */
export type Signup_methodsSumAggregateOutputType = Prisma.Signup_methodsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsMinAggregateOutputType`
 */
export type Signup_methodsMinAggregateOutputType = Prisma.Signup_methodsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsMaxAggregateOutputType`
 */
export type Signup_methodsMaxAggregateOutputType = Prisma.Signup_methodsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsCountAggregateOutputType`
 */
export type Signup_methodsCountAggregateOutputType = Prisma.Signup_methodsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSignup_methodsArgs`
 */
export type AggregateSignup_methodsArgs = Prisma.AggregateSignup_methodsArgs

/**
 * @deprecated Renamed to `Prisma.Signup_methodsAvgAggregateInputType`
 */
export type Signup_methodsAvgAggregateInputType = Prisma.Signup_methodsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsSumAggregateInputType`
 */
export type Signup_methodsSumAggregateInputType = Prisma.Signup_methodsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsMinAggregateInputType`
 */
export type Signup_methodsMinAggregateInputType = Prisma.Signup_methodsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsMaxAggregateInputType`
 */
export type Signup_methodsMaxAggregateInputType = Prisma.Signup_methodsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Signup_methodsCountAggregateInputType`
 */
export type Signup_methodsCountAggregateInputType = Prisma.Signup_methodsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.signup_methodsSelect`
 */
export type signup_methodsSelect = Prisma.signup_methodsSelect

/**
 * @deprecated Renamed to `Prisma.signup_methodsInclude`
 */
export type signup_methodsInclude = Prisma.signup_methodsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquesignup_methodsArgs`
 */
export type FindUniquesignup_methodsArgs = Prisma.FindUniquesignup_methodsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstsignup_methodsArgs`
 */
export type FindFirstsignup_methodsArgs = Prisma.FindFirstsignup_methodsArgs

/**
 * @deprecated Renamed to `Prisma.FindManysignup_methodsArgs`
 */
export type FindManysignup_methodsArgs = Prisma.FindManysignup_methodsArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsCreateArgs`
 */
export type signup_methodsCreateArgs = Prisma.signup_methodsCreateArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateArgs`
 */
export type signup_methodsUpdateArgs = Prisma.signup_methodsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateManyArgs`
 */
export type signup_methodsUpdateManyArgs = Prisma.signup_methodsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpsertArgs`
 */
export type signup_methodsUpsertArgs = Prisma.signup_methodsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsDeleteArgs`
 */
export type signup_methodsDeleteArgs = Prisma.signup_methodsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.signup_methodsDeleteManyArgs`
 */
export type signup_methodsDeleteManyArgs = Prisma.signup_methodsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_images`
 */
export type AggregateStartup_images = Prisma.AggregateStartup_images

/**
 * @deprecated Renamed to `Prisma.Startup_imagesAvgAggregateOutputType`
 */
export type Startup_imagesAvgAggregateOutputType = Prisma.Startup_imagesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesSumAggregateOutputType`
 */
export type Startup_imagesSumAggregateOutputType = Prisma.Startup_imagesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesMinAggregateOutputType`
 */
export type Startup_imagesMinAggregateOutputType = Prisma.Startup_imagesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesMaxAggregateOutputType`
 */
export type Startup_imagesMaxAggregateOutputType = Prisma.Startup_imagesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesCountAggregateOutputType`
 */
export type Startup_imagesCountAggregateOutputType = Prisma.Startup_imagesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_imagesArgs`
 */
export type AggregateStartup_imagesArgs = Prisma.AggregateStartup_imagesArgs

/**
 * @deprecated Renamed to `Prisma.Startup_imagesAvgAggregateInputType`
 */
export type Startup_imagesAvgAggregateInputType = Prisma.Startup_imagesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesSumAggregateInputType`
 */
export type Startup_imagesSumAggregateInputType = Prisma.Startup_imagesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesMinAggregateInputType`
 */
export type Startup_imagesMinAggregateInputType = Prisma.Startup_imagesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesMaxAggregateInputType`
 */
export type Startup_imagesMaxAggregateInputType = Prisma.Startup_imagesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_imagesCountAggregateInputType`
 */
export type Startup_imagesCountAggregateInputType = Prisma.Startup_imagesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.startup_imagesSelect`
 */
export type startup_imagesSelect = Prisma.startup_imagesSelect

/**
 * @deprecated Renamed to `Prisma.startup_imagesInclude`
 */
export type startup_imagesInclude = Prisma.startup_imagesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquestartup_imagesArgs`
 */
export type FindUniquestartup_imagesArgs = Prisma.FindUniquestartup_imagesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirststartup_imagesArgs`
 */
export type FindFirststartup_imagesArgs = Prisma.FindFirststartup_imagesArgs

/**
 * @deprecated Renamed to `Prisma.FindManystartup_imagesArgs`
 */
export type FindManystartup_imagesArgs = Prisma.FindManystartup_imagesArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesCreateArgs`
 */
export type startup_imagesCreateArgs = Prisma.startup_imagesCreateArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateArgs`
 */
export type startup_imagesUpdateArgs = Prisma.startup_imagesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateManyArgs`
 */
export type startup_imagesUpdateManyArgs = Prisma.startup_imagesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpsertArgs`
 */
export type startup_imagesUpsertArgs = Prisma.startup_imagesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesDeleteArgs`
 */
export type startup_imagesDeleteArgs = Prisma.startup_imagesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.startup_imagesDeleteManyArgs`
 */
export type startup_imagesDeleteManyArgs = Prisma.startup_imagesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_infos`
 */
export type AggregateStartup_infos = Prisma.AggregateStartup_infos

/**
 * @deprecated Renamed to `Prisma.Startup_infosAvgAggregateOutputType`
 */
export type Startup_infosAvgAggregateOutputType = Prisma.Startup_infosAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosSumAggregateOutputType`
 */
export type Startup_infosSumAggregateOutputType = Prisma.Startup_infosSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosMinAggregateOutputType`
 */
export type Startup_infosMinAggregateOutputType = Prisma.Startup_infosMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosMaxAggregateOutputType`
 */
export type Startup_infosMaxAggregateOutputType = Prisma.Startup_infosMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosCountAggregateOutputType`
 */
export type Startup_infosCountAggregateOutputType = Prisma.Startup_infosCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_infosArgs`
 */
export type AggregateStartup_infosArgs = Prisma.AggregateStartup_infosArgs

/**
 * @deprecated Renamed to `Prisma.Startup_infosAvgAggregateInputType`
 */
export type Startup_infosAvgAggregateInputType = Prisma.Startup_infosAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosSumAggregateInputType`
 */
export type Startup_infosSumAggregateInputType = Prisma.Startup_infosSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosMinAggregateInputType`
 */
export type Startup_infosMinAggregateInputType = Prisma.Startup_infosMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosMaxAggregateInputType`
 */
export type Startup_infosMaxAggregateInputType = Prisma.Startup_infosMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_infosCountAggregateInputType`
 */
export type Startup_infosCountAggregateInputType = Prisma.Startup_infosCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.startup_infosSelect`
 */
export type startup_infosSelect = Prisma.startup_infosSelect

/**
 * @deprecated Renamed to `Prisma.startup_infosInclude`
 */
export type startup_infosInclude = Prisma.startup_infosInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquestartup_infosArgs`
 */
export type FindUniquestartup_infosArgs = Prisma.FindUniquestartup_infosArgs

/**
 * @deprecated Renamed to `Prisma.FindFirststartup_infosArgs`
 */
export type FindFirststartup_infosArgs = Prisma.FindFirststartup_infosArgs

/**
 * @deprecated Renamed to `Prisma.FindManystartup_infosArgs`
 */
export type FindManystartup_infosArgs = Prisma.FindManystartup_infosArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateArgs`
 */
export type startup_infosCreateArgs = Prisma.startup_infosCreateArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateArgs`
 */
export type startup_infosUpdateArgs = Prisma.startup_infosUpdateArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyArgs`
 */
export type startup_infosUpdateManyArgs = Prisma.startup_infosUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertArgs`
 */
export type startup_infosUpsertArgs = Prisma.startup_infosUpsertArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosDeleteArgs`
 */
export type startup_infosDeleteArgs = Prisma.startup_infosDeleteArgs

/**
 * @deprecated Renamed to `Prisma.startup_infosDeleteManyArgs`
 */
export type startup_infosDeleteManyArgs = Prisma.startup_infosDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_likes`
 */
export type AggregateStartup_likes = Prisma.AggregateStartup_likes

/**
 * @deprecated Renamed to `Prisma.Startup_likesAvgAggregateOutputType`
 */
export type Startup_likesAvgAggregateOutputType = Prisma.Startup_likesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesSumAggregateOutputType`
 */
export type Startup_likesSumAggregateOutputType = Prisma.Startup_likesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesMinAggregateOutputType`
 */
export type Startup_likesMinAggregateOutputType = Prisma.Startup_likesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesMaxAggregateOutputType`
 */
export type Startup_likesMaxAggregateOutputType = Prisma.Startup_likesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesCountAggregateOutputType`
 */
export type Startup_likesCountAggregateOutputType = Prisma.Startup_likesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateStartup_likesArgs`
 */
export type AggregateStartup_likesArgs = Prisma.AggregateStartup_likesArgs

/**
 * @deprecated Renamed to `Prisma.Startup_likesAvgAggregateInputType`
 */
export type Startup_likesAvgAggregateInputType = Prisma.Startup_likesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesSumAggregateInputType`
 */
export type Startup_likesSumAggregateInputType = Prisma.Startup_likesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesMinAggregateInputType`
 */
export type Startup_likesMinAggregateInputType = Prisma.Startup_likesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesMaxAggregateInputType`
 */
export type Startup_likesMaxAggregateInputType = Prisma.Startup_likesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Startup_likesCountAggregateInputType`
 */
export type Startup_likesCountAggregateInputType = Prisma.Startup_likesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.startup_likesSelect`
 */
export type startup_likesSelect = Prisma.startup_likesSelect

/**
 * @deprecated Renamed to `Prisma.startup_likesInclude`
 */
export type startup_likesInclude = Prisma.startup_likesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquestartup_likesArgs`
 */
export type FindUniquestartup_likesArgs = Prisma.FindUniquestartup_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirststartup_likesArgs`
 */
export type FindFirststartup_likesArgs = Prisma.FindFirststartup_likesArgs

/**
 * @deprecated Renamed to `Prisma.FindManystartup_likesArgs`
 */
export type FindManystartup_likesArgs = Prisma.FindManystartup_likesArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateArgs`
 */
export type startup_likesCreateArgs = Prisma.startup_likesCreateArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateArgs`
 */
export type startup_likesUpdateArgs = Prisma.startup_likesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyArgs`
 */
export type startup_likesUpdateManyArgs = Prisma.startup_likesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesUpsertArgs`
 */
export type startup_likesUpsertArgs = Prisma.startup_likesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesDeleteArgs`
 */
export type startup_likesDeleteArgs = Prisma.startup_likesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.startup_likesDeleteManyArgs`
 */
export type startup_likesDeleteManyArgs = Prisma.startup_likesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateTechnologies`
 */
export type AggregateTechnologies = Prisma.AggregateTechnologies

/**
 * @deprecated Renamed to `Prisma.TechnologiesAvgAggregateOutputType`
 */
export type TechnologiesAvgAggregateOutputType = Prisma.TechnologiesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesSumAggregateOutputType`
 */
export type TechnologiesSumAggregateOutputType = Prisma.TechnologiesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesMinAggregateOutputType`
 */
export type TechnologiesMinAggregateOutputType = Prisma.TechnologiesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesMaxAggregateOutputType`
 */
export type TechnologiesMaxAggregateOutputType = Prisma.TechnologiesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesCountAggregateOutputType`
 */
export type TechnologiesCountAggregateOutputType = Prisma.TechnologiesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTechnologiesArgs`
 */
export type AggregateTechnologiesArgs = Prisma.AggregateTechnologiesArgs

/**
 * @deprecated Renamed to `Prisma.TechnologiesAvgAggregateInputType`
 */
export type TechnologiesAvgAggregateInputType = Prisma.TechnologiesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesSumAggregateInputType`
 */
export type TechnologiesSumAggregateInputType = Prisma.TechnologiesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesMinAggregateInputType`
 */
export type TechnologiesMinAggregateInputType = Prisma.TechnologiesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesMaxAggregateInputType`
 */
export type TechnologiesMaxAggregateInputType = Prisma.TechnologiesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TechnologiesCountAggregateInputType`
 */
export type TechnologiesCountAggregateInputType = Prisma.TechnologiesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.technologiesSelect`
 */
export type technologiesSelect = Prisma.technologiesSelect

/**
 * @deprecated Renamed to `Prisma.technologiesInclude`
 */
export type technologiesInclude = Prisma.technologiesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquetechnologiesArgs`
 */
export type FindUniquetechnologiesArgs = Prisma.FindUniquetechnologiesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirsttechnologiesArgs`
 */
export type FindFirsttechnologiesArgs = Prisma.FindFirsttechnologiesArgs

/**
 * @deprecated Renamed to `Prisma.FindManytechnologiesArgs`
 */
export type FindManytechnologiesArgs = Prisma.FindManytechnologiesArgs

/**
 * @deprecated Renamed to `Prisma.technologiesCreateArgs`
 */
export type technologiesCreateArgs = Prisma.technologiesCreateArgs

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateArgs`
 */
export type technologiesUpdateArgs = Prisma.technologiesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateManyArgs`
 */
export type technologiesUpdateManyArgs = Prisma.technologiesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.technologiesUpsertArgs`
 */
export type technologiesUpsertArgs = Prisma.technologiesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.technologiesDeleteArgs`
 */
export type technologiesDeleteArgs = Prisma.technologiesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.technologiesDeleteManyArgs`
 */
export type technologiesDeleteManyArgs = Prisma.technologiesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateTerms`
 */
export type AggregateTerms = Prisma.AggregateTerms

/**
 * @deprecated Renamed to `Prisma.TermsAvgAggregateOutputType`
 */
export type TermsAvgAggregateOutputType = Prisma.TermsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TermsSumAggregateOutputType`
 */
export type TermsSumAggregateOutputType = Prisma.TermsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TermsMinAggregateOutputType`
 */
export type TermsMinAggregateOutputType = Prisma.TermsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TermsMaxAggregateOutputType`
 */
export type TermsMaxAggregateOutputType = Prisma.TermsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TermsCountAggregateOutputType`
 */
export type TermsCountAggregateOutputType = Prisma.TermsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTermsArgs`
 */
export type AggregateTermsArgs = Prisma.AggregateTermsArgs

/**
 * @deprecated Renamed to `Prisma.TermsAvgAggregateInputType`
 */
export type TermsAvgAggregateInputType = Prisma.TermsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TermsSumAggregateInputType`
 */
export type TermsSumAggregateInputType = Prisma.TermsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TermsMinAggregateInputType`
 */
export type TermsMinAggregateInputType = Prisma.TermsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TermsMaxAggregateInputType`
 */
export type TermsMaxAggregateInputType = Prisma.TermsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TermsCountAggregateInputType`
 */
export type TermsCountAggregateInputType = Prisma.TermsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.termsSelect`
 */
export type termsSelect = Prisma.termsSelect

/**
 * @deprecated Renamed to `Prisma.termsInclude`
 */
export type termsInclude = Prisma.termsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquetermsArgs`
 */
export type FindUniquetermsArgs = Prisma.FindUniquetermsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirsttermsArgs`
 */
export type FindFirsttermsArgs = Prisma.FindFirsttermsArgs

/**
 * @deprecated Renamed to `Prisma.FindManytermsArgs`
 */
export type FindManytermsArgs = Prisma.FindManytermsArgs

/**
 * @deprecated Renamed to `Prisma.termsCreateArgs`
 */
export type termsCreateArgs = Prisma.termsCreateArgs

/**
 * @deprecated Renamed to `Prisma.termsUpdateArgs`
 */
export type termsUpdateArgs = Prisma.termsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.termsUpdateManyArgs`
 */
export type termsUpdateManyArgs = Prisma.termsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.termsUpsertArgs`
 */
export type termsUpsertArgs = Prisma.termsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.termsDeleteArgs`
 */
export type termsDeleteArgs = Prisma.termsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.termsDeleteManyArgs`
 */
export type termsDeleteManyArgs = Prisma.termsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser_agreements`
 */
export type AggregateUser_agreements = Prisma.AggregateUser_agreements

/**
 * @deprecated Renamed to `Prisma.User_agreementsAvgAggregateOutputType`
 */
export type User_agreementsAvgAggregateOutputType = Prisma.User_agreementsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsSumAggregateOutputType`
 */
export type User_agreementsSumAggregateOutputType = Prisma.User_agreementsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsMinAggregateOutputType`
 */
export type User_agreementsMinAggregateOutputType = Prisma.User_agreementsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsMaxAggregateOutputType`
 */
export type User_agreementsMaxAggregateOutputType = Prisma.User_agreementsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsCountAggregateOutputType`
 */
export type User_agreementsCountAggregateOutputType = Prisma.User_agreementsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUser_agreementsArgs`
 */
export type AggregateUser_agreementsArgs = Prisma.AggregateUser_agreementsArgs

/**
 * @deprecated Renamed to `Prisma.User_agreementsAvgAggregateInputType`
 */
export type User_agreementsAvgAggregateInputType = Prisma.User_agreementsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsSumAggregateInputType`
 */
export type User_agreementsSumAggregateInputType = Prisma.User_agreementsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsMinAggregateInputType`
 */
export type User_agreementsMinAggregateInputType = Prisma.User_agreementsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsMaxAggregateInputType`
 */
export type User_agreementsMaxAggregateInputType = Prisma.User_agreementsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_agreementsCountAggregateInputType`
 */
export type User_agreementsCountAggregateInputType = Prisma.User_agreementsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.user_agreementsSelect`
 */
export type user_agreementsSelect = Prisma.user_agreementsSelect

/**
 * @deprecated Renamed to `Prisma.user_agreementsInclude`
 */
export type user_agreementsInclude = Prisma.user_agreementsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueuser_agreementsArgs`
 */
export type FindUniqueuser_agreementsArgs = Prisma.FindUniqueuser_agreementsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstuser_agreementsArgs`
 */
export type FindFirstuser_agreementsArgs = Prisma.FindFirstuser_agreementsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyuser_agreementsArgs`
 */
export type FindManyuser_agreementsArgs = Prisma.FindManyuser_agreementsArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateArgs`
 */
export type user_agreementsCreateArgs = Prisma.user_agreementsCreateArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateArgs`
 */
export type user_agreementsUpdateArgs = Prisma.user_agreementsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyArgs`
 */
export type user_agreementsUpdateManyArgs = Prisma.user_agreementsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpsertArgs`
 */
export type user_agreementsUpsertArgs = Prisma.user_agreementsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsDeleteArgs`
 */
export type user_agreementsDeleteArgs = Prisma.user_agreementsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.user_agreementsDeleteManyArgs`
 */
export type user_agreementsDeleteManyArgs = Prisma.user_agreementsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser_types`
 */
export type AggregateUser_types = Prisma.AggregateUser_types

/**
 * @deprecated Renamed to `Prisma.User_typesAvgAggregateOutputType`
 */
export type User_typesAvgAggregateOutputType = Prisma.User_typesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_typesSumAggregateOutputType`
 */
export type User_typesSumAggregateOutputType = Prisma.User_typesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_typesMinAggregateOutputType`
 */
export type User_typesMinAggregateOutputType = Prisma.User_typesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_typesMaxAggregateOutputType`
 */
export type User_typesMaxAggregateOutputType = Prisma.User_typesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.User_typesCountAggregateOutputType`
 */
export type User_typesCountAggregateOutputType = Prisma.User_typesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUser_typesArgs`
 */
export type AggregateUser_typesArgs = Prisma.AggregateUser_typesArgs

/**
 * @deprecated Renamed to `Prisma.User_typesAvgAggregateInputType`
 */
export type User_typesAvgAggregateInputType = Prisma.User_typesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_typesSumAggregateInputType`
 */
export type User_typesSumAggregateInputType = Prisma.User_typesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_typesMinAggregateInputType`
 */
export type User_typesMinAggregateInputType = Prisma.User_typesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_typesMaxAggregateInputType`
 */
export type User_typesMaxAggregateInputType = Prisma.User_typesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.User_typesCountAggregateInputType`
 */
export type User_typesCountAggregateInputType = Prisma.User_typesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.user_typesSelect`
 */
export type user_typesSelect = Prisma.user_typesSelect

/**
 * @deprecated Renamed to `Prisma.user_typesInclude`
 */
export type user_typesInclude = Prisma.user_typesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueuser_typesArgs`
 */
export type FindUniqueuser_typesArgs = Prisma.FindUniqueuser_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstuser_typesArgs`
 */
export type FindFirstuser_typesArgs = Prisma.FindFirstuser_typesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyuser_typesArgs`
 */
export type FindManyuser_typesArgs = Prisma.FindManyuser_typesArgs

/**
 * @deprecated Renamed to `Prisma.user_typesCreateArgs`
 */
export type user_typesCreateArgs = Prisma.user_typesCreateArgs

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateArgs`
 */
export type user_typesUpdateArgs = Prisma.user_typesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateManyArgs`
 */
export type user_typesUpdateManyArgs = Prisma.user_typesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.user_typesUpsertArgs`
 */
export type user_typesUpsertArgs = Prisma.user_typesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.user_typesDeleteArgs`
 */
export type user_typesDeleteArgs = Prisma.user_typesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.user_typesDeleteManyArgs`
 */
export type user_typesDeleteManyArgs = Prisma.user_typesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUsers`
 */
export type AggregateUsers = Prisma.AggregateUsers

/**
 * @deprecated Renamed to `Prisma.UsersAvgAggregateOutputType`
 */
export type UsersAvgAggregateOutputType = Prisma.UsersAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersSumAggregateOutputType`
 */
export type UsersSumAggregateOutputType = Prisma.UsersSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersMinAggregateOutputType`
 */
export type UsersMinAggregateOutputType = Prisma.UsersMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersMaxAggregateOutputType`
 */
export type UsersMaxAggregateOutputType = Prisma.UsersMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersCountAggregateOutputType`
 */
export type UsersCountAggregateOutputType = Prisma.UsersCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUsersArgs`
 */
export type AggregateUsersArgs = Prisma.AggregateUsersArgs

/**
 * @deprecated Renamed to `Prisma.UsersAvgAggregateInputType`
 */
export type UsersAvgAggregateInputType = Prisma.UsersAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersSumAggregateInputType`
 */
export type UsersSumAggregateInputType = Prisma.UsersSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersMinAggregateInputType`
 */
export type UsersMinAggregateInputType = Prisma.UsersMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersMaxAggregateInputType`
 */
export type UsersMaxAggregateInputType = Prisma.UsersMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersCountAggregateInputType`
 */
export type UsersCountAggregateInputType = Prisma.UsersCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.usersSelect`
 */
export type usersSelect = Prisma.usersSelect

/**
 * @deprecated Renamed to `Prisma.usersInclude`
 */
export type usersInclude = Prisma.usersInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueusersArgs`
 */
export type FindUniqueusersArgs = Prisma.FindUniqueusersArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstusersArgs`
 */
export type FindFirstusersArgs = Prisma.FindFirstusersArgs

/**
 * @deprecated Renamed to `Prisma.FindManyusersArgs`
 */
export type FindManyusersArgs = Prisma.FindManyusersArgs

/**
 * @deprecated Renamed to `Prisma.usersCreateArgs`
 */
export type usersCreateArgs = Prisma.usersCreateArgs

/**
 * @deprecated Renamed to `Prisma.usersUpdateArgs`
 */
export type usersUpdateArgs = Prisma.usersUpdateArgs

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyArgs`
 */
export type usersUpdateManyArgs = Prisma.usersUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.usersUpsertArgs`
 */
export type usersUpsertArgs = Prisma.usersUpsertArgs

/**
 * @deprecated Renamed to `Prisma.usersDeleteArgs`
 */
export type usersDeleteArgs = Prisma.usersDeleteArgs

/**
 * @deprecated Renamed to `Prisma.usersDeleteManyArgs`
 */
export type usersDeleteManyArgs = Prisma.usersDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateVotes`
 */
export type AggregateVotes = Prisma.AggregateVotes

/**
 * @deprecated Renamed to `Prisma.VotesAvgAggregateOutputType`
 */
export type VotesAvgAggregateOutputType = Prisma.VotesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VotesSumAggregateOutputType`
 */
export type VotesSumAggregateOutputType = Prisma.VotesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VotesMinAggregateOutputType`
 */
export type VotesMinAggregateOutputType = Prisma.VotesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VotesMaxAggregateOutputType`
 */
export type VotesMaxAggregateOutputType = Prisma.VotesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VotesCountAggregateOutputType`
 */
export type VotesCountAggregateOutputType = Prisma.VotesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateVotesArgs`
 */
export type AggregateVotesArgs = Prisma.AggregateVotesArgs

/**
 * @deprecated Renamed to `Prisma.VotesAvgAggregateInputType`
 */
export type VotesAvgAggregateInputType = Prisma.VotesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VotesSumAggregateInputType`
 */
export type VotesSumAggregateInputType = Prisma.VotesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VotesMinAggregateInputType`
 */
export type VotesMinAggregateInputType = Prisma.VotesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VotesMaxAggregateInputType`
 */
export type VotesMaxAggregateInputType = Prisma.VotesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VotesCountAggregateInputType`
 */
export type VotesCountAggregateInputType = Prisma.VotesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.votesSelect`
 */
export type votesSelect = Prisma.votesSelect

/**
 * @deprecated Renamed to `Prisma.votesInclude`
 */
export type votesInclude = Prisma.votesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquevotesArgs`
 */
export type FindUniquevotesArgs = Prisma.FindUniquevotesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstvotesArgs`
 */
export type FindFirstvotesArgs = Prisma.FindFirstvotesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyvotesArgs`
 */
export type FindManyvotesArgs = Prisma.FindManyvotesArgs

/**
 * @deprecated Renamed to `Prisma.votesCreateArgs`
 */
export type votesCreateArgs = Prisma.votesCreateArgs

/**
 * @deprecated Renamed to `Prisma.votesUpdateArgs`
 */
export type votesUpdateArgs = Prisma.votesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyArgs`
 */
export type votesUpdateManyArgs = Prisma.votesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.votesUpsertArgs`
 */
export type votesUpsertArgs = Prisma.votesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.votesDeleteArgs`
 */
export type votesDeleteArgs = Prisma.votesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.votesDeleteManyArgs`
 */
export type votesDeleteManyArgs = Prisma.votesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.answersWhereInput`
 */
export type answersWhereInput = Prisma.answersWhereInput

/**
 * @deprecated Renamed to `Prisma.answersOrderByInput`
 */
export type answersOrderByInput = Prisma.answersOrderByInput

/**
 * @deprecated Renamed to `Prisma.answersWhereUniqueInput`
 */
export type answersWhereUniqueInput = Prisma.answersWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.applicantsWhereInput`
 */
export type applicantsWhereInput = Prisma.applicantsWhereInput

/**
 * @deprecated Renamed to `Prisma.applicantsOrderByInput`
 */
export type applicantsOrderByInput = Prisma.applicantsOrderByInput

/**
 * @deprecated Renamed to `Prisma.applicantsWhereUniqueInput`
 */
export type applicantsWhereUniqueInput = Prisma.applicantsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.business_typesWhereInput`
 */
export type business_typesWhereInput = Prisma.business_typesWhereInput

/**
 * @deprecated Renamed to `Prisma.business_typesOrderByInput`
 */
export type business_typesOrderByInput = Prisma.business_typesOrderByInput

/**
 * @deprecated Renamed to `Prisma.business_typesWhereUniqueInput`
 */
export type business_typesWhereUniqueInput = Prisma.business_typesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.companiesWhereInput`
 */
export type companiesWhereInput = Prisma.companiesWhereInput

/**
 * @deprecated Renamed to `Prisma.companiesOrderByInput`
 */
export type companiesOrderByInput = Prisma.companiesOrderByInput

/**
 * @deprecated Renamed to `Prisma.companiesWhereUniqueInput`
 */
export type companiesWhereUniqueInput = Prisma.companiesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.company_documentsWhereInput`
 */
export type company_documentsWhereInput = Prisma.company_documentsWhereInput

/**
 * @deprecated Renamed to `Prisma.company_documentsOrderByInput`
 */
export type company_documentsOrderByInput = Prisma.company_documentsOrderByInput

/**
 * @deprecated Renamed to `Prisma.company_documentsWhereUniqueInput`
 */
export type company_documentsWhereUniqueInput = Prisma.company_documentsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.company_membersWhereInput`
 */
export type company_membersWhereInput = Prisma.company_membersWhereInput

/**
 * @deprecated Renamed to `Prisma.company_membersOrderByInput`
 */
export type company_membersOrderByInput = Prisma.company_membersOrderByInput

/**
 * @deprecated Renamed to `Prisma.company_membersWhereUniqueInput`
 */
export type company_membersWhereUniqueInput = Prisma.company_membersWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.company_newsWhereInput`
 */
export type company_newsWhereInput = Prisma.company_newsWhereInput

/**
 * @deprecated Renamed to `Prisma.company_newsOrderByInput`
 */
export type company_newsOrderByInput = Prisma.company_newsOrderByInput

/**
 * @deprecated Renamed to `Prisma.company_newsWhereUniqueInput`
 */
export type company_newsWhereUniqueInput = Prisma.company_newsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.company_typesWhereInput`
 */
export type company_typesWhereInput = Prisma.company_typesWhereInput

/**
 * @deprecated Renamed to `Prisma.company_typesOrderByInput`
 */
export type company_typesOrderByInput = Prisma.company_typesOrderByInput

/**
 * @deprecated Renamed to `Prisma.company_typesWhereUniqueInput`
 */
export type company_typesWhereUniqueInput = Prisma.company_typesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.demodaysWhereInput`
 */
export type demodaysWhereInput = Prisma.demodaysWhereInput

/**
 * @deprecated Renamed to `Prisma.demodaysOrderByInput`
 */
export type demodaysOrderByInput = Prisma.demodaysOrderByInput

/**
 * @deprecated Renamed to `Prisma.demodaysWhereUniqueInput`
 */
export type demodaysWhereUniqueInput = Prisma.demodaysWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.document_typesWhereInput`
 */
export type document_typesWhereInput = Prisma.document_typesWhereInput

/**
 * @deprecated Renamed to `Prisma.document_typesOrderByInput`
 */
export type document_typesOrderByInput = Prisma.document_typesOrderByInput

/**
 * @deprecated Renamed to `Prisma.document_typesWhereUniqueInput`
 */
export type document_typesWhereUniqueInput = Prisma.document_typesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.email_authWhereInput`
 */
export type email_authWhereInput = Prisma.email_authWhereInput

/**
 * @deprecated Renamed to `Prisma.email_authOrderByInput`
 */
export type email_authOrderByInput = Prisma.email_authOrderByInput

/**
 * @deprecated Renamed to `Prisma.email_authWhereUniqueInput`
 */
export type email_authWhereUniqueInput = Prisma.email_authWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.invested_fromWhereInput`
 */
export type invested_fromWhereInput = Prisma.invested_fromWhereInput

/**
 * @deprecated Renamed to `Prisma.invested_fromOrderByInput`
 */
export type invested_fromOrderByInput = Prisma.invested_fromOrderByInput

/**
 * @deprecated Renamed to `Prisma.invested_fromWhereUniqueInput`
 */
export type invested_fromWhereUniqueInput = Prisma.invested_fromWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.invested_toWhereInput`
 */
export type invested_toWhereInput = Prisma.invested_toWhereInput

/**
 * @deprecated Renamed to `Prisma.invested_toOrderByInput`
 */
export type invested_toOrderByInput = Prisma.invested_toOrderByInput

/**
 * @deprecated Renamed to `Prisma.invested_toWhereUniqueInput`
 */
export type invested_toWhereUniqueInput = Prisma.invested_toWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsWhereInput`
 */
export type investment_fundsWhereInput = Prisma.investment_fundsWhereInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsOrderByInput`
 */
export type investment_fundsOrderByInput = Prisma.investment_fundsOrderByInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsWhereUniqueInput`
 */
export type investment_fundsWhereUniqueInput = Prisma.investment_fundsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioWhereInput`
 */
export type investment_portfolioWhereInput = Prisma.investment_portfolioWhereInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioOrderByInput`
 */
export type investment_portfolioOrderByInput = Prisma.investment_portfolioOrderByInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioWhereUniqueInput`
 */
export type investment_portfolioWhereUniqueInput = Prisma.investment_portfolioWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesWhereInput`
 */
export type investment_seriesWhereInput = Prisma.investment_seriesWhereInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesOrderByInput`
 */
export type investment_seriesOrderByInput = Prisma.investment_seriesOrderByInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesWhereUniqueInput`
 */
export type investment_seriesWhereUniqueInput = Prisma.investment_seriesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsWhereInput`
 */
export type IR_requestsWhereInput = Prisma.IR_requestsWhereInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsOrderByInput`
 */
export type IR_requestsOrderByInput = Prisma.IR_requestsOrderByInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsWhereUniqueInput`
 */
export type IR_requestsWhereUniqueInput = Prisma.IR_requestsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.participantsWhereInput`
 */
export type participantsWhereInput = Prisma.participantsWhereInput

/**
 * @deprecated Renamed to `Prisma.participantsOrderByInput`
 */
export type participantsOrderByInput = Prisma.participantsOrderByInput

/**
 * @deprecated Renamed to `Prisma.participantsWhereUniqueInput`
 */
export type participantsWhereUniqueInput = Prisma.participantsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.partner_infosWhereInput`
 */
export type partner_infosWhereInput = Prisma.partner_infosWhereInput

/**
 * @deprecated Renamed to `Prisma.partner_infosOrderByInput`
 */
export type partner_infosOrderByInput = Prisma.partner_infosOrderByInput

/**
 * @deprecated Renamed to `Prisma.partner_infosWhereUniqueInput`
 */
export type partner_infosWhereUniqueInput = Prisma.partner_infosWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.partner_likesWhereInput`
 */
export type partner_likesWhereInput = Prisma.partner_likesWhereInput

/**
 * @deprecated Renamed to `Prisma.partner_likesOrderByInput`
 */
export type partner_likesOrderByInput = Prisma.partner_likesOrderByInput

/**
 * @deprecated Renamed to `Prisma.partner_likesWhereUniqueInput`
 */
export type partner_likesWhereUniqueInput = Prisma.partner_likesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.phone_authWhereInput`
 */
export type phone_authWhereInput = Prisma.phone_authWhereInput

/**
 * @deprecated Renamed to `Prisma.phone_authOrderByInput`
 */
export type phone_authOrderByInput = Prisma.phone_authOrderByInput

/**
 * @deprecated Renamed to `Prisma.phone_authWhereUniqueInput`
 */
export type phone_authWhereUniqueInput = Prisma.phone_authWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.project_imagesWhereInput`
 */
export type project_imagesWhereInput = Prisma.project_imagesWhereInput

/**
 * @deprecated Renamed to `Prisma.project_imagesOrderByInput`
 */
export type project_imagesOrderByInput = Prisma.project_imagesOrderByInput

/**
 * @deprecated Renamed to `Prisma.project_imagesWhereUniqueInput`
 */
export type project_imagesWhereUniqueInput = Prisma.project_imagesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.project_likesWhereInput`
 */
export type project_likesWhereInput = Prisma.project_likesWhereInput

/**
 * @deprecated Renamed to `Prisma.project_likesOrderByInput`
 */
export type project_likesOrderByInput = Prisma.project_likesOrderByInput

/**
 * @deprecated Renamed to `Prisma.project_likesWhereUniqueInput`
 */
export type project_likesWhereUniqueInput = Prisma.project_likesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.projectsWhereInput`
 */
export type projectsWhereInput = Prisma.projectsWhereInput

/**
 * @deprecated Renamed to `Prisma.projectsOrderByInput`
 */
export type projectsOrderByInput = Prisma.projectsOrderByInput

/**
 * @deprecated Renamed to `Prisma.projectsWhereUniqueInput`
 */
export type projectsWhereUniqueInput = Prisma.projectsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.questionsWhereInput`
 */
export type questionsWhereInput = Prisma.questionsWhereInput

/**
 * @deprecated Renamed to `Prisma.questionsOrderByInput`
 */
export type questionsOrderByInput = Prisma.questionsOrderByInput

/**
 * @deprecated Renamed to `Prisma.questionsWhereUniqueInput`
 */
export type questionsWhereUniqueInput = Prisma.questionsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectWhereInput`
 */
export type recent_views_projectWhereInput = Prisma.recent_views_projectWhereInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectOrderByInput`
 */
export type recent_views_projectOrderByInput = Prisma.recent_views_projectOrderByInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectWhereUniqueInput`
 */
export type recent_views_projectWhereUniqueInput = Prisma.recent_views_projectWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.required_documentsWhereInput`
 */
export type required_documentsWhereInput = Prisma.required_documentsWhereInput

/**
 * @deprecated Renamed to `Prisma.required_documentsOrderByInput`
 */
export type required_documentsOrderByInput = Prisma.required_documentsOrderByInput

/**
 * @deprecated Renamed to `Prisma.required_documentsWhereUniqueInput`
 */
export type required_documentsWhereUniqueInput = Prisma.required_documentsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.sectorsWhereInput`
 */
export type sectorsWhereInput = Prisma.sectorsWhereInput

/**
 * @deprecated Renamed to `Prisma.sectorsOrderByInput`
 */
export type sectorsOrderByInput = Prisma.sectorsOrderByInput

/**
 * @deprecated Renamed to `Prisma.sectorsWhereUniqueInput`
 */
export type sectorsWhereUniqueInput = Prisma.sectorsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.service_typesWhereInput`
 */
export type service_typesWhereInput = Prisma.service_typesWhereInput

/**
 * @deprecated Renamed to `Prisma.service_typesOrderByInput`
 */
export type service_typesOrderByInput = Prisma.service_typesOrderByInput

/**
 * @deprecated Renamed to `Prisma.service_typesWhereUniqueInput`
 */
export type service_typesWhereUniqueInput = Prisma.service_typesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsWhereInput`
 */
export type signup_methodsWhereInput = Prisma.signup_methodsWhereInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsOrderByInput`
 */
export type signup_methodsOrderByInput = Prisma.signup_methodsOrderByInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsWhereUniqueInput`
 */
export type signup_methodsWhereUniqueInput = Prisma.signup_methodsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesWhereInput`
 */
export type startup_imagesWhereInput = Prisma.startup_imagesWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesOrderByInput`
 */
export type startup_imagesOrderByInput = Prisma.startup_imagesOrderByInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesWhereUniqueInput`
 */
export type startup_imagesWhereUniqueInput = Prisma.startup_imagesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.startup_infosWhereInput`
 */
export type startup_infosWhereInput = Prisma.startup_infosWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_infosOrderByInput`
 */
export type startup_infosOrderByInput = Prisma.startup_infosOrderByInput

/**
 * @deprecated Renamed to `Prisma.startup_infosWhereUniqueInput`
 */
export type startup_infosWhereUniqueInput = Prisma.startup_infosWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.startup_likesWhereInput`
 */
export type startup_likesWhereInput = Prisma.startup_likesWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_likesOrderByInput`
 */
export type startup_likesOrderByInput = Prisma.startup_likesOrderByInput

/**
 * @deprecated Renamed to `Prisma.startup_likesWhereUniqueInput`
 */
export type startup_likesWhereUniqueInput = Prisma.startup_likesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.technologiesWhereInput`
 */
export type technologiesWhereInput = Prisma.technologiesWhereInput

/**
 * @deprecated Renamed to `Prisma.technologiesOrderByInput`
 */
export type technologiesOrderByInput = Prisma.technologiesOrderByInput

/**
 * @deprecated Renamed to `Prisma.technologiesWhereUniqueInput`
 */
export type technologiesWhereUniqueInput = Prisma.technologiesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.termsWhereInput`
 */
export type termsWhereInput = Prisma.termsWhereInput

/**
 * @deprecated Renamed to `Prisma.termsOrderByInput`
 */
export type termsOrderByInput = Prisma.termsOrderByInput

/**
 * @deprecated Renamed to `Prisma.termsWhereUniqueInput`
 */
export type termsWhereUniqueInput = Prisma.termsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsWhereInput`
 */
export type user_agreementsWhereInput = Prisma.user_agreementsWhereInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsOrderByInput`
 */
export type user_agreementsOrderByInput = Prisma.user_agreementsOrderByInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsWhereUniqueInput`
 */
export type user_agreementsWhereUniqueInput = Prisma.user_agreementsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.user_typesWhereInput`
 */
export type user_typesWhereInput = Prisma.user_typesWhereInput

/**
 * @deprecated Renamed to `Prisma.user_typesOrderByInput`
 */
export type user_typesOrderByInput = Prisma.user_typesOrderByInput

/**
 * @deprecated Renamed to `Prisma.user_typesWhereUniqueInput`
 */
export type user_typesWhereUniqueInput = Prisma.user_typesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.usersWhereInput`
 */
export type usersWhereInput = Prisma.usersWhereInput

/**
 * @deprecated Renamed to `Prisma.usersOrderByInput`
 */
export type usersOrderByInput = Prisma.usersOrderByInput

/**
 * @deprecated Renamed to `Prisma.usersWhereUniqueInput`
 */
export type usersWhereUniqueInput = Prisma.usersWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.votesWhereInput`
 */
export type votesWhereInput = Prisma.votesWhereInput

/**
 * @deprecated Renamed to `Prisma.votesOrderByInput`
 */
export type votesOrderByInput = Prisma.votesOrderByInput

/**
 * @deprecated Renamed to `Prisma.votesWhereUniqueInput`
 */
export type votesWhereUniqueInput = Prisma.votesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.answersCreateInput`
 */
export type answersCreateInput = Prisma.answersCreateInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateInput`
 */
export type answersUpdateInput = Prisma.answersUpdateInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateManyMutationInput`
 */
export type answersUpdateManyMutationInput = Prisma.answersUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateInput`
 */
export type applicantsCreateInput = Prisma.applicantsCreateInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateInput`
 */
export type applicantsUpdateInput = Prisma.applicantsUpdateInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyMutationInput`
 */
export type applicantsUpdateManyMutationInput = Prisma.applicantsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.business_typesCreateInput`
 */
export type business_typesCreateInput = Prisma.business_typesCreateInput

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateInput`
 */
export type business_typesUpdateInput = Prisma.business_typesUpdateInput

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateManyMutationInput`
 */
export type business_typesUpdateManyMutationInput = Prisma.business_typesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateInput`
 */
export type companiesCreateInput = Prisma.companiesCreateInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateInput`
 */
export type companiesUpdateInput = Prisma.companiesUpdateInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateManyMutationInput`
 */
export type companiesUpdateManyMutationInput = Prisma.companiesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateInput`
 */
export type company_documentsCreateInput = Prisma.company_documentsCreateInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateInput`
 */
export type company_documentsUpdateInput = Prisma.company_documentsUpdateInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyMutationInput`
 */
export type company_documentsUpdateManyMutationInput = Prisma.company_documentsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.company_membersCreateInput`
 */
export type company_membersCreateInput = Prisma.company_membersCreateInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateInput`
 */
export type company_membersUpdateInput = Prisma.company_membersUpdateInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateManyMutationInput`
 */
export type company_membersUpdateManyMutationInput = Prisma.company_membersUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.company_newsCreateInput`
 */
export type company_newsCreateInput = Prisma.company_newsCreateInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateInput`
 */
export type company_newsUpdateInput = Prisma.company_newsUpdateInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateManyMutationInput`
 */
export type company_newsUpdateManyMutationInput = Prisma.company_newsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.company_typesCreateInput`
 */
export type company_typesCreateInput = Prisma.company_typesCreateInput

/**
 * @deprecated Renamed to `Prisma.company_typesUpdateInput`
 */
export type company_typesUpdateInput = Prisma.company_typesUpdateInput

/**
 * @deprecated Renamed to `Prisma.company_typesUpdateManyMutationInput`
 */
export type company_typesUpdateManyMutationInput = Prisma.company_typesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateInput`
 */
export type demodaysCreateInput = Prisma.demodaysCreateInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateInput`
 */
export type demodaysUpdateInput = Prisma.demodaysUpdateInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateManyMutationInput`
 */
export type demodaysUpdateManyMutationInput = Prisma.demodaysUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateInput`
 */
export type document_typesCreateInput = Prisma.document_typesCreateInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateInput`
 */
export type document_typesUpdateInput = Prisma.document_typesUpdateInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateManyMutationInput`
 */
export type document_typesUpdateManyMutationInput = Prisma.document_typesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.email_authCreateInput`
 */
export type email_authCreateInput = Prisma.email_authCreateInput

/**
 * @deprecated Renamed to `Prisma.email_authUpdateInput`
 */
export type email_authUpdateInput = Prisma.email_authUpdateInput

/**
 * @deprecated Renamed to `Prisma.email_authUpdateManyMutationInput`
 */
export type email_authUpdateManyMutationInput = Prisma.email_authUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateInput`
 */
export type invested_fromCreateInput = Prisma.invested_fromCreateInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateInput`
 */
export type invested_fromUpdateInput = Prisma.invested_fromUpdateInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyMutationInput`
 */
export type invested_fromUpdateManyMutationInput = Prisma.invested_fromUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateInput`
 */
export type invested_toCreateInput = Prisma.invested_toCreateInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateInput`
 */
export type invested_toUpdateInput = Prisma.invested_toUpdateInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyMutationInput`
 */
export type invested_toUpdateManyMutationInput = Prisma.invested_toUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsCreateInput`
 */
export type investment_fundsCreateInput = Prisma.investment_fundsCreateInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateInput`
 */
export type investment_fundsUpdateInput = Prisma.investment_fundsUpdateInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateManyMutationInput`
 */
export type investment_fundsUpdateManyMutationInput = Prisma.investment_fundsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioCreateInput`
 */
export type investment_portfolioCreateInput = Prisma.investment_portfolioCreateInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateInput`
 */
export type investment_portfolioUpdateInput = Prisma.investment_portfolioUpdateInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateManyMutationInput`
 */
export type investment_portfolioUpdateManyMutationInput = Prisma.investment_portfolioUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateInput`
 */
export type investment_seriesCreateInput = Prisma.investment_seriesCreateInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateInput`
 */
export type investment_seriesUpdateInput = Prisma.investment_seriesUpdateInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateManyMutationInput`
 */
export type investment_seriesUpdateManyMutationInput = Prisma.investment_seriesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateInput`
 */
export type IR_requestsCreateInput = Prisma.IR_requestsCreateInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateInput`
 */
export type IR_requestsUpdateInput = Prisma.IR_requestsUpdateInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyMutationInput`
 */
export type IR_requestsUpdateManyMutationInput = Prisma.IR_requestsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateInput`
 */
export type participantsCreateInput = Prisma.participantsCreateInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateInput`
 */
export type participantsUpdateInput = Prisma.participantsUpdateInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyMutationInput`
 */
export type participantsUpdateManyMutationInput = Prisma.participantsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateInput`
 */
export type partner_infosCreateInput = Prisma.partner_infosCreateInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateInput`
 */
export type partner_infosUpdateInput = Prisma.partner_infosUpdateInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyMutationInput`
 */
export type partner_infosUpdateManyMutationInput = Prisma.partner_infosUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateInput`
 */
export type partner_likesCreateInput = Prisma.partner_likesCreateInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateInput`
 */
export type partner_likesUpdateInput = Prisma.partner_likesUpdateInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyMutationInput`
 */
export type partner_likesUpdateManyMutationInput = Prisma.partner_likesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.phone_authCreateInput`
 */
export type phone_authCreateInput = Prisma.phone_authCreateInput

/**
 * @deprecated Renamed to `Prisma.phone_authUpdateInput`
 */
export type phone_authUpdateInput = Prisma.phone_authUpdateInput

/**
 * @deprecated Renamed to `Prisma.phone_authUpdateManyMutationInput`
 */
export type phone_authUpdateManyMutationInput = Prisma.phone_authUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.project_imagesCreateInput`
 */
export type project_imagesCreateInput = Prisma.project_imagesCreateInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateInput`
 */
export type project_imagesUpdateInput = Prisma.project_imagesUpdateInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateManyMutationInput`
 */
export type project_imagesUpdateManyMutationInput = Prisma.project_imagesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateInput`
 */
export type project_likesCreateInput = Prisma.project_likesCreateInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateInput`
 */
export type project_likesUpdateInput = Prisma.project_likesUpdateInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyMutationInput`
 */
export type project_likesUpdateManyMutationInput = Prisma.project_likesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateInput`
 */
export type projectsCreateInput = Prisma.projectsCreateInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateInput`
 */
export type projectsUpdateInput = Prisma.projectsUpdateInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyMutationInput`
 */
export type projectsUpdateManyMutationInput = Prisma.projectsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateInput`
 */
export type questionsCreateInput = Prisma.questionsCreateInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateInput`
 */
export type questionsUpdateInput = Prisma.questionsUpdateInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyMutationInput`
 */
export type questionsUpdateManyMutationInput = Prisma.questionsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateInput`
 */
export type recent_views_projectCreateInput = Prisma.recent_views_projectCreateInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateInput`
 */
export type recent_views_projectUpdateInput = Prisma.recent_views_projectUpdateInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyMutationInput`
 */
export type recent_views_projectUpdateManyMutationInput = Prisma.recent_views_projectUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateInput`
 */
export type required_documentsCreateInput = Prisma.required_documentsCreateInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateInput`
 */
export type required_documentsUpdateInput = Prisma.required_documentsUpdateInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyMutationInput`
 */
export type required_documentsUpdateManyMutationInput = Prisma.required_documentsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateInput`
 */
export type sectorsCreateInput = Prisma.sectorsCreateInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateInput`
 */
export type sectorsUpdateInput = Prisma.sectorsUpdateInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateManyMutationInput`
 */
export type sectorsUpdateManyMutationInput = Prisma.sectorsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.service_typesCreateInput`
 */
export type service_typesCreateInput = Prisma.service_typesCreateInput

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateInput`
 */
export type service_typesUpdateInput = Prisma.service_typesUpdateInput

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateManyMutationInput`
 */
export type service_typesUpdateManyMutationInput = Prisma.service_typesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsCreateInput`
 */
export type signup_methodsCreateInput = Prisma.signup_methodsCreateInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateInput`
 */
export type signup_methodsUpdateInput = Prisma.signup_methodsUpdateInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateManyMutationInput`
 */
export type signup_methodsUpdateManyMutationInput = Prisma.signup_methodsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesCreateInput`
 */
export type startup_imagesCreateInput = Prisma.startup_imagesCreateInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateInput`
 */
export type startup_imagesUpdateInput = Prisma.startup_imagesUpdateInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateManyMutationInput`
 */
export type startup_imagesUpdateManyMutationInput = Prisma.startup_imagesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateInput`
 */
export type startup_infosCreateInput = Prisma.startup_infosCreateInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateInput`
 */
export type startup_infosUpdateInput = Prisma.startup_infosUpdateInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyMutationInput`
 */
export type startup_infosUpdateManyMutationInput = Prisma.startup_infosUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateInput`
 */
export type startup_likesCreateInput = Prisma.startup_likesCreateInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateInput`
 */
export type startup_likesUpdateInput = Prisma.startup_likesUpdateInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyMutationInput`
 */
export type startup_likesUpdateManyMutationInput = Prisma.startup_likesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateInput`
 */
export type technologiesCreateInput = Prisma.technologiesCreateInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateInput`
 */
export type technologiesUpdateInput = Prisma.technologiesUpdateInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateManyMutationInput`
 */
export type technologiesUpdateManyMutationInput = Prisma.technologiesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.termsCreateInput`
 */
export type termsCreateInput = Prisma.termsCreateInput

/**
 * @deprecated Renamed to `Prisma.termsUpdateInput`
 */
export type termsUpdateInput = Prisma.termsUpdateInput

/**
 * @deprecated Renamed to `Prisma.termsUpdateManyMutationInput`
 */
export type termsUpdateManyMutationInput = Prisma.termsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateInput`
 */
export type user_agreementsCreateInput = Prisma.user_agreementsCreateInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateInput`
 */
export type user_agreementsUpdateInput = Prisma.user_agreementsUpdateInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyMutationInput`
 */
export type user_agreementsUpdateManyMutationInput = Prisma.user_agreementsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateInput`
 */
export type user_typesCreateInput = Prisma.user_typesCreateInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateInput`
 */
export type user_typesUpdateInput = Prisma.user_typesUpdateInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateManyMutationInput`
 */
export type user_typesUpdateManyMutationInput = Prisma.user_typesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.usersCreateInput`
 */
export type usersCreateInput = Prisma.usersCreateInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateInput`
 */
export type usersUpdateInput = Prisma.usersUpdateInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyMutationInput`
 */
export type usersUpdateManyMutationInput = Prisma.usersUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.votesCreateInput`
 */
export type votesCreateInput = Prisma.votesCreateInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateInput`
 */
export type votesUpdateInput = Prisma.votesUpdateInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyMutationInput`
 */
export type votesUpdateManyMutationInput = Prisma.votesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.QuestionsRelationFilter`
 */
export type QuestionsRelationFilter = Prisma.QuestionsRelationFilter

/**
 * @deprecated Renamed to `Prisma.CompaniesRelationFilter`
 */
export type CompaniesRelationFilter = Prisma.CompaniesRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProjectsRelationFilter`
 */
export type ProjectsRelationFilter = Prisma.ProjectsRelationFilter

/**
 * @deprecated Renamed to `Prisma.Startup_infosListRelationFilter`
 */
export type Startup_infosListRelationFilter = Prisma.Startup_infosListRelationFilter

/**
 * @deprecated Renamed to `Prisma.IntNullableFilter`
 */
export type IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeNullableFilter`
 */
export type DateTimeNullableFilter = Prisma.DateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.User_typesRelationFilter`
 */
export type User_typesRelationFilter = Prisma.User_typesRelationFilter

/**
 * @deprecated Renamed to `Prisma.ApplicantsListRelationFilter`
 */
export type ApplicantsListRelationFilter = Prisma.ApplicantsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Company_documentsListRelationFilter`
 */
export type Company_documentsListRelationFilter = Prisma.Company_documentsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Company_membersListRelationFilter`
 */
export type Company_membersListRelationFilter = Prisma.Company_membersListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Company_newsListRelationFilter`
 */
export type Company_newsListRelationFilter = Prisma.Company_newsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.DemodaysListRelationFilter`
 */
export type DemodaysListRelationFilter = Prisma.DemodaysListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Invested_toListRelationFilter`
 */
export type Invested_toListRelationFilter = Prisma.Invested_toListRelationFilter

/**
 * @deprecated Renamed to `Prisma.IR_requestsListRelationFilter`
 */
export type IR_requestsListRelationFilter = Prisma.IR_requestsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.ParticipantsListRelationFilter`
 */
export type ParticipantsListRelationFilter = Prisma.ParticipantsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Partner_infosListRelationFilter`
 */
export type Partner_infosListRelationFilter = Prisma.Partner_infosListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Partner_likesListRelationFilter`
 */
export type Partner_likesListRelationFilter = Prisma.Partner_likesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Project_likesListRelationFilter`
 */
export type Project_likesListRelationFilter = Prisma.Project_likesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProjectsListRelationFilter`
 */
export type ProjectsListRelationFilter = Prisma.ProjectsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.QuestionsListRelationFilter`
 */
export type QuestionsListRelationFilter = Prisma.QuestionsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Recent_views_projectListRelationFilter`
 */
export type Recent_views_projectListRelationFilter = Prisma.Recent_views_projectListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Startup_likesListRelationFilter`
 */
export type Startup_likesListRelationFilter = Prisma.Startup_likesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UsersListRelationFilter`
 */
export type UsersListRelationFilter = Prisma.UsersListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Document_typesRelationFilter`
 */
export type Document_typesRelationFilter = Prisma.Document_typesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Required_documentsListRelationFilter`
 */
export type Required_documentsListRelationFilter = Prisma.Required_documentsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Investment_seriesRelationFilter`
 */
export type Investment_seriesRelationFilter = Prisma.Investment_seriesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Startup_infosRelationFilter`
 */
export type Startup_infosRelationFilter = Prisma.Startup_infosRelationFilter

/**
 * @deprecated Renamed to `Prisma.Partner_infosRelationFilter`
 */
export type Partner_infosRelationFilter = Prisma.Partner_infosRelationFilter

/**
 * @deprecated Renamed to `Prisma.Invested_fromListRelationFilter`
 */
export type Invested_fromListRelationFilter = Prisma.Invested_fromListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Company_documentsRelationFilter`
 */
export type Company_documentsRelationFilter = Prisma.Company_documentsRelationFilter

/**
 * @deprecated Renamed to `Prisma.DemodaysRelationFilter`
 */
export type DemodaysRelationFilter = Prisma.DemodaysRelationFilter

/**
 * @deprecated Renamed to `Prisma.VotesListRelationFilter`
 */
export type VotesListRelationFilter = Prisma.VotesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.TechnologiesRelationFilter`
 */
export type TechnologiesRelationFilter = Prisma.TechnologiesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Investment_fundsRelationFilter`
 */
export type Investment_fundsRelationFilter = Prisma.Investment_fundsRelationFilter

/**
 * @deprecated Renamed to `Prisma.Investment_portfolioListRelationFilter`
 */
export type Investment_portfolioListRelationFilter = Prisma.Investment_portfolioListRelationFilter

/**
 * @deprecated Renamed to `Prisma.SectorsRelationFilter`
 */
export type SectorsRelationFilter = Prisma.SectorsRelationFilter

/**
 * @deprecated Renamed to `Prisma.Project_imagesListRelationFilter`
 */
export type Project_imagesListRelationFilter = Prisma.Project_imagesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UsersRelationFilter`
 */
export type UsersRelationFilter = Prisma.UsersRelationFilter

/**
 * @deprecated Renamed to `Prisma.AnswersListRelationFilter`
 */
export type AnswersListRelationFilter = Prisma.AnswersListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Business_typesRelationFilter`
 */
export type Business_typesRelationFilter = Prisma.Business_typesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Service_typesRelationFilter`
 */
export type Service_typesRelationFilter = Prisma.Service_typesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Startup_imagesListRelationFilter`
 */
export type Startup_imagesListRelationFilter = Prisma.Startup_imagesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.User_agreementsListRelationFilter`
 */
export type User_agreementsListRelationFilter = Prisma.User_agreementsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.TermsRelationFilter`
 */
export type TermsRelationFilter = Prisma.TermsRelationFilter

/**
 * @deprecated Renamed to `Prisma.CompaniesListRelationFilter`
 */
export type CompaniesListRelationFilter = Prisma.CompaniesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.Signup_methodsRelationFilter`
 */
export type Signup_methodsRelationFilter = Prisma.Signup_methodsRelationFilter

/**
 * @deprecated Renamed to `Prisma.ParticipantsRelationFilter`
 */
export type ParticipantsRelationFilter = Prisma.ParticipantsRelationFilter

/**
 * @deprecated Renamed to `Prisma.questionsCreateOneWithoutAnswersInput`
 */
export type questionsCreateOneWithoutAnswersInput = Prisma.questionsCreateOneWithoutAnswersInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateOneRequiredWithoutAnswersInput`
 */
export type questionsUpdateOneRequiredWithoutAnswersInput = Prisma.questionsUpdateOneRequiredWithoutAnswersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutApplicantsInput`
 */
export type companiesCreateOneWithoutApplicantsInput = Prisma.companiesCreateOneWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOneWithoutApplicantsInput`
 */
export type projectsCreateOneWithoutApplicantsInput = Prisma.projectsCreateOneWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutApplicantsInput`
 */
export type companiesUpdateOneRequiredWithoutApplicantsInput = Prisma.companiesUpdateOneRequiredWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateOneRequiredWithoutApplicantsInput`
 */
export type projectsUpdateOneRequiredWithoutApplicantsInput = Prisma.projectsUpdateOneRequiredWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateManyWithoutBusiness_typesInput`
 */
export type startup_infosCreateManyWithoutBusiness_typesInput = Prisma.startup_infosCreateManyWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithoutBusiness_typesInput`
 */
export type startup_infosUpdateManyWithoutBusiness_typesInput = Prisma.startup_infosUpdateManyWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateOneWithoutCompaniesInput`
 */
export type user_typesCreateOneWithoutCompaniesInput = Prisma.user_typesCreateOneWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateManyWithoutCompaniesInput`
 */
export type applicantsCreateManyWithoutCompaniesInput = Prisma.applicantsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateManyWithoutCompaniesInput`
 */
export type company_documentsCreateManyWithoutCompaniesInput = Prisma.company_documentsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersCreateManyWithoutCompaniesInput`
 */
export type company_membersCreateManyWithoutCompaniesInput = Prisma.company_membersCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsCreateManyWithoutCompaniesInput`
 */
export type company_newsCreateManyWithoutCompaniesInput = Prisma.company_newsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateManyWithoutCompaniesInput`
 */
export type demodaysCreateManyWithoutCompaniesInput = Prisma.demodaysCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateManyWithoutCompaniesInput`
 */
export type invested_toCreateManyWithoutCompaniesInput = Prisma.invested_toCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateManyWithoutCompaniesInput`
 */
export type IR_requestsCreateManyWithoutCompaniesInput = Prisma.IR_requestsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateManyWithoutCompaniesInput`
 */
export type participantsCreateManyWithoutCompaniesInput = Prisma.participantsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateManyWithoutCompaniesInput`
 */
export type partner_infosCreateManyWithoutCompaniesInput = Prisma.partner_infosCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesCreateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateManyWithoutCompaniesInput`
 */
export type project_likesCreateManyWithoutCompaniesInput = Prisma.project_likesCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateManyWithoutCompaniesInput`
 */
export type projectsCreateManyWithoutCompaniesInput = Prisma.projectsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateManyWithoutCompaniesInput`
 */
export type questionsCreateManyWithoutCompaniesInput = Prisma.questionsCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateManyWithoutCompaniesInput`
 */
export type recent_views_projectCreateManyWithoutCompaniesInput = Prisma.recent_views_projectCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateManyWithoutCompaniesInput`
 */
export type startup_infosCreateManyWithoutCompaniesInput = Prisma.startup_infosCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateManyWithoutCompaniesInput`
 */
export type startup_likesCreateManyWithoutCompaniesInput = Prisma.startup_likesCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateManyWithoutCompaniesInput`
 */
export type usersCreateManyWithoutCompaniesInput = Prisma.usersCreateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableDateTimeFieldUpdateOperationsInput`
 */
export type NullableDateTimeFieldUpdateOperationsInput = Prisma.NullableDateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableIntFieldUpdateOperationsInput`
 */
export type NullableIntFieldUpdateOperationsInput = Prisma.NullableIntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateOneWithoutCompaniesInput`
 */
export type user_typesUpdateOneWithoutCompaniesInput = Prisma.user_typesUpdateOneWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyWithoutCompaniesInput`
 */
export type applicantsUpdateManyWithoutCompaniesInput = Prisma.applicantsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyWithoutCompaniesInput`
 */
export type company_documentsUpdateManyWithoutCompaniesInput = Prisma.company_documentsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateManyWithoutCompaniesInput`
 */
export type company_membersUpdateManyWithoutCompaniesInput = Prisma.company_membersUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateManyWithoutCompaniesInput`
 */
export type company_newsUpdateManyWithoutCompaniesInput = Prisma.company_newsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateManyWithoutCompaniesInput`
 */
export type demodaysUpdateManyWithoutCompaniesInput = Prisma.demodaysUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyWithoutCompaniesInput`
 */
export type invested_toUpdateManyWithoutCompaniesInput = Prisma.invested_toUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithoutCompaniesInput`
 */
export type IR_requestsUpdateManyWithoutCompaniesInput = Prisma.IR_requestsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyWithoutCompaniesInput`
 */
export type participantsUpdateManyWithoutCompaniesInput = Prisma.participantsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithoutCompaniesInput`
 */
export type partner_infosUpdateManyWithoutCompaniesInput = Prisma.partner_infosUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesUpdateManyWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyWithoutCompaniesInput`
 */
export type project_likesUpdateManyWithoutCompaniesInput = Prisma.project_likesUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyWithoutCompaniesInput`
 */
export type projectsUpdateManyWithoutCompaniesInput = Prisma.projectsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithoutCompaniesInput`
 */
export type questionsUpdateManyWithoutCompaniesInput = Prisma.questionsUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyWithoutCompaniesInput`
 */
export type recent_views_projectUpdateManyWithoutCompaniesInput = Prisma.recent_views_projectUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithoutCompaniesInput`
 */
export type startup_infosUpdateManyWithoutCompaniesInput = Prisma.startup_infosUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyWithoutCompaniesInput`
 */
export type startup_likesUpdateManyWithoutCompaniesInput = Prisma.startup_likesUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithoutCompaniesInput`
 */
export type usersUpdateManyWithoutCompaniesInput = Prisma.usersUpdateManyWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutCompany_documentsInput`
 */
export type companiesCreateOneWithoutCompany_documentsInput = Prisma.companiesCreateOneWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateOneWithoutCompany_documentsInput`
 */
export type document_typesCreateOneWithoutCompany_documentsInput = Prisma.document_typesCreateOneWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateManyWithoutCompany_documentsInput`
 */
export type IR_requestsCreateManyWithoutCompany_documentsInput = Prisma.IR_requestsCreateManyWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutCompany_documentsInput`
 */
export type companiesUpdateOneRequiredWithoutCompany_documentsInput = Prisma.companiesUpdateOneRequiredWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateOneRequiredWithoutCompany_documentsInput`
 */
export type document_typesUpdateOneRequiredWithoutCompany_documentsInput = Prisma.document_typesUpdateOneRequiredWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithoutCompany_documentsInput`
 */
export type IR_requestsUpdateManyWithoutCompany_documentsInput = Prisma.IR_requestsUpdateManyWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutCompany_membersInput`
 */
export type companiesCreateOneWithoutCompany_membersInput = Prisma.companiesCreateOneWithoutCompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneWithoutCompany_membersInput`
 */
export type companiesUpdateOneWithoutCompany_membersInput = Prisma.companiesUpdateOneWithoutCompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutCompany_newsInput`
 */
export type companiesCreateOneWithoutCompany_newsInput = Prisma.companiesCreateOneWithoutCompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutCompany_newsInput`
 */
export type companiesUpdateOneRequiredWithoutCompany_newsInput = Prisma.companiesUpdateOneRequiredWithoutCompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutDemodaysInput`
 */
export type companiesCreateOneWithoutDemodaysInput = Prisma.companiesCreateOneWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateManyWithoutDemodaysInput`
 */
export type participantsCreateManyWithoutDemodaysInput = Prisma.participantsCreateManyWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateManyWithoutDemodaysInput`
 */
export type questionsCreateManyWithoutDemodaysInput = Prisma.questionsCreateManyWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneWithoutDemodaysInput`
 */
export type companiesUpdateOneWithoutDemodaysInput = Prisma.companiesUpdateOneWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyWithoutDemodaysInput`
 */
export type participantsUpdateManyWithoutDemodaysInput = Prisma.participantsUpdateManyWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithoutDemodaysInput`
 */
export type questionsUpdateManyWithoutDemodaysInput = Prisma.questionsUpdateManyWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateManyWithoutDocument_typesInput`
 */
export type company_documentsCreateManyWithoutDocument_typesInput = Prisma.company_documentsCreateManyWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateManyWithoutDocument_typesInput`
 */
export type required_documentsCreateManyWithoutDocument_typesInput = Prisma.required_documentsCreateManyWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyWithoutDocument_typesInput`
 */
export type company_documentsUpdateManyWithoutDocument_typesInput = Prisma.company_documentsUpdateManyWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyWithoutDocument_typesInput`
 */
export type required_documentsUpdateManyWithoutDocument_typesInput = Prisma.required_documentsUpdateManyWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateOneWithoutInvested_fromInput`
 */
export type investment_seriesCreateOneWithoutInvested_fromInput = Prisma.investment_seriesCreateOneWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOneWithoutInvested_fromInput`
 */
export type startup_infosCreateOneWithoutInvested_fromInput = Prisma.startup_infosCreateOneWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateOneRequiredWithoutInvested_fromInput`
 */
export type investment_seriesUpdateOneRequiredWithoutInvested_fromInput = Prisma.investment_seriesUpdateOneRequiredWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateOneRequiredWithoutInvested_fromInput`
 */
export type startup_infosUpdateOneRequiredWithoutInvested_fromInput = Prisma.startup_infosUpdateOneRequiredWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutInvested_toInput`
 */
export type companiesCreateOneWithoutInvested_toInput = Prisma.companiesCreateOneWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateOneWithoutInvested_toInput`
 */
export type investment_seriesCreateOneWithoutInvested_toInput = Prisma.investment_seriesCreateOneWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutInvested_toInput`
 */
export type companiesUpdateOneRequiredWithoutInvested_toInput = Prisma.companiesUpdateOneRequiredWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateOneRequiredWithoutInvested_toInput`
 */
export type investment_seriesUpdateOneRequiredWithoutInvested_toInput = Prisma.investment_seriesUpdateOneRequiredWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateManyWithoutInvestment_fundsInput`
 */
export type partner_infosCreateManyWithoutInvestment_fundsInput = Prisma.partner_infosCreateManyWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithoutInvestment_fundsInput`
 */
export type partner_infosUpdateManyWithoutInvestment_fundsInput = Prisma.partner_infosUpdateManyWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOneWithoutInvestment_portfolioInput`
 */
export type partner_infosCreateOneWithoutInvestment_portfolioInput = Prisma.partner_infosCreateOneWithoutInvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateOneRequiredWithoutInvestment_portfolioInput`
 */
export type partner_infosUpdateOneRequiredWithoutInvestment_portfolioInput = Prisma.partner_infosUpdateOneRequiredWithoutInvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateManyWithoutInvestment_seriesInput`
 */
export type invested_fromCreateManyWithoutInvestment_seriesInput = Prisma.invested_fromCreateManyWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateManyWithoutInvestment_seriesInput`
 */
export type invested_toCreateManyWithoutInvestment_seriesInput = Prisma.invested_toCreateManyWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyWithoutInvestment_seriesInput`
 */
export type invested_fromUpdateManyWithoutInvestment_seriesInput = Prisma.invested_fromUpdateManyWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyWithoutInvestment_seriesInput`
 */
export type invested_toUpdateManyWithoutInvestment_seriesInput = Prisma.invested_toUpdateManyWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateOneWithoutIR_requestsInput`
 */
export type company_documentsCreateOneWithoutIR_requestsInput = Prisma.company_documentsCreateOneWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOneWithoutIR_requestsInput`
 */
export type partner_infosCreateOneWithoutIR_requestsInput = Prisma.partner_infosCreateOneWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutIR_requestsInput`
 */
export type companiesCreateOneWithoutIR_requestsInput = Prisma.companiesCreateOneWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateOneWithoutIR_requestsInput`
 */
export type company_documentsUpdateOneWithoutIR_requestsInput = Prisma.company_documentsUpdateOneWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateOneRequiredWithoutIR_requestsInput`
 */
export type partner_infosUpdateOneRequiredWithoutIR_requestsInput = Prisma.partner_infosUpdateOneRequiredWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutIR_requestsInput`
 */
export type companiesUpdateOneRequiredWithoutIR_requestsInput = Prisma.companiesUpdateOneRequiredWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutParticipantsInput`
 */
export type companiesCreateOneWithoutParticipantsInput = Prisma.companiesCreateOneWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateOneWithoutParticipantsInput`
 */
export type demodaysCreateOneWithoutParticipantsInput = Prisma.demodaysCreateOneWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesCreateManyWithoutParticipantsInput`
 */
export type votesCreateManyWithoutParticipantsInput = Prisma.votesCreateManyWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutParticipantsInput`
 */
export type companiesUpdateOneRequiredWithoutParticipantsInput = Prisma.companiesUpdateOneRequiredWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateOneRequiredWithoutParticipantsInput`
 */
export type demodaysUpdateOneRequiredWithoutParticipantsInput = Prisma.demodaysUpdateOneRequiredWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyWithoutParticipantsInput`
 */
export type votesUpdateManyWithoutParticipantsInput = Prisma.votesUpdateManyWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutPartner_infosInput`
 */
export type companiesCreateOneWithoutPartner_infosInput = Prisma.companiesCreateOneWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateOneWithoutPartner_infosInput`
 */
export type technologiesCreateOneWithoutPartner_infosInput = Prisma.technologiesCreateOneWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsCreateOneWithoutPartner_infosInput`
 */
export type investment_fundsCreateOneWithoutPartner_infosInput = Prisma.investment_fundsCreateOneWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioCreateManyWithoutPartner_infosInput`
 */
export type investment_portfolioCreateManyWithoutPartner_infosInput = Prisma.investment_portfolioCreateManyWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateManyWithoutPartner_infosInput`
 */
export type IR_requestsCreateManyWithoutPartner_infosInput = Prisma.IR_requestsCreateManyWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutPartner_infosInput`
 */
export type companiesUpdateOneRequiredWithoutPartner_infosInput = Prisma.companiesUpdateOneRequiredWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateOneWithoutPartner_infosInput`
 */
export type technologiesUpdateOneWithoutPartner_infosInput = Prisma.technologiesUpdateOneWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateOneWithoutPartner_infosInput`
 */
export type investment_fundsUpdateOneWithoutPartner_infosInput = Prisma.investment_fundsUpdateOneWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateManyWithoutPartner_infosInput`
 */
export type investment_portfolioUpdateManyWithoutPartner_infosInput = Prisma.investment_portfolioUpdateManyWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithoutPartner_infosInput`
 */
export type IR_requestsUpdateManyWithoutPartner_infosInput = Prisma.IR_requestsUpdateManyWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesCreateOneWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesUpdateOneRequiredWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOneWithoutProject_imagesInput`
 */
export type projectsCreateOneWithoutProject_imagesInput = Prisma.projectsCreateOneWithoutProject_imagesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateOneRequiredWithoutProject_imagesInput`
 */
export type projectsUpdateOneRequiredWithoutProject_imagesInput = Prisma.projectsUpdateOneRequiredWithoutProject_imagesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutProject_likesInput`
 */
export type companiesCreateOneWithoutProject_likesInput = Prisma.companiesCreateOneWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOneWithoutProject_likesInput`
 */
export type projectsCreateOneWithoutProject_likesInput = Prisma.projectsCreateOneWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutProject_likesInput`
 */
export type companiesUpdateOneRequiredWithoutProject_likesInput = Prisma.companiesUpdateOneRequiredWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateOneRequiredWithoutProject_likesInput`
 */
export type projectsUpdateOneRequiredWithoutProject_likesInput = Prisma.projectsUpdateOneRequiredWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutProjectsInput`
 */
export type companiesCreateOneWithoutProjectsInput = Prisma.companiesCreateOneWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateOneWithoutProjectsInput`
 */
export type sectorsCreateOneWithoutProjectsInput = Prisma.sectorsCreateOneWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateManyWithoutProjectsInput`
 */
export type applicantsCreateManyWithoutProjectsInput = Prisma.applicantsCreateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesCreateManyWithoutProjectsInput`
 */
export type project_imagesCreateManyWithoutProjectsInput = Prisma.project_imagesCreateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateManyWithoutProjectsInput`
 */
export type project_likesCreateManyWithoutProjectsInput = Prisma.project_likesCreateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateManyWithoutProjectsInput`
 */
export type recent_views_projectCreateManyWithoutProjectsInput = Prisma.recent_views_projectCreateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateManyWithoutProjectsInput`
 */
export type required_documentsCreateManyWithoutProjectsInput = Prisma.required_documentsCreateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneWithoutProjectsInput`
 */
export type companiesUpdateOneWithoutProjectsInput = Prisma.companiesUpdateOneWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateOneWithoutProjectsInput`
 */
export type sectorsUpdateOneWithoutProjectsInput = Prisma.sectorsUpdateOneWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyWithoutProjectsInput`
 */
export type applicantsUpdateManyWithoutProjectsInput = Prisma.applicantsUpdateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateManyWithoutProjectsInput`
 */
export type project_imagesUpdateManyWithoutProjectsInput = Prisma.project_imagesUpdateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyWithoutProjectsInput`
 */
export type project_likesUpdateManyWithoutProjectsInput = Prisma.project_likesUpdateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyWithoutProjectsInput`
 */
export type recent_views_projectUpdateManyWithoutProjectsInput = Prisma.recent_views_projectUpdateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyWithoutProjectsInput`
 */
export type required_documentsUpdateManyWithoutProjectsInput = Prisma.required_documentsUpdateManyWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutQuestionsInput`
 */
export type companiesCreateOneWithoutQuestionsInput = Prisma.companiesCreateOneWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateOneWithoutQuestionsInput`
 */
export type demodaysCreateOneWithoutQuestionsInput = Prisma.demodaysCreateOneWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutQuestionsInput`
 */
export type usersCreateOneWithoutQuestionsInput = Prisma.usersCreateOneWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersCreateManyWithoutQuestionsInput`
 */
export type answersCreateManyWithoutQuestionsInput = Prisma.answersCreateManyWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutQuestionsInput`
 */
export type companiesUpdateOneRequiredWithoutQuestionsInput = Prisma.companiesUpdateOneRequiredWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateOneRequiredWithoutQuestionsInput`
 */
export type demodaysUpdateOneRequiredWithoutQuestionsInput = Prisma.demodaysUpdateOneRequiredWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutQuestionsInput`
 */
export type usersUpdateOneRequiredWithoutQuestionsInput = Prisma.usersUpdateOneRequiredWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateManyWithoutQuestionsInput`
 */
export type answersUpdateManyWithoutQuestionsInput = Prisma.answersUpdateManyWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutRecent_views_projectInput`
 */
export type companiesCreateOneWithoutRecent_views_projectInput = Prisma.companiesCreateOneWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOneWithoutRecent_views_projectInput`
 */
export type projectsCreateOneWithoutRecent_views_projectInput = Prisma.projectsCreateOneWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutRecent_views_projectInput`
 */
export type companiesUpdateOneRequiredWithoutRecent_views_projectInput = Prisma.companiesUpdateOneRequiredWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateOneRequiredWithoutRecent_views_projectInput`
 */
export type projectsUpdateOneRequiredWithoutRecent_views_projectInput = Prisma.projectsUpdateOneRequiredWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateOneWithoutRequired_documentsInput`
 */
export type document_typesCreateOneWithoutRequired_documentsInput = Prisma.document_typesCreateOneWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOneWithoutRequired_documentsInput`
 */
export type projectsCreateOneWithoutRequired_documentsInput = Prisma.projectsCreateOneWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateOneRequiredWithoutRequired_documentsInput`
 */
export type document_typesUpdateOneRequiredWithoutRequired_documentsInput = Prisma.document_typesUpdateOneRequiredWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateOneRequiredWithoutRequired_documentsInput`
 */
export type projectsUpdateOneRequiredWithoutRequired_documentsInput = Prisma.projectsUpdateOneRequiredWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateManyWithoutSectorsInput`
 */
export type projectsCreateManyWithoutSectorsInput = Prisma.projectsCreateManyWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateManyWithoutSectorsInput`
 */
export type startup_infosCreateManyWithoutSectorsInput = Prisma.startup_infosCreateManyWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyWithoutSectorsInput`
 */
export type projectsUpdateManyWithoutSectorsInput = Prisma.projectsUpdateManyWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithoutSectorsInput`
 */
export type startup_infosUpdateManyWithoutSectorsInput = Prisma.startup_infosUpdateManyWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateManyWithoutService_typesInput`
 */
export type startup_infosCreateManyWithoutService_typesInput = Prisma.startup_infosCreateManyWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithoutService_typesInput`
 */
export type startup_infosUpdateManyWithoutService_typesInput = Prisma.startup_infosUpdateManyWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateManyWithoutSignup_methodsInput`
 */
export type usersCreateManyWithoutSignup_methodsInput = Prisma.usersCreateManyWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithoutSignup_methodsInput`
 */
export type usersUpdateManyWithoutSignup_methodsInput = Prisma.usersUpdateManyWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOneWithoutStartup_imagesInput`
 */
export type startup_infosCreateOneWithoutStartup_imagesInput = Prisma.startup_infosCreateOneWithoutStartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateOneRequiredWithoutStartup_imagesInput`
 */
export type startup_infosUpdateOneRequiredWithoutStartup_imagesInput = Prisma.startup_infosUpdateOneRequiredWithoutStartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.business_typesCreateOneWithoutStartup_infosInput`
 */
export type business_typesCreateOneWithoutStartup_infosInput = Prisma.business_typesCreateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutStartup_infosInput`
 */
export type companiesCreateOneWithoutStartup_infosInput = Prisma.companiesCreateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateOneWithoutStartup_infosInput`
 */
export type technologiesCreateOneWithoutStartup_infosInput = Prisma.technologiesCreateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateOneWithoutStartup_infosInput`
 */
export type sectorsCreateOneWithoutStartup_infosInput = Prisma.sectorsCreateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesCreateOneWithoutStartup_infosInput`
 */
export type service_typesCreateOneWithoutStartup_infosInput = Prisma.service_typesCreateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateManyWithoutStartup_infosInput`
 */
export type invested_fromCreateManyWithoutStartup_infosInput = Prisma.invested_fromCreateManyWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesCreateManyWithoutStartup_infosInput`
 */
export type startup_imagesCreateManyWithoutStartup_infosInput = Prisma.startup_imagesCreateManyWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateOneWithoutStartup_infosInput`
 */
export type business_typesUpdateOneWithoutStartup_infosInput = Prisma.business_typesUpdateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutStartup_infosInput`
 */
export type companiesUpdateOneRequiredWithoutStartup_infosInput = Prisma.companiesUpdateOneRequiredWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateOneWithoutStartup_infosInput`
 */
export type technologiesUpdateOneWithoutStartup_infosInput = Prisma.technologiesUpdateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateOneWithoutStartup_infosInput`
 */
export type sectorsUpdateOneWithoutStartup_infosInput = Prisma.sectorsUpdateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateOneWithoutStartup_infosInput`
 */
export type service_typesUpdateOneWithoutStartup_infosInput = Prisma.service_typesUpdateOneWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyWithoutStartup_infosInput`
 */
export type invested_fromUpdateManyWithoutStartup_infosInput = Prisma.invested_fromUpdateManyWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateManyWithoutStartup_infosInput`
 */
export type startup_imagesUpdateManyWithoutStartup_infosInput = Prisma.startup_imagesUpdateManyWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutStartup_likesInput`
 */
export type companiesCreateOneWithoutStartup_likesInput = Prisma.companiesCreateOneWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutStartup_likesInput`
 */
export type usersCreateOneWithoutStartup_likesInput = Prisma.usersCreateOneWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneRequiredWithoutStartup_likesInput`
 */
export type companiesUpdateOneRequiredWithoutStartup_likesInput = Prisma.companiesUpdateOneRequiredWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutStartup_likesInput`
 */
export type usersUpdateOneRequiredWithoutStartup_likesInput = Prisma.usersUpdateOneRequiredWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateManyWithoutTechnologiesInput`
 */
export type partner_infosCreateManyWithoutTechnologiesInput = Prisma.partner_infosCreateManyWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateManyWithoutTechnologiesInput`
 */
export type startup_infosCreateManyWithoutTechnologiesInput = Prisma.startup_infosCreateManyWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithoutTechnologiesInput`
 */
export type partner_infosUpdateManyWithoutTechnologiesInput = Prisma.partner_infosUpdateManyWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithoutTechnologiesInput`
 */
export type startup_infosUpdateManyWithoutTechnologiesInput = Prisma.startup_infosUpdateManyWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateManyWithoutTermsInput`
 */
export type user_agreementsCreateManyWithoutTermsInput = Prisma.user_agreementsCreateManyWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyWithoutTermsInput`
 */
export type user_agreementsUpdateManyWithoutTermsInput = Prisma.user_agreementsUpdateManyWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.termsCreateOneWithoutUser_agreementsInput`
 */
export type termsCreateOneWithoutUser_agreementsInput = Prisma.termsCreateOneWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutUser_agreementsInput`
 */
export type usersCreateOneWithoutUser_agreementsInput = Prisma.usersCreateOneWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.termsUpdateOneRequiredWithoutUser_agreementsInput`
 */
export type termsUpdateOneRequiredWithoutUser_agreementsInput = Prisma.termsUpdateOneRequiredWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutUser_agreementsInput`
 */
export type usersUpdateOneRequiredWithoutUser_agreementsInput = Prisma.usersUpdateOneRequiredWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateManyWithoutUser_typesInput`
 */
export type companiesCreateManyWithoutUser_typesInput = Prisma.companiesCreateManyWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateManyWithoutUser_typesInput`
 */
export type usersCreateManyWithoutUser_typesInput = Prisma.usersCreateManyWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateManyWithoutUser_typesInput`
 */
export type companiesUpdateManyWithoutUser_typesInput = Prisma.companiesUpdateManyWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithoutUser_typesInput`
 */
export type usersUpdateManyWithoutUser_typesInput = Prisma.usersUpdateManyWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOneWithoutUsersInput`
 */
export type companiesCreateOneWithoutUsersInput = Prisma.companiesCreateOneWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsCreateOneWithoutUsersInput`
 */
export type signup_methodsCreateOneWithoutUsersInput = Prisma.signup_methodsCreateOneWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateOneWithoutUsersInput`
 */
export type user_typesCreateOneWithoutUsersInput = Prisma.user_typesCreateOneWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateManyWithoutUsersInput`
 */
export type questionsCreateManyWithoutUsersInput = Prisma.questionsCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateManyWithoutUsersInput`
 */
export type startup_likesCreateManyWithoutUsersInput = Prisma.startup_likesCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateManyWithoutUsersInput`
 */
export type user_agreementsCreateManyWithoutUsersInput = Prisma.user_agreementsCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesCreateManyWithoutUsersInput`
 */
export type votesCreateManyWithoutUsersInput = Prisma.votesCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateOneWithoutUsersInput`
 */
export type companiesUpdateOneWithoutUsersInput = Prisma.companiesUpdateOneWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateOneRequiredWithoutUsersInput`
 */
export type signup_methodsUpdateOneRequiredWithoutUsersInput = Prisma.signup_methodsUpdateOneRequiredWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateOneWithoutUsersInput`
 */
export type user_typesUpdateOneWithoutUsersInput = Prisma.user_typesUpdateOneWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithoutUsersInput`
 */
export type questionsUpdateManyWithoutUsersInput = Prisma.questionsUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyWithoutUsersInput`
 */
export type startup_likesUpdateManyWithoutUsersInput = Prisma.startup_likesUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyWithoutUsersInput`
 */
export type user_agreementsUpdateManyWithoutUsersInput = Prisma.user_agreementsUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyWithoutUsersInput`
 */
export type votesUpdateManyWithoutUsersInput = Prisma.votesUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateOneWithoutVotesInput`
 */
export type participantsCreateOneWithoutVotesInput = Prisma.participantsCreateOneWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutVotesInput`
 */
export type usersCreateOneWithoutVotesInput = Prisma.usersCreateOneWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateOneRequiredWithoutVotesInput`
 */
export type participantsUpdateOneRequiredWithoutVotesInput = Prisma.participantsUpdateOneRequiredWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutVotesInput`
 */
export type usersUpdateOneRequiredWithoutVotesInput = Prisma.usersUpdateOneRequiredWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntNullableFilter`
 */
export type NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeNullableFilter`
 */
export type NestedDateTimeNullableFilter = Prisma.NestedDateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.questionsCreateWithoutAnswersInput`
 */
export type questionsCreateWithoutAnswersInput = Prisma.questionsCreateWithoutAnswersInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateOrConnectWithoutanswersInput`
 */
export type questionsCreateOrConnectWithoutanswersInput = Prisma.questionsCreateOrConnectWithoutanswersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithoutAnswersInput`
 */
export type questionsUpdateWithoutAnswersInput = Prisma.questionsUpdateWithoutAnswersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpsertWithoutAnswersInput`
 */
export type questionsUpsertWithoutAnswersInput = Prisma.questionsUpsertWithoutAnswersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutApplicantsInput`
 */
export type companiesCreateWithoutApplicantsInput = Prisma.companiesCreateWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutapplicantsInput`
 */
export type companiesCreateOrConnectWithoutapplicantsInput = Prisma.companiesCreateOrConnectWithoutapplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutApplicantsInput`
 */
export type projectsCreateWithoutApplicantsInput = Prisma.projectsCreateWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutapplicantsInput`
 */
export type projectsCreateOrConnectWithoutapplicantsInput = Prisma.projectsCreateOrConnectWithoutapplicantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutApplicantsInput`
 */
export type companiesUpdateWithoutApplicantsInput = Prisma.companiesUpdateWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutApplicantsInput`
 */
export type companiesUpsertWithoutApplicantsInput = Prisma.companiesUpsertWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutApplicantsInput`
 */
export type projectsUpdateWithoutApplicantsInput = Prisma.projectsUpdateWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithoutApplicantsInput`
 */
export type projectsUpsertWithoutApplicantsInput = Prisma.projectsUpsertWithoutApplicantsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutBusiness_typesInput`
 */
export type startup_infosCreateWithoutBusiness_typesInput = Prisma.startup_infosCreateWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutbusiness_typesInput`
 */
export type startup_infosCreateOrConnectWithoutbusiness_typesInput = Prisma.startup_infosCreateOrConnectWithoutbusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithWhereUniqueWithoutBusiness_typesInput`
 */
export type startup_infosUpdateWithWhereUniqueWithoutBusiness_typesInput = Prisma.startup_infosUpdateWithWhereUniqueWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithWhereWithoutBusiness_typesInput`
 */
export type startup_infosUpdateManyWithWhereWithoutBusiness_typesInput = Prisma.startup_infosUpdateManyWithWhereWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosScalarWhereInput`
 */
export type startup_infosScalarWhereInput = Prisma.startup_infosScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithWhereUniqueWithoutBusiness_typesInput`
 */
export type startup_infosUpsertWithWhereUniqueWithoutBusiness_typesInput = Prisma.startup_infosUpsertWithWhereUniqueWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateWithoutCompaniesInput`
 */
export type user_typesCreateWithoutCompaniesInput = Prisma.user_typesCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateOrConnectWithoutcompaniesInput`
 */
export type user_typesCreateOrConnectWithoutcompaniesInput = Prisma.user_typesCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateWithoutCompaniesInput`
 */
export type applicantsCreateWithoutCompaniesInput = Prisma.applicantsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateOrConnectWithoutcompaniesInput`
 */
export type applicantsCreateOrConnectWithoutcompaniesInput = Prisma.applicantsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateWithoutCompaniesInput`
 */
export type company_documentsCreateWithoutCompaniesInput = Prisma.company_documentsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateOrConnectWithoutcompaniesInput`
 */
export type company_documentsCreateOrConnectWithoutcompaniesInput = Prisma.company_documentsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersCreateWithoutCompaniesInput`
 */
export type company_membersCreateWithoutCompaniesInput = Prisma.company_membersCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersCreateOrConnectWithoutcompaniesInput`
 */
export type company_membersCreateOrConnectWithoutcompaniesInput = Prisma.company_membersCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsCreateWithoutCompaniesInput`
 */
export type company_newsCreateWithoutCompaniesInput = Prisma.company_newsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsCreateOrConnectWithoutcompaniesInput`
 */
export type company_newsCreateOrConnectWithoutcompaniesInput = Prisma.company_newsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateWithoutCompaniesInput`
 */
export type demodaysCreateWithoutCompaniesInput = Prisma.demodaysCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateOrConnectWithoutcompaniesInput`
 */
export type demodaysCreateOrConnectWithoutcompaniesInput = Prisma.demodaysCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateWithoutCompaniesInput`
 */
export type invested_toCreateWithoutCompaniesInput = Prisma.invested_toCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateOrConnectWithoutcompaniesInput`
 */
export type invested_toCreateOrConnectWithoutcompaniesInput = Prisma.invested_toCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateWithoutCompaniesInput`
 */
export type IR_requestsCreateWithoutCompaniesInput = Prisma.IR_requestsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateOrConnectWithoutcompaniesInput`
 */
export type IR_requestsCreateOrConnectWithoutcompaniesInput = Prisma.IR_requestsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateWithoutCompaniesInput`
 */
export type participantsCreateWithoutCompaniesInput = Prisma.participantsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateOrConnectWithoutcompaniesInput`
 */
export type participantsCreateOrConnectWithoutcompaniesInput = Prisma.participantsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateWithoutCompaniesInput`
 */
export type partner_infosCreateWithoutCompaniesInput = Prisma.partner_infosCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOrConnectWithoutcompaniesInput`
 */
export type partner_infosCreateOrConnectWithoutcompaniesInput = Prisma.partner_infosCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesCreateWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesCreateOrConnectWithoutcompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateWithoutCompaniesInput`
 */
export type project_likesCreateWithoutCompaniesInput = Prisma.project_likesCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateOrConnectWithoutcompaniesInput`
 */
export type project_likesCreateOrConnectWithoutcompaniesInput = Prisma.project_likesCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutCompaniesInput`
 */
export type projectsCreateWithoutCompaniesInput = Prisma.projectsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutcompaniesInput`
 */
export type projectsCreateOrConnectWithoutcompaniesInput = Prisma.projectsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateWithoutCompaniesInput`
 */
export type questionsCreateWithoutCompaniesInput = Prisma.questionsCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateOrConnectWithoutcompaniesInput`
 */
export type questionsCreateOrConnectWithoutcompaniesInput = Prisma.questionsCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateWithoutCompaniesInput`
 */
export type recent_views_projectCreateWithoutCompaniesInput = Prisma.recent_views_projectCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateOrConnectWithoutcompaniesInput`
 */
export type recent_views_projectCreateOrConnectWithoutcompaniesInput = Prisma.recent_views_projectCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutCompaniesInput`
 */
export type startup_infosCreateWithoutCompaniesInput = Prisma.startup_infosCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutcompaniesInput`
 */
export type startup_infosCreateOrConnectWithoutcompaniesInput = Prisma.startup_infosCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateWithoutCompaniesInput`
 */
export type startup_likesCreateWithoutCompaniesInput = Prisma.startup_likesCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateOrConnectWithoutcompaniesInput`
 */
export type startup_likesCreateOrConnectWithoutcompaniesInput = Prisma.startup_likesCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutCompaniesInput`
 */
export type usersCreateWithoutCompaniesInput = Prisma.usersCreateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutcompaniesInput`
 */
export type usersCreateOrConnectWithoutcompaniesInput = Prisma.usersCreateOrConnectWithoutcompaniesInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateWithoutCompaniesInput`
 */
export type user_typesUpdateWithoutCompaniesInput = Prisma.user_typesUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpsertWithoutCompaniesInput`
 */
export type user_typesUpsertWithoutCompaniesInput = Prisma.user_typesUpsertWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type applicantsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.applicantsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type applicantsUpdateManyWithWhereWithoutCompaniesInput = Prisma.applicantsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.applicantsScalarWhereInput`
 */
export type applicantsScalarWhereInput = Prisma.applicantsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type applicantsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.applicantsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type company_documentsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.company_documentsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type company_documentsUpdateManyWithWhereWithoutCompaniesInput = Prisma.company_documentsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsScalarWhereInput`
 */
export type company_documentsScalarWhereInput = Prisma.company_documentsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type company_documentsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.company_documentsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type company_membersUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.company_membersUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateManyWithWhereWithoutCompaniesInput`
 */
export type company_membersUpdateManyWithWhereWithoutCompaniesInput = Prisma.company_membersUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersScalarWhereInput`
 */
export type company_membersScalarWhereInput = Prisma.company_membersScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type company_membersUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.company_membersUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type company_newsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.company_newsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type company_newsUpdateManyWithWhereWithoutCompaniesInput = Prisma.company_newsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsScalarWhereInput`
 */
export type company_newsScalarWhereInput = Prisma.company_newsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type company_newsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.company_newsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type demodaysUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.demodaysUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateManyWithWhereWithoutCompaniesInput`
 */
export type demodaysUpdateManyWithWhereWithoutCompaniesInput = Prisma.demodaysUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysScalarWhereInput`
 */
export type demodaysScalarWhereInput = Prisma.demodaysScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type demodaysUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.demodaysUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type invested_toUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.invested_toUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyWithWhereWithoutCompaniesInput`
 */
export type invested_toUpdateManyWithWhereWithoutCompaniesInput = Prisma.invested_toUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toScalarWhereInput`
 */
export type invested_toScalarWhereInput = Prisma.invested_toScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type invested_toUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.invested_toUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type IR_requestsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.IR_requestsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type IR_requestsUpdateManyWithWhereWithoutCompaniesInput = Prisma.IR_requestsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsScalarWhereInput`
 */
export type IR_requestsScalarWhereInput = Prisma.IR_requestsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type IR_requestsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.IR_requestsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type participantsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.participantsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type participantsUpdateManyWithWhereWithoutCompaniesInput = Prisma.participantsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsScalarWhereInput`
 */
export type participantsScalarWhereInput = Prisma.participantsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.participantsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type participantsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.participantsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type partner_infosUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.partner_infosUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithWhereWithoutCompaniesInput`
 */
export type partner_infosUpdateManyWithWhereWithoutCompaniesInput = Prisma.partner_infosUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosScalarWhereInput`
 */
export type partner_infosScalarWhereInput = Prisma.partner_infosScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type partner_infosUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.partner_infosUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesScalarWhereInput`
 */
export type partner_likesScalarWhereInput = Prisma.partner_likesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesUpdateWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesUpdateManyWithWhereWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesUpsertWithWhereUniqueWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type project_likesUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.project_likesUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyWithWhereWithoutCompaniesInput`
 */
export type project_likesUpdateManyWithWhereWithoutCompaniesInput = Prisma.project_likesUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.project_likesScalarWhereInput`
 */
export type project_likesScalarWhereInput = Prisma.project_likesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type project_likesUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.project_likesUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type projectsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.projectsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type projectsUpdateManyWithWhereWithoutCompaniesInput = Prisma.projectsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsScalarWhereInput`
 */
export type projectsScalarWhereInput = Prisma.projectsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type projectsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.projectsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type questionsUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.questionsUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithWhereWithoutCompaniesInput`
 */
export type questionsUpdateManyWithWhereWithoutCompaniesInput = Prisma.questionsUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsScalarWhereInput`
 */
export type questionsScalarWhereInput = Prisma.questionsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.questionsUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type questionsUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.questionsUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type recent_views_projectUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.recent_views_projectUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyWithWhereWithoutCompaniesInput`
 */
export type recent_views_projectUpdateManyWithWhereWithoutCompaniesInput = Prisma.recent_views_projectUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectScalarWhereInput`
 */
export type recent_views_projectScalarWhereInput = Prisma.recent_views_projectScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type recent_views_projectUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.recent_views_projectUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type startup_infosUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.startup_infosUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithWhereWithoutCompaniesInput`
 */
export type startup_infosUpdateManyWithWhereWithoutCompaniesInput = Prisma.startup_infosUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type startup_infosUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.startup_infosUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type startup_likesUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.startup_likesUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyWithWhereWithoutCompaniesInput`
 */
export type startup_likesUpdateManyWithWhereWithoutCompaniesInput = Prisma.startup_likesUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesScalarWhereInput`
 */
export type startup_likesScalarWhereInput = Prisma.startup_likesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type startup_likesUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.startup_likesUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithWhereUniqueWithoutCompaniesInput`
 */
export type usersUpdateWithWhereUniqueWithoutCompaniesInput = Prisma.usersUpdateWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithWhereWithoutCompaniesInput`
 */
export type usersUpdateManyWithWhereWithoutCompaniesInput = Prisma.usersUpdateManyWithWhereWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersScalarWhereInput`
 */
export type usersScalarWhereInput = Prisma.usersScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithWhereUniqueWithoutCompaniesInput`
 */
export type usersUpsertWithWhereUniqueWithoutCompaniesInput = Prisma.usersUpsertWithWhereUniqueWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutCompany_documentsInput`
 */
export type companiesCreateWithoutCompany_documentsInput = Prisma.companiesCreateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutcompany_documentsInput`
 */
export type companiesCreateOrConnectWithoutcompany_documentsInput = Prisma.companiesCreateOrConnectWithoutcompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateWithoutCompany_documentsInput`
 */
export type document_typesCreateWithoutCompany_documentsInput = Prisma.document_typesCreateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateOrConnectWithoutcompany_documentsInput`
 */
export type document_typesCreateOrConnectWithoutcompany_documentsInput = Prisma.document_typesCreateOrConnectWithoutcompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateWithoutCompany_documentsInput`
 */
export type IR_requestsCreateWithoutCompany_documentsInput = Prisma.IR_requestsCreateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateOrConnectWithoutcompany_documentsInput`
 */
export type IR_requestsCreateOrConnectWithoutcompany_documentsInput = Prisma.IR_requestsCreateOrConnectWithoutcompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutCompany_documentsInput`
 */
export type companiesUpdateWithoutCompany_documentsInput = Prisma.companiesUpdateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutCompany_documentsInput`
 */
export type companiesUpsertWithoutCompany_documentsInput = Prisma.companiesUpsertWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateWithoutCompany_documentsInput`
 */
export type document_typesUpdateWithoutCompany_documentsInput = Prisma.document_typesUpdateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpsertWithoutCompany_documentsInput`
 */
export type document_typesUpsertWithoutCompany_documentsInput = Prisma.document_typesUpsertWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithWhereUniqueWithoutCompany_documentsInput`
 */
export type IR_requestsUpdateWithWhereUniqueWithoutCompany_documentsInput = Prisma.IR_requestsUpdateWithWhereUniqueWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithWhereWithoutCompany_documentsInput`
 */
export type IR_requestsUpdateManyWithWhereWithoutCompany_documentsInput = Prisma.IR_requestsUpdateManyWithWhereWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpsertWithWhereUniqueWithoutCompany_documentsInput`
 */
export type IR_requestsUpsertWithWhereUniqueWithoutCompany_documentsInput = Prisma.IR_requestsUpsertWithWhereUniqueWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutCompany_membersInput`
 */
export type companiesCreateWithoutCompany_membersInput = Prisma.companiesCreateWithoutCompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutcompany_membersInput`
 */
export type companiesCreateOrConnectWithoutcompany_membersInput = Prisma.companiesCreateOrConnectWithoutcompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutCompany_membersInput`
 */
export type companiesUpdateWithoutCompany_membersInput = Prisma.companiesUpdateWithoutCompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutCompany_membersInput`
 */
export type companiesUpsertWithoutCompany_membersInput = Prisma.companiesUpsertWithoutCompany_membersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutCompany_newsInput`
 */
export type companiesCreateWithoutCompany_newsInput = Prisma.companiesCreateWithoutCompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutcompany_newsInput`
 */
export type companiesCreateOrConnectWithoutcompany_newsInput = Prisma.companiesCreateOrConnectWithoutcompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutCompany_newsInput`
 */
export type companiesUpdateWithoutCompany_newsInput = Prisma.companiesUpdateWithoutCompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutCompany_newsInput`
 */
export type companiesUpsertWithoutCompany_newsInput = Prisma.companiesUpsertWithoutCompany_newsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutDemodaysInput`
 */
export type companiesCreateWithoutDemodaysInput = Prisma.companiesCreateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutdemodaysInput`
 */
export type companiesCreateOrConnectWithoutdemodaysInput = Prisma.companiesCreateOrConnectWithoutdemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateWithoutDemodaysInput`
 */
export type participantsCreateWithoutDemodaysInput = Prisma.participantsCreateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateOrConnectWithoutdemodaysInput`
 */
export type participantsCreateOrConnectWithoutdemodaysInput = Prisma.participantsCreateOrConnectWithoutdemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateWithoutDemodaysInput`
 */
export type questionsCreateWithoutDemodaysInput = Prisma.questionsCreateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateOrConnectWithoutdemodaysInput`
 */
export type questionsCreateOrConnectWithoutdemodaysInput = Prisma.questionsCreateOrConnectWithoutdemodaysInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutDemodaysInput`
 */
export type companiesUpdateWithoutDemodaysInput = Prisma.companiesUpdateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutDemodaysInput`
 */
export type companiesUpsertWithoutDemodaysInput = Prisma.companiesUpsertWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateWithWhereUniqueWithoutDemodaysInput`
 */
export type participantsUpdateWithWhereUniqueWithoutDemodaysInput = Prisma.participantsUpdateWithWhereUniqueWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateManyWithWhereWithoutDemodaysInput`
 */
export type participantsUpdateManyWithWhereWithoutDemodaysInput = Prisma.participantsUpdateManyWithWhereWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.participantsUpsertWithWhereUniqueWithoutDemodaysInput`
 */
export type participantsUpsertWithWhereUniqueWithoutDemodaysInput = Prisma.participantsUpsertWithWhereUniqueWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithWhereUniqueWithoutDemodaysInput`
 */
export type questionsUpdateWithWhereUniqueWithoutDemodaysInput = Prisma.questionsUpdateWithWhereUniqueWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithWhereWithoutDemodaysInput`
 */
export type questionsUpdateManyWithWhereWithoutDemodaysInput = Prisma.questionsUpdateManyWithWhereWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsUpsertWithWhereUniqueWithoutDemodaysInput`
 */
export type questionsUpsertWithWhereUniqueWithoutDemodaysInput = Prisma.questionsUpsertWithWhereUniqueWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateWithoutDocument_typesInput`
 */
export type company_documentsCreateWithoutDocument_typesInput = Prisma.company_documentsCreateWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateOrConnectWithoutdocument_typesInput`
 */
export type company_documentsCreateOrConnectWithoutdocument_typesInput = Prisma.company_documentsCreateOrConnectWithoutdocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateWithoutDocument_typesInput`
 */
export type required_documentsCreateWithoutDocument_typesInput = Prisma.required_documentsCreateWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateOrConnectWithoutdocument_typesInput`
 */
export type required_documentsCreateOrConnectWithoutdocument_typesInput = Prisma.required_documentsCreateOrConnectWithoutdocument_typesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateWithWhereUniqueWithoutDocument_typesInput`
 */
export type company_documentsUpdateWithWhereUniqueWithoutDocument_typesInput = Prisma.company_documentsUpdateWithWhereUniqueWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateManyWithWhereWithoutDocument_typesInput`
 */
export type company_documentsUpdateManyWithWhereWithoutDocument_typesInput = Prisma.company_documentsUpdateManyWithWhereWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpsertWithWhereUniqueWithoutDocument_typesInput`
 */
export type company_documentsUpsertWithWhereUniqueWithoutDocument_typesInput = Prisma.company_documentsUpsertWithWhereUniqueWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateWithWhereUniqueWithoutDocument_typesInput`
 */
export type required_documentsUpdateWithWhereUniqueWithoutDocument_typesInput = Prisma.required_documentsUpdateWithWhereUniqueWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyWithWhereWithoutDocument_typesInput`
 */
export type required_documentsUpdateManyWithWhereWithoutDocument_typesInput = Prisma.required_documentsUpdateManyWithWhereWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsScalarWhereInput`
 */
export type required_documentsScalarWhereInput = Prisma.required_documentsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpsertWithWhereUniqueWithoutDocument_typesInput`
 */
export type required_documentsUpsertWithWhereUniqueWithoutDocument_typesInput = Prisma.required_documentsUpsertWithWhereUniqueWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateWithoutInvested_fromInput`
 */
export type investment_seriesCreateWithoutInvested_fromInput = Prisma.investment_seriesCreateWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateOrConnectWithoutinvested_fromInput`
 */
export type investment_seriesCreateOrConnectWithoutinvested_fromInput = Prisma.investment_seriesCreateOrConnectWithoutinvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutInvested_fromInput`
 */
export type startup_infosCreateWithoutInvested_fromInput = Prisma.startup_infosCreateWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutinvested_fromInput`
 */
export type startup_infosCreateOrConnectWithoutinvested_fromInput = Prisma.startup_infosCreateOrConnectWithoutinvested_fromInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateWithoutInvested_fromInput`
 */
export type investment_seriesUpdateWithoutInvested_fromInput = Prisma.investment_seriesUpdateWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpsertWithoutInvested_fromInput`
 */
export type investment_seriesUpsertWithoutInvested_fromInput = Prisma.investment_seriesUpsertWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutInvested_fromInput`
 */
export type startup_infosUpdateWithoutInvested_fromInput = Prisma.startup_infosUpdateWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithoutInvested_fromInput`
 */
export type startup_infosUpsertWithoutInvested_fromInput = Prisma.startup_infosUpsertWithoutInvested_fromInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutInvested_toInput`
 */
export type companiesCreateWithoutInvested_toInput = Prisma.companiesCreateWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutinvested_toInput`
 */
export type companiesCreateOrConnectWithoutinvested_toInput = Prisma.companiesCreateOrConnectWithoutinvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateWithoutInvested_toInput`
 */
export type investment_seriesCreateWithoutInvested_toInput = Prisma.investment_seriesCreateWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesCreateOrConnectWithoutinvested_toInput`
 */
export type investment_seriesCreateOrConnectWithoutinvested_toInput = Prisma.investment_seriesCreateOrConnectWithoutinvested_toInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutInvested_toInput`
 */
export type companiesUpdateWithoutInvested_toInput = Prisma.companiesUpdateWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutInvested_toInput`
 */
export type companiesUpsertWithoutInvested_toInput = Prisma.companiesUpsertWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpdateWithoutInvested_toInput`
 */
export type investment_seriesUpdateWithoutInvested_toInput = Prisma.investment_seriesUpdateWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.investment_seriesUpsertWithoutInvested_toInput`
 */
export type investment_seriesUpsertWithoutInvested_toInput = Prisma.investment_seriesUpsertWithoutInvested_toInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateWithoutInvestment_fundsInput`
 */
export type partner_infosCreateWithoutInvestment_fundsInput = Prisma.partner_infosCreateWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOrConnectWithoutinvestment_fundsInput`
 */
export type partner_infosCreateOrConnectWithoutinvestment_fundsInput = Prisma.partner_infosCreateOrConnectWithoutinvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithWhereUniqueWithoutInvestment_fundsInput`
 */
export type partner_infosUpdateWithWhereUniqueWithoutInvestment_fundsInput = Prisma.partner_infosUpdateWithWhereUniqueWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithWhereWithoutInvestment_fundsInput`
 */
export type partner_infosUpdateManyWithWhereWithoutInvestment_fundsInput = Prisma.partner_infosUpdateManyWithWhereWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertWithWhereUniqueWithoutInvestment_fundsInput`
 */
export type partner_infosUpsertWithWhereUniqueWithoutInvestment_fundsInput = Prisma.partner_infosUpsertWithWhereUniqueWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateWithoutInvestment_portfolioInput`
 */
export type partner_infosCreateWithoutInvestment_portfolioInput = Prisma.partner_infosCreateWithoutInvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOrConnectWithoutinvestment_portfolioInput`
 */
export type partner_infosCreateOrConnectWithoutinvestment_portfolioInput = Prisma.partner_infosCreateOrConnectWithoutinvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithoutInvestment_portfolioInput`
 */
export type partner_infosUpdateWithoutInvestment_portfolioInput = Prisma.partner_infosUpdateWithoutInvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertWithoutInvestment_portfolioInput`
 */
export type partner_infosUpsertWithoutInvestment_portfolioInput = Prisma.partner_infosUpsertWithoutInvestment_portfolioInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateWithoutInvestment_seriesInput`
 */
export type invested_fromCreateWithoutInvestment_seriesInput = Prisma.invested_fromCreateWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateOrConnectWithoutinvestment_seriesInput`
 */
export type invested_fromCreateOrConnectWithoutinvestment_seriesInput = Prisma.invested_fromCreateOrConnectWithoutinvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateWithoutInvestment_seriesInput`
 */
export type invested_toCreateWithoutInvestment_seriesInput = Prisma.invested_toCreateWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toCreateOrConnectWithoutinvestment_seriesInput`
 */
export type invested_toCreateOrConnectWithoutinvestment_seriesInput = Prisma.invested_toCreateOrConnectWithoutinvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateWithWhereUniqueWithoutInvestment_seriesInput`
 */
export type invested_fromUpdateWithWhereUniqueWithoutInvestment_seriesInput = Prisma.invested_fromUpdateWithWhereUniqueWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyWithWhereWithoutInvestment_seriesInput`
 */
export type invested_fromUpdateManyWithWhereWithoutInvestment_seriesInput = Prisma.invested_fromUpdateManyWithWhereWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_fromScalarWhereInput`
 */
export type invested_fromScalarWhereInput = Prisma.invested_fromScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpsertWithWhereUniqueWithoutInvestment_seriesInput`
 */
export type invested_fromUpsertWithWhereUniqueWithoutInvestment_seriesInput = Prisma.invested_fromUpsertWithWhereUniqueWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateWithWhereUniqueWithoutInvestment_seriesInput`
 */
export type invested_toUpdateWithWhereUniqueWithoutInvestment_seriesInput = Prisma.invested_toUpdateWithWhereUniqueWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateManyWithWhereWithoutInvestment_seriesInput`
 */
export type invested_toUpdateManyWithWhereWithoutInvestment_seriesInput = Prisma.invested_toUpdateManyWithWhereWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpsertWithWhereUniqueWithoutInvestment_seriesInput`
 */
export type invested_toUpsertWithWhereUniqueWithoutInvestment_seriesInput = Prisma.invested_toUpsertWithWhereUniqueWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateWithoutIR_requestsInput`
 */
export type company_documentsCreateWithoutIR_requestsInput = Prisma.company_documentsCreateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.company_documentsCreateOrConnectWithoutIR_requestsInput`
 */
export type company_documentsCreateOrConnectWithoutIR_requestsInput = Prisma.company_documentsCreateOrConnectWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateWithoutIR_requestsInput`
 */
export type partner_infosCreateWithoutIR_requestsInput = Prisma.partner_infosCreateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOrConnectWithoutIR_requestsInput`
 */
export type partner_infosCreateOrConnectWithoutIR_requestsInput = Prisma.partner_infosCreateOrConnectWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutIR_requestsInput`
 */
export type companiesCreateWithoutIR_requestsInput = Prisma.companiesCreateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutIR_requestsInput`
 */
export type companiesCreateOrConnectWithoutIR_requestsInput = Prisma.companiesCreateOrConnectWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateWithoutIR_requestsInput`
 */
export type company_documentsUpdateWithoutIR_requestsInput = Prisma.company_documentsUpdateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpsertWithoutIR_requestsInput`
 */
export type company_documentsUpsertWithoutIR_requestsInput = Prisma.company_documentsUpsertWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithoutIR_requestsInput`
 */
export type partner_infosUpdateWithoutIR_requestsInput = Prisma.partner_infosUpdateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertWithoutIR_requestsInput`
 */
export type partner_infosUpsertWithoutIR_requestsInput = Prisma.partner_infosUpsertWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutIR_requestsInput`
 */
export type companiesUpdateWithoutIR_requestsInput = Prisma.companiesUpdateWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutIR_requestsInput`
 */
export type companiesUpsertWithoutIR_requestsInput = Prisma.companiesUpsertWithoutIR_requestsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutParticipantsInput`
 */
export type companiesCreateWithoutParticipantsInput = Prisma.companiesCreateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutparticipantsInput`
 */
export type companiesCreateOrConnectWithoutparticipantsInput = Prisma.companiesCreateOrConnectWithoutparticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateWithoutParticipantsInput`
 */
export type demodaysCreateWithoutParticipantsInput = Prisma.demodaysCreateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateOrConnectWithoutparticipantsInput`
 */
export type demodaysCreateOrConnectWithoutparticipantsInput = Prisma.demodaysCreateOrConnectWithoutparticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesCreateWithoutParticipantsInput`
 */
export type votesCreateWithoutParticipantsInput = Prisma.votesCreateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesCreateOrConnectWithoutparticipantsInput`
 */
export type votesCreateOrConnectWithoutparticipantsInput = Prisma.votesCreateOrConnectWithoutparticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutParticipantsInput`
 */
export type companiesUpdateWithoutParticipantsInput = Prisma.companiesUpdateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutParticipantsInput`
 */
export type companiesUpsertWithoutParticipantsInput = Prisma.companiesUpsertWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateWithoutParticipantsInput`
 */
export type demodaysUpdateWithoutParticipantsInput = Prisma.demodaysUpdateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpsertWithoutParticipantsInput`
 */
export type demodaysUpsertWithoutParticipantsInput = Prisma.demodaysUpsertWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateWithWhereUniqueWithoutParticipantsInput`
 */
export type votesUpdateWithWhereUniqueWithoutParticipantsInput = Prisma.votesUpdateWithWhereUniqueWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyWithWhereWithoutParticipantsInput`
 */
export type votesUpdateManyWithWhereWithoutParticipantsInput = Prisma.votesUpdateManyWithWhereWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.votesScalarWhereInput`
 */
export type votesScalarWhereInput = Prisma.votesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.votesUpsertWithWhereUniqueWithoutParticipantsInput`
 */
export type votesUpsertWithWhereUniqueWithoutParticipantsInput = Prisma.votesUpsertWithWhereUniqueWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutPartner_infosInput`
 */
export type companiesCreateWithoutPartner_infosInput = Prisma.companiesCreateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutpartner_infosInput`
 */
export type companiesCreateOrConnectWithoutpartner_infosInput = Prisma.companiesCreateOrConnectWithoutpartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateWithoutPartner_infosInput`
 */
export type technologiesCreateWithoutPartner_infosInput = Prisma.technologiesCreateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateOrConnectWithoutpartner_infosInput`
 */
export type technologiesCreateOrConnectWithoutpartner_infosInput = Prisma.technologiesCreateOrConnectWithoutpartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsCreateWithoutPartner_infosInput`
 */
export type investment_fundsCreateWithoutPartner_infosInput = Prisma.investment_fundsCreateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsCreateOrConnectWithoutpartner_infosInput`
 */
export type investment_fundsCreateOrConnectWithoutpartner_infosInput = Prisma.investment_fundsCreateOrConnectWithoutpartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioCreateWithoutPartner_infosInput`
 */
export type investment_portfolioCreateWithoutPartner_infosInput = Prisma.investment_portfolioCreateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioCreateOrConnectWithoutpartner_infosInput`
 */
export type investment_portfolioCreateOrConnectWithoutpartner_infosInput = Prisma.investment_portfolioCreateOrConnectWithoutpartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateWithoutPartner_infosInput`
 */
export type IR_requestsCreateWithoutPartner_infosInput = Prisma.IR_requestsCreateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsCreateOrConnectWithoutpartner_infosInput`
 */
export type IR_requestsCreateOrConnectWithoutpartner_infosInput = Prisma.IR_requestsCreateOrConnectWithoutpartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutPartner_infosInput`
 */
export type companiesUpdateWithoutPartner_infosInput = Prisma.companiesUpdateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutPartner_infosInput`
 */
export type companiesUpsertWithoutPartner_infosInput = Prisma.companiesUpsertWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateWithoutPartner_infosInput`
 */
export type technologiesUpdateWithoutPartner_infosInput = Prisma.technologiesUpdateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpsertWithoutPartner_infosInput`
 */
export type technologiesUpsertWithoutPartner_infosInput = Prisma.technologiesUpsertWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpdateWithoutPartner_infosInput`
 */
export type investment_fundsUpdateWithoutPartner_infosInput = Prisma.investment_fundsUpdateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_fundsUpsertWithoutPartner_infosInput`
 */
export type investment_fundsUpsertWithoutPartner_infosInput = Prisma.investment_fundsUpsertWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateWithWhereUniqueWithoutPartner_infosInput`
 */
export type investment_portfolioUpdateWithWhereUniqueWithoutPartner_infosInput = Prisma.investment_portfolioUpdateWithWhereUniqueWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateManyWithWhereWithoutPartner_infosInput`
 */
export type investment_portfolioUpdateManyWithWhereWithoutPartner_infosInput = Prisma.investment_portfolioUpdateManyWithWhereWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioScalarWhereInput`
 */
export type investment_portfolioScalarWhereInput = Prisma.investment_portfolioScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpsertWithWhereUniqueWithoutPartner_infosInput`
 */
export type investment_portfolioUpsertWithWhereUniqueWithoutPartner_infosInput = Prisma.investment_portfolioUpsertWithWhereUniqueWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithWhereUniqueWithoutPartner_infosInput`
 */
export type IR_requestsUpdateWithWhereUniqueWithoutPartner_infosInput = Prisma.IR_requestsUpdateWithWhereUniqueWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateManyWithWhereWithoutPartner_infosInput`
 */
export type IR_requestsUpdateManyWithWhereWithoutPartner_infosInput = Prisma.IR_requestsUpdateManyWithWhereWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpsertWithWhereUniqueWithoutPartner_infosInput`
 */
export type IR_requestsUpsertWithWhereUniqueWithoutPartner_infosInput = Prisma.IR_requestsUpsertWithWhereUniqueWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesCreateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesCreateOrConnectWithoutpartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput`
 */
export type companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput = Prisma.companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesUpdateWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput`
 */
export type companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput = Prisma.companiesUpsertWithoutPartner_likes_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutProject_imagesInput`
 */
export type projectsCreateWithoutProject_imagesInput = Prisma.projectsCreateWithoutProject_imagesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutproject_imagesInput`
 */
export type projectsCreateOrConnectWithoutproject_imagesInput = Prisma.projectsCreateOrConnectWithoutproject_imagesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutProject_imagesInput`
 */
export type projectsUpdateWithoutProject_imagesInput = Prisma.projectsUpdateWithoutProject_imagesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithoutProject_imagesInput`
 */
export type projectsUpsertWithoutProject_imagesInput = Prisma.projectsUpsertWithoutProject_imagesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutProject_likesInput`
 */
export type companiesCreateWithoutProject_likesInput = Prisma.companiesCreateWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutproject_likesInput`
 */
export type companiesCreateOrConnectWithoutproject_likesInput = Prisma.companiesCreateOrConnectWithoutproject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutProject_likesInput`
 */
export type projectsCreateWithoutProject_likesInput = Prisma.projectsCreateWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutproject_likesInput`
 */
export type projectsCreateOrConnectWithoutproject_likesInput = Prisma.projectsCreateOrConnectWithoutproject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutProject_likesInput`
 */
export type companiesUpdateWithoutProject_likesInput = Prisma.companiesUpdateWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutProject_likesInput`
 */
export type companiesUpsertWithoutProject_likesInput = Prisma.companiesUpsertWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutProject_likesInput`
 */
export type projectsUpdateWithoutProject_likesInput = Prisma.projectsUpdateWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithoutProject_likesInput`
 */
export type projectsUpsertWithoutProject_likesInput = Prisma.projectsUpsertWithoutProject_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutProjectsInput`
 */
export type companiesCreateWithoutProjectsInput = Prisma.companiesCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutprojectsInput`
 */
export type companiesCreateOrConnectWithoutprojectsInput = Prisma.companiesCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateWithoutProjectsInput`
 */
export type sectorsCreateWithoutProjectsInput = Prisma.sectorsCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateOrConnectWithoutprojectsInput`
 */
export type sectorsCreateOrConnectWithoutprojectsInput = Prisma.sectorsCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateWithoutProjectsInput`
 */
export type applicantsCreateWithoutProjectsInput = Prisma.applicantsCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsCreateOrConnectWithoutprojectsInput`
 */
export type applicantsCreateOrConnectWithoutprojectsInput = Prisma.applicantsCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesCreateWithoutProjectsInput`
 */
export type project_imagesCreateWithoutProjectsInput = Prisma.project_imagesCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesCreateOrConnectWithoutprojectsInput`
 */
export type project_imagesCreateOrConnectWithoutprojectsInput = Prisma.project_imagesCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateWithoutProjectsInput`
 */
export type project_likesCreateWithoutProjectsInput = Prisma.project_likesCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesCreateOrConnectWithoutprojectsInput`
 */
export type project_likesCreateOrConnectWithoutprojectsInput = Prisma.project_likesCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateWithoutProjectsInput`
 */
export type recent_views_projectCreateWithoutProjectsInput = Prisma.recent_views_projectCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectCreateOrConnectWithoutprojectsInput`
 */
export type recent_views_projectCreateOrConnectWithoutprojectsInput = Prisma.recent_views_projectCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateWithoutProjectsInput`
 */
export type required_documentsCreateWithoutProjectsInput = Prisma.required_documentsCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsCreateOrConnectWithoutprojectsInput`
 */
export type required_documentsCreateOrConnectWithoutprojectsInput = Prisma.required_documentsCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutProjectsInput`
 */
export type companiesUpdateWithoutProjectsInput = Prisma.companiesUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutProjectsInput`
 */
export type companiesUpsertWithoutProjectsInput = Prisma.companiesUpsertWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateWithoutProjectsInput`
 */
export type sectorsUpdateWithoutProjectsInput = Prisma.sectorsUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpsertWithoutProjectsInput`
 */
export type sectorsUpsertWithoutProjectsInput = Prisma.sectorsUpsertWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateWithWhereUniqueWithoutProjectsInput`
 */
export type applicantsUpdateWithWhereUniqueWithoutProjectsInput = Prisma.applicantsUpdateWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateManyWithWhereWithoutProjectsInput`
 */
export type applicantsUpdateManyWithWhereWithoutProjectsInput = Prisma.applicantsUpdateManyWithWhereWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpsertWithWhereUniqueWithoutProjectsInput`
 */
export type applicantsUpsertWithWhereUniqueWithoutProjectsInput = Prisma.applicantsUpsertWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateWithWhereUniqueWithoutProjectsInput`
 */
export type project_imagesUpdateWithWhereUniqueWithoutProjectsInput = Prisma.project_imagesUpdateWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateManyWithWhereWithoutProjectsInput`
 */
export type project_imagesUpdateManyWithWhereWithoutProjectsInput = Prisma.project_imagesUpdateManyWithWhereWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesScalarWhereInput`
 */
export type project_imagesScalarWhereInput = Prisma.project_imagesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpsertWithWhereUniqueWithoutProjectsInput`
 */
export type project_imagesUpsertWithWhereUniqueWithoutProjectsInput = Prisma.project_imagesUpsertWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateWithWhereUniqueWithoutProjectsInput`
 */
export type project_likesUpdateWithWhereUniqueWithoutProjectsInput = Prisma.project_likesUpdateWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateManyWithWhereWithoutProjectsInput`
 */
export type project_likesUpdateManyWithWhereWithoutProjectsInput = Prisma.project_likesUpdateManyWithWhereWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpsertWithWhereUniqueWithoutProjectsInput`
 */
export type project_likesUpsertWithWhereUniqueWithoutProjectsInput = Prisma.project_likesUpsertWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateWithWhereUniqueWithoutProjectsInput`
 */
export type recent_views_projectUpdateWithWhereUniqueWithoutProjectsInput = Prisma.recent_views_projectUpdateWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateManyWithWhereWithoutProjectsInput`
 */
export type recent_views_projectUpdateManyWithWhereWithoutProjectsInput = Prisma.recent_views_projectUpdateManyWithWhereWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpsertWithWhereUniqueWithoutProjectsInput`
 */
export type recent_views_projectUpsertWithWhereUniqueWithoutProjectsInput = Prisma.recent_views_projectUpsertWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateWithWhereUniqueWithoutProjectsInput`
 */
export type required_documentsUpdateWithWhereUniqueWithoutProjectsInput = Prisma.required_documentsUpdateWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateManyWithWhereWithoutProjectsInput`
 */
export type required_documentsUpdateManyWithWhereWithoutProjectsInput = Prisma.required_documentsUpdateManyWithWhereWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpsertWithWhereUniqueWithoutProjectsInput`
 */
export type required_documentsUpsertWithWhereUniqueWithoutProjectsInput = Prisma.required_documentsUpsertWithWhereUniqueWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutQuestionsInput`
 */
export type companiesCreateWithoutQuestionsInput = Prisma.companiesCreateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutquestionsInput`
 */
export type companiesCreateOrConnectWithoutquestionsInput = Prisma.companiesCreateOrConnectWithoutquestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateWithoutQuestionsInput`
 */
export type demodaysCreateWithoutQuestionsInput = Prisma.demodaysCreateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysCreateOrConnectWithoutquestionsInput`
 */
export type demodaysCreateOrConnectWithoutquestionsInput = Prisma.demodaysCreateOrConnectWithoutquestionsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutQuestionsInput`
 */
export type usersCreateWithoutQuestionsInput = Prisma.usersCreateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutquestionsInput`
 */
export type usersCreateOrConnectWithoutquestionsInput = Prisma.usersCreateOrConnectWithoutquestionsInput

/**
 * @deprecated Renamed to `Prisma.answersCreateWithoutQuestionsInput`
 */
export type answersCreateWithoutQuestionsInput = Prisma.answersCreateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersCreateOrConnectWithoutquestionsInput`
 */
export type answersCreateOrConnectWithoutquestionsInput = Prisma.answersCreateOrConnectWithoutquestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutQuestionsInput`
 */
export type companiesUpdateWithoutQuestionsInput = Prisma.companiesUpdateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutQuestionsInput`
 */
export type companiesUpsertWithoutQuestionsInput = Prisma.companiesUpsertWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateWithoutQuestionsInput`
 */
export type demodaysUpdateWithoutQuestionsInput = Prisma.demodaysUpdateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpsertWithoutQuestionsInput`
 */
export type demodaysUpsertWithoutQuestionsInput = Prisma.demodaysUpsertWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutQuestionsInput`
 */
export type usersUpdateWithoutQuestionsInput = Prisma.usersUpdateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutQuestionsInput`
 */
export type usersUpsertWithoutQuestionsInput = Prisma.usersUpsertWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateWithWhereUniqueWithoutQuestionsInput`
 */
export type answersUpdateWithWhereUniqueWithoutQuestionsInput = Prisma.answersUpdateWithWhereUniqueWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateManyWithWhereWithoutQuestionsInput`
 */
export type answersUpdateManyWithWhereWithoutQuestionsInput = Prisma.answersUpdateManyWithWhereWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.answersScalarWhereInput`
 */
export type answersScalarWhereInput = Prisma.answersScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.answersUpsertWithWhereUniqueWithoutQuestionsInput`
 */
export type answersUpsertWithWhereUniqueWithoutQuestionsInput = Prisma.answersUpsertWithWhereUniqueWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutRecent_views_projectInput`
 */
export type companiesCreateWithoutRecent_views_projectInput = Prisma.companiesCreateWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutrecent_views_projectInput`
 */
export type companiesCreateOrConnectWithoutrecent_views_projectInput = Prisma.companiesCreateOrConnectWithoutrecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutRecent_views_projectInput`
 */
export type projectsCreateWithoutRecent_views_projectInput = Prisma.projectsCreateWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutrecent_views_projectInput`
 */
export type projectsCreateOrConnectWithoutrecent_views_projectInput = Prisma.projectsCreateOrConnectWithoutrecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutRecent_views_projectInput`
 */
export type companiesUpdateWithoutRecent_views_projectInput = Prisma.companiesUpdateWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutRecent_views_projectInput`
 */
export type companiesUpsertWithoutRecent_views_projectInput = Prisma.companiesUpsertWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutRecent_views_projectInput`
 */
export type projectsUpdateWithoutRecent_views_projectInput = Prisma.projectsUpdateWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithoutRecent_views_projectInput`
 */
export type projectsUpsertWithoutRecent_views_projectInput = Prisma.projectsUpsertWithoutRecent_views_projectInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateWithoutRequired_documentsInput`
 */
export type document_typesCreateWithoutRequired_documentsInput = Prisma.document_typesCreateWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesCreateOrConnectWithoutrequired_documentsInput`
 */
export type document_typesCreateOrConnectWithoutrequired_documentsInput = Prisma.document_typesCreateOrConnectWithoutrequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutRequired_documentsInput`
 */
export type projectsCreateWithoutRequired_documentsInput = Prisma.projectsCreateWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutrequired_documentsInput`
 */
export type projectsCreateOrConnectWithoutrequired_documentsInput = Prisma.projectsCreateOrConnectWithoutrequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpdateWithoutRequired_documentsInput`
 */
export type document_typesUpdateWithoutRequired_documentsInput = Prisma.document_typesUpdateWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.document_typesUpsertWithoutRequired_documentsInput`
 */
export type document_typesUpsertWithoutRequired_documentsInput = Prisma.document_typesUpsertWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutRequired_documentsInput`
 */
export type projectsUpdateWithoutRequired_documentsInput = Prisma.projectsUpdateWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithoutRequired_documentsInput`
 */
export type projectsUpsertWithoutRequired_documentsInput = Prisma.projectsUpsertWithoutRequired_documentsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateWithoutSectorsInput`
 */
export type projectsCreateWithoutSectorsInput = Prisma.projectsCreateWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.projectsCreateOrConnectWithoutsectorsInput`
 */
export type projectsCreateOrConnectWithoutsectorsInput = Prisma.projectsCreateOrConnectWithoutsectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutSectorsInput`
 */
export type startup_infosCreateWithoutSectorsInput = Prisma.startup_infosCreateWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutsectorsInput`
 */
export type startup_infosCreateOrConnectWithoutsectorsInput = Prisma.startup_infosCreateOrConnectWithoutsectorsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithWhereUniqueWithoutSectorsInput`
 */
export type projectsUpdateWithWhereUniqueWithoutSectorsInput = Prisma.projectsUpdateWithWhereUniqueWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateManyWithWhereWithoutSectorsInput`
 */
export type projectsUpdateManyWithWhereWithoutSectorsInput = Prisma.projectsUpdateManyWithWhereWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpsertWithWhereUniqueWithoutSectorsInput`
 */
export type projectsUpsertWithWhereUniqueWithoutSectorsInput = Prisma.projectsUpsertWithWhereUniqueWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithWhereUniqueWithoutSectorsInput`
 */
export type startup_infosUpdateWithWhereUniqueWithoutSectorsInput = Prisma.startup_infosUpdateWithWhereUniqueWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithWhereWithoutSectorsInput`
 */
export type startup_infosUpdateManyWithWhereWithoutSectorsInput = Prisma.startup_infosUpdateManyWithWhereWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithWhereUniqueWithoutSectorsInput`
 */
export type startup_infosUpsertWithWhereUniqueWithoutSectorsInput = Prisma.startup_infosUpsertWithWhereUniqueWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutService_typesInput`
 */
export type startup_infosCreateWithoutService_typesInput = Prisma.startup_infosCreateWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutservice_typesInput`
 */
export type startup_infosCreateOrConnectWithoutservice_typesInput = Prisma.startup_infosCreateOrConnectWithoutservice_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithWhereUniqueWithoutService_typesInput`
 */
export type startup_infosUpdateWithWhereUniqueWithoutService_typesInput = Prisma.startup_infosUpdateWithWhereUniqueWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithWhereWithoutService_typesInput`
 */
export type startup_infosUpdateManyWithWhereWithoutService_typesInput = Prisma.startup_infosUpdateManyWithWhereWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithWhereUniqueWithoutService_typesInput`
 */
export type startup_infosUpsertWithWhereUniqueWithoutService_typesInput = Prisma.startup_infosUpsertWithWhereUniqueWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutSignup_methodsInput`
 */
export type usersCreateWithoutSignup_methodsInput = Prisma.usersCreateWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutsignup_methodsInput`
 */
export type usersCreateOrConnectWithoutsignup_methodsInput = Prisma.usersCreateOrConnectWithoutsignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithWhereUniqueWithoutSignup_methodsInput`
 */
export type usersUpdateWithWhereUniqueWithoutSignup_methodsInput = Prisma.usersUpdateWithWhereUniqueWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithWhereWithoutSignup_methodsInput`
 */
export type usersUpdateManyWithWhereWithoutSignup_methodsInput = Prisma.usersUpdateManyWithWhereWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithWhereUniqueWithoutSignup_methodsInput`
 */
export type usersUpsertWithWhereUniqueWithoutSignup_methodsInput = Prisma.usersUpsertWithWhereUniqueWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutStartup_imagesInput`
 */
export type startup_infosCreateWithoutStartup_imagesInput = Prisma.startup_infosCreateWithoutStartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithoutstartup_imagesInput`
 */
export type startup_infosCreateOrConnectWithoutstartup_imagesInput = Prisma.startup_infosCreateOrConnectWithoutstartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutStartup_imagesInput`
 */
export type startup_infosUpdateWithoutStartup_imagesInput = Prisma.startup_infosUpdateWithoutStartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithoutStartup_imagesInput`
 */
export type startup_infosUpsertWithoutStartup_imagesInput = Prisma.startup_infosUpsertWithoutStartup_imagesInput

/**
 * @deprecated Renamed to `Prisma.business_typesCreateWithoutStartup_infosInput`
 */
export type business_typesCreateWithoutStartup_infosInput = Prisma.business_typesCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.business_typesCreateOrConnectWithoutstartup_infosInput`
 */
export type business_typesCreateOrConnectWithoutstartup_infosInput = Prisma.business_typesCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutStartup_infosInput`
 */
export type companiesCreateWithoutStartup_infosInput = Prisma.companiesCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutstartup_infosInput`
 */
export type companiesCreateOrConnectWithoutstartup_infosInput = Prisma.companiesCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateWithoutStartup_infosInput`
 */
export type technologiesCreateWithoutStartup_infosInput = Prisma.technologiesCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesCreateOrConnectWithoutstartup_infosInput`
 */
export type technologiesCreateOrConnectWithoutstartup_infosInput = Prisma.technologiesCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateWithoutStartup_infosInput`
 */
export type sectorsCreateWithoutStartup_infosInput = Prisma.sectorsCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsCreateOrConnectWithoutstartup_infosInput`
 */
export type sectorsCreateOrConnectWithoutstartup_infosInput = Prisma.sectorsCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesCreateWithoutStartup_infosInput`
 */
export type service_typesCreateWithoutStartup_infosInput = Prisma.service_typesCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesCreateOrConnectWithoutstartup_infosInput`
 */
export type service_typesCreateOrConnectWithoutstartup_infosInput = Prisma.service_typesCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateWithoutStartup_infosInput`
 */
export type invested_fromCreateWithoutStartup_infosInput = Prisma.invested_fromCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromCreateOrConnectWithoutstartup_infosInput`
 */
export type invested_fromCreateOrConnectWithoutstartup_infosInput = Prisma.invested_fromCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesCreateWithoutStartup_infosInput`
 */
export type startup_imagesCreateWithoutStartup_infosInput = Prisma.startup_imagesCreateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesCreateOrConnectWithoutstartup_infosInput`
 */
export type startup_imagesCreateOrConnectWithoutstartup_infosInput = Prisma.startup_imagesCreateOrConnectWithoutstartup_infosInput

/**
 * @deprecated Renamed to `Prisma.business_typesUpdateWithoutStartup_infosInput`
 */
export type business_typesUpdateWithoutStartup_infosInput = Prisma.business_typesUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.business_typesUpsertWithoutStartup_infosInput`
 */
export type business_typesUpsertWithoutStartup_infosInput = Prisma.business_typesUpsertWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutStartup_infosInput`
 */
export type companiesUpdateWithoutStartup_infosInput = Prisma.companiesUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutStartup_infosInput`
 */
export type companiesUpsertWithoutStartup_infosInput = Prisma.companiesUpsertWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpdateWithoutStartup_infosInput`
 */
export type technologiesUpdateWithoutStartup_infosInput = Prisma.technologiesUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.technologiesUpsertWithoutStartup_infosInput`
 */
export type technologiesUpsertWithoutStartup_infosInput = Prisma.technologiesUpsertWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpdateWithoutStartup_infosInput`
 */
export type sectorsUpdateWithoutStartup_infosInput = Prisma.sectorsUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.sectorsUpsertWithoutStartup_infosInput`
 */
export type sectorsUpsertWithoutStartup_infosInput = Prisma.sectorsUpsertWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesUpdateWithoutStartup_infosInput`
 */
export type service_typesUpdateWithoutStartup_infosInput = Prisma.service_typesUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.service_typesUpsertWithoutStartup_infosInput`
 */
export type service_typesUpsertWithoutStartup_infosInput = Prisma.service_typesUpsertWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateWithWhereUniqueWithoutStartup_infosInput`
 */
export type invested_fromUpdateWithWhereUniqueWithoutStartup_infosInput = Prisma.invested_fromUpdateWithWhereUniqueWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateManyWithWhereWithoutStartup_infosInput`
 */
export type invested_fromUpdateManyWithWhereWithoutStartup_infosInput = Prisma.invested_fromUpdateManyWithWhereWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpsertWithWhereUniqueWithoutStartup_infosInput`
 */
export type invested_fromUpsertWithWhereUniqueWithoutStartup_infosInput = Prisma.invested_fromUpsertWithWhereUniqueWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateWithWhereUniqueWithoutStartup_infosInput`
 */
export type startup_imagesUpdateWithWhereUniqueWithoutStartup_infosInput = Prisma.startup_imagesUpdateWithWhereUniqueWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateManyWithWhereWithoutStartup_infosInput`
 */
export type startup_imagesUpdateManyWithWhereWithoutStartup_infosInput = Prisma.startup_imagesUpdateManyWithWhereWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesScalarWhereInput`
 */
export type startup_imagesScalarWhereInput = Prisma.startup_imagesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpsertWithWhereUniqueWithoutStartup_infosInput`
 */
export type startup_imagesUpsertWithWhereUniqueWithoutStartup_infosInput = Prisma.startup_imagesUpsertWithWhereUniqueWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutStartup_likesInput`
 */
export type companiesCreateWithoutStartup_likesInput = Prisma.companiesCreateWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutstartup_likesInput`
 */
export type companiesCreateOrConnectWithoutstartup_likesInput = Prisma.companiesCreateOrConnectWithoutstartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutStartup_likesInput`
 */
export type usersCreateWithoutStartup_likesInput = Prisma.usersCreateWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutstartup_likesInput`
 */
export type usersCreateOrConnectWithoutstartup_likesInput = Prisma.usersCreateOrConnectWithoutstartup_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutStartup_likesInput`
 */
export type companiesUpdateWithoutStartup_likesInput = Prisma.companiesUpdateWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutStartup_likesInput`
 */
export type companiesUpsertWithoutStartup_likesInput = Prisma.companiesUpsertWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutStartup_likesInput`
 */
export type usersUpdateWithoutStartup_likesInput = Prisma.usersUpdateWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutStartup_likesInput`
 */
export type usersUpsertWithoutStartup_likesInput = Prisma.usersUpsertWithoutStartup_likesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateWithoutTechnologiesInput`
 */
export type partner_infosCreateWithoutTechnologiesInput = Prisma.partner_infosCreateWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosCreateOrConnectWithouttechnologiesInput`
 */
export type partner_infosCreateOrConnectWithouttechnologiesInput = Prisma.partner_infosCreateOrConnectWithouttechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateWithoutTechnologiesInput`
 */
export type startup_infosCreateWithoutTechnologiesInput = Prisma.startup_infosCreateWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosCreateOrConnectWithouttechnologiesInput`
 */
export type startup_infosCreateOrConnectWithouttechnologiesInput = Prisma.startup_infosCreateOrConnectWithouttechnologiesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithWhereUniqueWithoutTechnologiesInput`
 */
export type partner_infosUpdateWithWhereUniqueWithoutTechnologiesInput = Prisma.partner_infosUpdateWithWhereUniqueWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateManyWithWhereWithoutTechnologiesInput`
 */
export type partner_infosUpdateManyWithWhereWithoutTechnologiesInput = Prisma.partner_infosUpdateManyWithWhereWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpsertWithWhereUniqueWithoutTechnologiesInput`
 */
export type partner_infosUpsertWithWhereUniqueWithoutTechnologiesInput = Prisma.partner_infosUpsertWithWhereUniqueWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithWhereUniqueWithoutTechnologiesInput`
 */
export type startup_infosUpdateWithWhereUniqueWithoutTechnologiesInput = Prisma.startup_infosUpdateWithWhereUniqueWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateManyWithWhereWithoutTechnologiesInput`
 */
export type startup_infosUpdateManyWithWhereWithoutTechnologiesInput = Prisma.startup_infosUpdateManyWithWhereWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpsertWithWhereUniqueWithoutTechnologiesInput`
 */
export type startup_infosUpsertWithWhereUniqueWithoutTechnologiesInput = Prisma.startup_infosUpsertWithWhereUniqueWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateWithoutTermsInput`
 */
export type user_agreementsCreateWithoutTermsInput = Prisma.user_agreementsCreateWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateOrConnectWithouttermsInput`
 */
export type user_agreementsCreateOrConnectWithouttermsInput = Prisma.user_agreementsCreateOrConnectWithouttermsInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateWithWhereUniqueWithoutTermsInput`
 */
export type user_agreementsUpdateWithWhereUniqueWithoutTermsInput = Prisma.user_agreementsUpdateWithWhereUniqueWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyWithWhereWithoutTermsInput`
 */
export type user_agreementsUpdateManyWithWhereWithoutTermsInput = Prisma.user_agreementsUpdateManyWithWhereWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsScalarWhereInput`
 */
export type user_agreementsScalarWhereInput = Prisma.user_agreementsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpsertWithWhereUniqueWithoutTermsInput`
 */
export type user_agreementsUpsertWithWhereUniqueWithoutTermsInput = Prisma.user_agreementsUpsertWithWhereUniqueWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.termsCreateWithoutUser_agreementsInput`
 */
export type termsCreateWithoutUser_agreementsInput = Prisma.termsCreateWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.termsCreateOrConnectWithoutuser_agreementsInput`
 */
export type termsCreateOrConnectWithoutuser_agreementsInput = Prisma.termsCreateOrConnectWithoutuser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutUser_agreementsInput`
 */
export type usersCreateWithoutUser_agreementsInput = Prisma.usersCreateWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutuser_agreementsInput`
 */
export type usersCreateOrConnectWithoutuser_agreementsInput = Prisma.usersCreateOrConnectWithoutuser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.termsUpdateWithoutUser_agreementsInput`
 */
export type termsUpdateWithoutUser_agreementsInput = Prisma.termsUpdateWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.termsUpsertWithoutUser_agreementsInput`
 */
export type termsUpsertWithoutUser_agreementsInput = Prisma.termsUpsertWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutUser_agreementsInput`
 */
export type usersUpdateWithoutUser_agreementsInput = Prisma.usersUpdateWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutUser_agreementsInput`
 */
export type usersUpsertWithoutUser_agreementsInput = Prisma.usersUpsertWithoutUser_agreementsInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutUser_typesInput`
 */
export type companiesCreateWithoutUser_typesInput = Prisma.companiesCreateWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutuser_typesInput`
 */
export type companiesCreateOrConnectWithoutuser_typesInput = Prisma.companiesCreateOrConnectWithoutuser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutUser_typesInput`
 */
export type usersCreateWithoutUser_typesInput = Prisma.usersCreateWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutuser_typesInput`
 */
export type usersCreateOrConnectWithoutuser_typesInput = Prisma.usersCreateOrConnectWithoutuser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithWhereUniqueWithoutUser_typesInput`
 */
export type companiesUpdateWithWhereUniqueWithoutUser_typesInput = Prisma.companiesUpdateWithWhereUniqueWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateManyWithWhereWithoutUser_typesInput`
 */
export type companiesUpdateManyWithWhereWithoutUser_typesInput = Prisma.companiesUpdateManyWithWhereWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesScalarWhereInput`
 */
export type companiesScalarWhereInput = Prisma.companiesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithWhereUniqueWithoutUser_typesInput`
 */
export type companiesUpsertWithWhereUniqueWithoutUser_typesInput = Prisma.companiesUpsertWithWhereUniqueWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithWhereUniqueWithoutUser_typesInput`
 */
export type usersUpdateWithWhereUniqueWithoutUser_typesInput = Prisma.usersUpdateWithWhereUniqueWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyWithWhereWithoutUser_typesInput`
 */
export type usersUpdateManyWithWhereWithoutUser_typesInput = Prisma.usersUpdateManyWithWhereWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithWhereUniqueWithoutUser_typesInput`
 */
export type usersUpsertWithWhereUniqueWithoutUser_typesInput = Prisma.usersUpsertWithWhereUniqueWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateWithoutUsersInput`
 */
export type companiesCreateWithoutUsersInput = Prisma.companiesCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.companiesCreateOrConnectWithoutusersInput`
 */
export type companiesCreateOrConnectWithoutusersInput = Prisma.companiesCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsCreateWithoutUsersInput`
 */
export type signup_methodsCreateWithoutUsersInput = Prisma.signup_methodsCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsCreateOrConnectWithoutusersInput`
 */
export type signup_methodsCreateOrConnectWithoutusersInput = Prisma.signup_methodsCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateWithoutUsersInput`
 */
export type user_typesCreateWithoutUsersInput = Prisma.user_typesCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_typesCreateOrConnectWithoutusersInput`
 */
export type user_typesCreateOrConnectWithoutusersInput = Prisma.user_typesCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateWithoutUsersInput`
 */
export type questionsCreateWithoutUsersInput = Prisma.questionsCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsCreateOrConnectWithoutusersInput`
 */
export type questionsCreateOrConnectWithoutusersInput = Prisma.questionsCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateWithoutUsersInput`
 */
export type startup_likesCreateWithoutUsersInput = Prisma.startup_likesCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesCreateOrConnectWithoutusersInput`
 */
export type startup_likesCreateOrConnectWithoutusersInput = Prisma.startup_likesCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateWithoutUsersInput`
 */
export type user_agreementsCreateWithoutUsersInput = Prisma.user_agreementsCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsCreateOrConnectWithoutusersInput`
 */
export type user_agreementsCreateOrConnectWithoutusersInput = Prisma.user_agreementsCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.votesCreateWithoutUsersInput`
 */
export type votesCreateWithoutUsersInput = Prisma.votesCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesCreateOrConnectWithoutusersInput`
 */
export type votesCreateOrConnectWithoutusersInput = Prisma.votesCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutUsersInput`
 */
export type companiesUpdateWithoutUsersInput = Prisma.companiesUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.companiesUpsertWithoutUsersInput`
 */
export type companiesUpsertWithoutUsersInput = Prisma.companiesUpsertWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpdateWithoutUsersInput`
 */
export type signup_methodsUpdateWithoutUsersInput = Prisma.signup_methodsUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.signup_methodsUpsertWithoutUsersInput`
 */
export type signup_methodsUpsertWithoutUsersInput = Prisma.signup_methodsUpsertWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpdateWithoutUsersInput`
 */
export type user_typesUpdateWithoutUsersInput = Prisma.user_typesUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_typesUpsertWithoutUsersInput`
 */
export type user_typesUpsertWithoutUsersInput = Prisma.user_typesUpsertWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithWhereUniqueWithoutUsersInput`
 */
export type questionsUpdateWithWhereUniqueWithoutUsersInput = Prisma.questionsUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateManyWithWhereWithoutUsersInput`
 */
export type questionsUpdateManyWithWhereWithoutUsersInput = Prisma.questionsUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.questionsUpsertWithWhereUniqueWithoutUsersInput`
 */
export type questionsUpsertWithWhereUniqueWithoutUsersInput = Prisma.questionsUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateWithWhereUniqueWithoutUsersInput`
 */
export type startup_likesUpdateWithWhereUniqueWithoutUsersInput = Prisma.startup_likesUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateManyWithWhereWithoutUsersInput`
 */
export type startup_likesUpdateManyWithWhereWithoutUsersInput = Prisma.startup_likesUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpsertWithWhereUniqueWithoutUsersInput`
 */
export type startup_likesUpsertWithWhereUniqueWithoutUsersInput = Prisma.startup_likesUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateWithWhereUniqueWithoutUsersInput`
 */
export type user_agreementsUpdateWithWhereUniqueWithoutUsersInput = Prisma.user_agreementsUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateManyWithWhereWithoutUsersInput`
 */
export type user_agreementsUpdateManyWithWhereWithoutUsersInput = Prisma.user_agreementsUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpsertWithWhereUniqueWithoutUsersInput`
 */
export type user_agreementsUpsertWithWhereUniqueWithoutUsersInput = Prisma.user_agreementsUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateWithWhereUniqueWithoutUsersInput`
 */
export type votesUpdateWithWhereUniqueWithoutUsersInput = Prisma.votesUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateManyWithWhereWithoutUsersInput`
 */
export type votesUpdateManyWithWhereWithoutUsersInput = Prisma.votesUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesUpsertWithWhereUniqueWithoutUsersInput`
 */
export type votesUpsertWithWhereUniqueWithoutUsersInput = Prisma.votesUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateWithoutVotesInput`
 */
export type participantsCreateWithoutVotesInput = Prisma.participantsCreateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.participantsCreateOrConnectWithoutvotesInput`
 */
export type participantsCreateOrConnectWithoutvotesInput = Prisma.participantsCreateOrConnectWithoutvotesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutVotesInput`
 */
export type usersCreateWithoutVotesInput = Prisma.usersCreateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutvotesInput`
 */
export type usersCreateOrConnectWithoutvotesInput = Prisma.usersCreateOrConnectWithoutvotesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateWithoutVotesInput`
 */
export type participantsUpdateWithoutVotesInput = Prisma.participantsUpdateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpsertWithoutVotesInput`
 */
export type participantsUpsertWithoutVotesInput = Prisma.participantsUpsertWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutVotesInput`
 */
export type usersUpdateWithoutVotesInput = Prisma.usersUpdateWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutVotesInput`
 */
export type usersUpsertWithoutVotesInput = Prisma.usersUpsertWithoutVotesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutBusiness_typesInput`
 */
export type startup_infosUpdateWithoutBusiness_typesInput = Prisma.startup_infosUpdateWithoutBusiness_typesInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateWithoutCompaniesInput`
 */
export type applicantsUpdateWithoutCompaniesInput = Prisma.applicantsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateWithoutCompaniesInput`
 */
export type company_documentsUpdateWithoutCompaniesInput = Prisma.company_documentsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_membersUpdateWithoutCompaniesInput`
 */
export type company_membersUpdateWithoutCompaniesInput = Prisma.company_membersUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.company_newsUpdateWithoutCompaniesInput`
 */
export type company_newsUpdateWithoutCompaniesInput = Prisma.company_newsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.demodaysUpdateWithoutCompaniesInput`
 */
export type demodaysUpdateWithoutCompaniesInput = Prisma.demodaysUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateWithoutCompaniesInput`
 */
export type invested_toUpdateWithoutCompaniesInput = Prisma.invested_toUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithoutCompaniesInput`
 */
export type IR_requestsUpdateWithoutCompaniesInput = Prisma.IR_requestsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateWithoutCompaniesInput`
 */
export type participantsUpdateWithoutCompaniesInput = Prisma.participantsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithoutCompaniesInput`
 */
export type partner_infosUpdateWithoutCompaniesInput = Prisma.partner_infosUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput`
 */
export type partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput = Prisma.partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_liked_idInput

/**
 * @deprecated Renamed to `Prisma.partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput`
 */
export type partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput = Prisma.partner_likesUpdateWithoutCompanies_companiesTopartner_likes_company_likes_idInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateWithoutCompaniesInput`
 */
export type project_likesUpdateWithoutCompaniesInput = Prisma.project_likesUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutCompaniesInput`
 */
export type projectsUpdateWithoutCompaniesInput = Prisma.projectsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithoutCompaniesInput`
 */
export type questionsUpdateWithoutCompaniesInput = Prisma.questionsUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateWithoutCompaniesInput`
 */
export type recent_views_projectUpdateWithoutCompaniesInput = Prisma.recent_views_projectUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutCompaniesInput`
 */
export type startup_infosUpdateWithoutCompaniesInput = Prisma.startup_infosUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateWithoutCompaniesInput`
 */
export type startup_likesUpdateWithoutCompaniesInput = Prisma.startup_likesUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutCompaniesInput`
 */
export type usersUpdateWithoutCompaniesInput = Prisma.usersUpdateWithoutCompaniesInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithoutCompany_documentsInput`
 */
export type IR_requestsUpdateWithoutCompany_documentsInput = Prisma.IR_requestsUpdateWithoutCompany_documentsInput

/**
 * @deprecated Renamed to `Prisma.participantsUpdateWithoutDemodaysInput`
 */
export type participantsUpdateWithoutDemodaysInput = Prisma.participantsUpdateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithoutDemodaysInput`
 */
export type questionsUpdateWithoutDemodaysInput = Prisma.questionsUpdateWithoutDemodaysInput

/**
 * @deprecated Renamed to `Prisma.company_documentsUpdateWithoutDocument_typesInput`
 */
export type company_documentsUpdateWithoutDocument_typesInput = Prisma.company_documentsUpdateWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateWithoutDocument_typesInput`
 */
export type required_documentsUpdateWithoutDocument_typesInput = Prisma.required_documentsUpdateWithoutDocument_typesInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithoutInvestment_fundsInput`
 */
export type partner_infosUpdateWithoutInvestment_fundsInput = Prisma.partner_infosUpdateWithoutInvestment_fundsInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateWithoutInvestment_seriesInput`
 */
export type invested_fromUpdateWithoutInvestment_seriesInput = Prisma.invested_fromUpdateWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.invested_toUpdateWithoutInvestment_seriesInput`
 */
export type invested_toUpdateWithoutInvestment_seriesInput = Prisma.invested_toUpdateWithoutInvestment_seriesInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateWithoutParticipantsInput`
 */
export type votesUpdateWithoutParticipantsInput = Prisma.votesUpdateWithoutParticipantsInput

/**
 * @deprecated Renamed to `Prisma.investment_portfolioUpdateWithoutPartner_infosInput`
 */
export type investment_portfolioUpdateWithoutPartner_infosInput = Prisma.investment_portfolioUpdateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.IR_requestsUpdateWithoutPartner_infosInput`
 */
export type IR_requestsUpdateWithoutPartner_infosInput = Prisma.IR_requestsUpdateWithoutPartner_infosInput

/**
 * @deprecated Renamed to `Prisma.applicantsUpdateWithoutProjectsInput`
 */
export type applicantsUpdateWithoutProjectsInput = Prisma.applicantsUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_imagesUpdateWithoutProjectsInput`
 */
export type project_imagesUpdateWithoutProjectsInput = Prisma.project_imagesUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.project_likesUpdateWithoutProjectsInput`
 */
export type project_likesUpdateWithoutProjectsInput = Prisma.project_likesUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.recent_views_projectUpdateWithoutProjectsInput`
 */
export type recent_views_projectUpdateWithoutProjectsInput = Prisma.recent_views_projectUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.required_documentsUpdateWithoutProjectsInput`
 */
export type required_documentsUpdateWithoutProjectsInput = Prisma.required_documentsUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.answersUpdateWithoutQuestionsInput`
 */
export type answersUpdateWithoutQuestionsInput = Prisma.answersUpdateWithoutQuestionsInput

/**
 * @deprecated Renamed to `Prisma.projectsUpdateWithoutSectorsInput`
 */
export type projectsUpdateWithoutSectorsInput = Prisma.projectsUpdateWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutSectorsInput`
 */
export type startup_infosUpdateWithoutSectorsInput = Prisma.startup_infosUpdateWithoutSectorsInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutService_typesInput`
 */
export type startup_infosUpdateWithoutService_typesInput = Prisma.startup_infosUpdateWithoutService_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutSignup_methodsInput`
 */
export type usersUpdateWithoutSignup_methodsInput = Prisma.usersUpdateWithoutSignup_methodsInput

/**
 * @deprecated Renamed to `Prisma.invested_fromUpdateWithoutStartup_infosInput`
 */
export type invested_fromUpdateWithoutStartup_infosInput = Prisma.invested_fromUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.startup_imagesUpdateWithoutStartup_infosInput`
 */
export type startup_imagesUpdateWithoutStartup_infosInput = Prisma.startup_imagesUpdateWithoutStartup_infosInput

/**
 * @deprecated Renamed to `Prisma.partner_infosUpdateWithoutTechnologiesInput`
 */
export type partner_infosUpdateWithoutTechnologiesInput = Prisma.partner_infosUpdateWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.startup_infosUpdateWithoutTechnologiesInput`
 */
export type startup_infosUpdateWithoutTechnologiesInput = Prisma.startup_infosUpdateWithoutTechnologiesInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateWithoutTermsInput`
 */
export type user_agreementsUpdateWithoutTermsInput = Prisma.user_agreementsUpdateWithoutTermsInput

/**
 * @deprecated Renamed to `Prisma.companiesUpdateWithoutUser_typesInput`
 */
export type companiesUpdateWithoutUser_typesInput = Prisma.companiesUpdateWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutUser_typesInput`
 */
export type usersUpdateWithoutUser_typesInput = Prisma.usersUpdateWithoutUser_typesInput

/**
 * @deprecated Renamed to `Prisma.questionsUpdateWithoutUsersInput`
 */
export type questionsUpdateWithoutUsersInput = Prisma.questionsUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.startup_likesUpdateWithoutUsersInput`
 */
export type startup_likesUpdateWithoutUsersInput = Prisma.startup_likesUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.user_agreementsUpdateWithoutUsersInput`
 */
export type user_agreementsUpdateWithoutUsersInput = Prisma.user_agreementsUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.votesUpdateWithoutUsersInput`
 */
export type votesUpdateWithoutUsersInput = Prisma.votesUpdateWithoutUsersInput