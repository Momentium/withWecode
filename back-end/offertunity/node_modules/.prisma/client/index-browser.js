
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
Prisma.prismaVersion = {
  client: "2.14.0",
  engine: "5d491261d382a2a5ffdc71de17072b0e409f1cc1"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AnswersScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  created_at: 'created_at',
  updated_at: 'updated_at',
  question_id: 'question_id'
});

exports.Prisma.ApplicantsScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  project_id: 'project_id',
  created_at: 'created_at'
});

exports.Prisma.Business_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CompaniesScalarFieldEnum = makeEnum({
  id: 'id',
  type_id: 'type_id',
  name: 'name',
  logo_img: 'logo_img',
  established_date: 'established_date',
  hompage: 'hompage',
  description: 'description',
  team_intro: 'team_intro',
  member_count: 'member_count'
});

exports.Prisma.Company_documentsScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  doc_url: 'doc_url',
  type_id: 'type_id'
});

exports.Prisma.Company_membersScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  name: 'name',
  img: 'img',
  position: 'position'
});

exports.Prisma.Company_newsScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  URL: 'URL'
});

exports.Prisma.Company_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.DemodaysScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  company_id: 'company_id',
  streaming_url: 'streaming_url'
});

exports.Prisma.Document_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.Email_authScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  auth_number: 'auth_number'
});

exports.Prisma.Invested_fromScalarFieldEnum = makeEnum({
  id: 'id',
  startup_id: 'startup_id',
  date: 'date',
  invested_institution: 'invested_institution',
  invested_fund: 'invested_fund',
  corporate_value: 'corporate_value',
  series_id: 'series_id'
});

exports.Prisma.Invested_toScalarFieldEnum = makeEnum({
  id: 'id',
  partner_id: 'partner_id',
  date: 'date',
  startup_name: 'startup_name',
  invested_fund: 'invested_fund',
  corporate_value: 'corporate_value',
  series_id: 'series_id'
});

exports.Prisma.Investment_fundsScalarFieldEnum = makeEnum({
  id: 'id',
  range: 'range'
});

exports.Prisma.Investment_portfolioScalarFieldEnum = makeEnum({
  id: 'id',
  partner_id: 'partner_id',
  img_url: 'img_url'
});

exports.Prisma.Investment_seriesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.IR_requestsScalarFieldEnum = makeEnum({
  id: 'id',
  startup_id: 'startup_id',
  partner_id: 'partner_id',
  document_id: 'document_id',
  is_checked: 'is_checked',
  from_partner: 'from_partner',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ParticipantsScalarFieldEnum = makeEnum({
  id: 'id',
  demoday_id: 'demoday_id',
  order: 'order',
  company_id: 'company_id'
});

exports.Prisma.Partner_infosScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  interst_technology_id: 'interst_technology_id',
  invested_total_id: 'invested_total_id',
  invested_counts: 'invested_counts'
});

exports.Prisma.Partner_likesScalarFieldEnum = makeEnum({
  id: 'id',
  company_likes_id: 'company_likes_id',
  company_liked_id: 'company_liked_id',
  is_liked: 'is_liked',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Phone_authScalarFieldEnum = makeEnum({
  id: 'id',
  phone_number: 'phone_number',
  auth_number: 'auth_number'
});

exports.Prisma.Project_imagesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  img_url: 'img_url'
});

exports.Prisma.Project_likesScalarFieldEnum = makeEnum({
  id: 'id',
  comapny_id: 'comapny_id',
  project_id: 'project_id',
  is_liked: 'is_liked',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ProjectsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  introduction: 'introduction',
  host: 'host',
  due_date: 'due_date',
  sector_id: 'sector_id',
  eligibility: 'eligibility',
  outline: 'outline',
  detail: 'detail',
  application_method: 'application_method',
  caution: 'caution',
  contact: 'contact',
  is_opened: 'is_opened',
  hit: 'hit',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.QuestionsScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  company_id: 'company_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  demoday_id: 'demoday_id'
});

exports.Prisma.Recent_views_projectScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Required_documentsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  document_id: 'document_id'
});

exports.Prisma.SectorsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.Service_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.Signup_methodsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.Startup_imagesScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  img_url: 'img_url'
});

exports.Prisma.Startup_infosScalarFieldEnum = makeEnum({
  id: 'id',
  company_id: 'company_id',
  rep: 'rep',
  sector_id: 'sector_id',
  core_technology_id: 'core_technology_id',
  item_description: 'item_description',
  contact: 'contact',
  address_road: 'address_road',
  address_detail: 'address_detail',
  service_type_id: 'service_type_id',
  business_type_id: 'business_type_id',
  business_license_number: 'business_license_number',
  email: 'email',
  instagram_url: 'instagram_url',
  facebook_url: 'facebook_url',
  thumbnail: 'thumbnail'
});

exports.Prisma.Startup_likesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  company_id: 'company_id',
  is_liked: 'is_liked',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TechnologiesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.TermsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  content: 'content'
});

exports.Prisma.User_agreementsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  term_id: 'term_id'
});

exports.Prisma.User_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  sns_id: 'sns_id',
  name: 'name',
  type_id: 'type_id',
  profile_picture: 'profile_picture',
  email: 'email',
  password: 'password',
  signup_method_id: 'signup_method_id',
  company_id: 'company_id',
  phone_number: 'phone_number',
  is_verified: 'is_verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.VotesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  participants_id: 'participants_id',
  created_at: 'created_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  answers: 'answers',
  applicants: 'applicants',
  business_types: 'business_types',
  companies: 'companies',
  company_documents: 'company_documents',
  company_members: 'company_members',
  company_news: 'company_news',
  company_types: 'company_types',
  demodays: 'demodays',
  document_types: 'document_types',
  email_auth: 'email_auth',
  invested_from: 'invested_from',
  invested_to: 'invested_to',
  investment_funds: 'investment_funds',
  investment_portfolio: 'investment_portfolio',
  investment_series: 'investment_series',
  IR_requests: 'IR_requests',
  participants: 'participants',
  partner_infos: 'partner_infos',
  partner_likes: 'partner_likes',
  phone_auth: 'phone_auth',
  project_images: 'project_images',
  project_likes: 'project_likes',
  projects: 'projects',
  questions: 'questions',
  recent_views_project: 'recent_views_project',
  required_documents: 'required_documents',
  sectors: 'sectors',
  service_types: 'service_types',
  signup_methods: 'signup_methods',
  startup_images: 'startup_images',
  startup_infos: 'startup_infos',
  startup_likes: 'startup_likes',
  technologies: 'technologies',
  terms: 'terms',
  user_agreements: 'user_agreements',
  user_types: 'user_types',
  users: 'users',
  votes: 'votes'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
